!function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=28)}([function(t,e){t.exports=React},function(t,e,n){(function(t,r){var a;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */(function(){var i="Expected a function",o="__lodash_placeholder__",s=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],l="[object Arguments]",u="[object Array]",c="[object Boolean]",h="[object Date]",f="[object Error]",p="[object Function]",d="[object GeneratorFunction]",m="[object Map]",y="[object Number]",v="[object Object]",g="[object RegExp]",b="[object Set]",_="[object String]",x="[object Symbol]",w="[object WeakMap]",E="[object ArrayBuffer]",M="[object DataView]",S="[object Float32Array]",k="[object Float64Array]",T="[object Int8Array]",D="[object Int16Array]",C="[object Int32Array]",N="[object Uint8Array]",A="[object Uint16Array]",P="[object Uint32Array]",I=/\b__p \+= '';/g,O=/\b(__p \+=) '' \+/g,j=/(__e\(.*?\)|\b__t\)) \+\n'';/g,R=/&(?:amp|lt|gt|quot|#39);/g,L=/[&<>"']/g,F=RegExp(R.source),B=RegExp(L.source),H=/<%-([\s\S]+?)%>/g,z=/<%([\s\S]+?)%>/g,q=/<%=([\s\S]+?)%>/g,G=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,U=/^\w*$/,V=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Y=/[\\^$.*+?()[\]{}|]/g,W=RegExp(Y.source),$=/^\s+|\s+$/g,X=/^\s+/,Z=/\s+$/,Q=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,J=/\{\n\/\* \[wrapped with (.+)\] \*/,K=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/\\(\\)?/g,nt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,rt=/\w*$/,at=/^[-+]0x[0-9a-f]+$/i,it=/^0b[01]+$/i,ot=/^\[object .+?Constructor\]$/,st=/^0o[0-7]+$/i,lt=/^(?:0|[1-9]\d*)$/,ut=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ct=/($^)/,ht=/['\n\r\u2028\u2029\\]/g,ft="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",pt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",dt="[\\ud800-\\udfff]",mt="["+pt+"]",yt="["+ft+"]",vt="\\d+",gt="[\\u2700-\\u27bf]",bt="[a-z\\xdf-\\xf6\\xf8-\\xff]",_t="[^\\ud800-\\udfff"+pt+vt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",xt="\\ud83c[\\udffb-\\udfff]",wt="[^\\ud800-\\udfff]",Et="(?:\\ud83c[\\udde6-\\uddff]){2}",Mt="[\\ud800-\\udbff][\\udc00-\\udfff]",St="[A-Z\\xc0-\\xd6\\xd8-\\xde]",kt="(?:"+bt+"|"+_t+")",Tt="(?:"+St+"|"+_t+")",Dt="(?:"+yt+"|"+xt+")"+"?",Ct="[\\ufe0e\\ufe0f]?"+Dt+("(?:\\u200d(?:"+[wt,Et,Mt].join("|")+")[\\ufe0e\\ufe0f]?"+Dt+")*"),Nt="(?:"+[gt,Et,Mt].join("|")+")"+Ct,At="(?:"+[wt+yt+"?",yt,Et,Mt,dt].join("|")+")",Pt=RegExp("['’]","g"),It=RegExp(yt,"g"),Ot=RegExp(xt+"(?="+xt+")|"+At+Ct,"g"),jt=RegExp([St+"?"+bt+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[mt,St,"$"].join("|")+")",Tt+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[mt,St+kt,"$"].join("|")+")",St+"?"+kt+"+(?:['’](?:d|ll|m|re|s|t|ve))?",St+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",vt,Nt].join("|"),"g"),Rt=RegExp("[\\u200d\\ud800-\\udfff"+ft+"\\ufe0e\\ufe0f]"),Lt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,Ft=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Bt=-1,Ht={};Ht[S]=Ht[k]=Ht[T]=Ht[D]=Ht[C]=Ht[N]=Ht["[object Uint8ClampedArray]"]=Ht[A]=Ht[P]=!0,Ht[l]=Ht[u]=Ht[E]=Ht[c]=Ht[M]=Ht[h]=Ht[f]=Ht[p]=Ht[m]=Ht[y]=Ht[v]=Ht[g]=Ht[b]=Ht[_]=Ht[w]=!1;var zt={};zt[l]=zt[u]=zt[E]=zt[M]=zt[c]=zt[h]=zt[S]=zt[k]=zt[T]=zt[D]=zt[C]=zt[m]=zt[y]=zt[v]=zt[g]=zt[b]=zt[_]=zt[x]=zt[N]=zt["[object Uint8ClampedArray]"]=zt[A]=zt[P]=!0,zt[f]=zt[p]=zt[w]=!1;var qt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Gt=parseFloat,Ut=parseInt,Vt="object"==typeof t&&t&&t.Object===Object&&t,Yt="object"==typeof self&&self&&self.Object===Object&&self,Wt=Vt||Yt||Function("return this")(),$t=e&&!e.nodeType&&e,Xt=$t&&"object"==typeof r&&r&&!r.nodeType&&r,Zt=Xt&&Xt.exports===$t,Qt=Zt&&Vt.process,Jt=function(){try{var t=Xt&&Xt.require&&Xt.require("util").types;return t||Qt&&Qt.binding&&Qt.binding("util")}catch(t){}}(),Kt=Jt&&Jt.isArrayBuffer,te=Jt&&Jt.isDate,ee=Jt&&Jt.isMap,ne=Jt&&Jt.isRegExp,re=Jt&&Jt.isSet,ae=Jt&&Jt.isTypedArray;function ie(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function oe(t,e,n,r){for(var a=-1,i=null==t?0:t.length;++a<i;){var o=t[a];e(r,o,n(o),t)}return r}function se(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function le(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function ue(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function ce(t,e){for(var n=-1,r=null==t?0:t.length,a=0,i=[];++n<r;){var o=t[n];e(o,n,t)&&(i[a++]=o)}return i}function he(t,e){return!!(null==t?0:t.length)&&xe(t,e,0)>-1}function fe(t,e,n){for(var r=-1,a=null==t?0:t.length;++r<a;)if(n(e,t[r]))return!0;return!1}function pe(t,e){for(var n=-1,r=null==t?0:t.length,a=Array(r);++n<r;)a[n]=e(t[n],n,t);return a}function de(t,e){for(var n=-1,r=e.length,a=t.length;++n<r;)t[a+n]=e[n];return t}function me(t,e,n,r){var a=-1,i=null==t?0:t.length;for(r&&i&&(n=t[++a]);++a<i;)n=e(n,t[a],a,t);return n}function ye(t,e,n,r){var a=null==t?0:t.length;for(r&&a&&(n=t[--a]);a--;)n=e(n,t[a],a,t);return n}function ve(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var ge=Se("length");function be(t,e,n){var r;return n(t,(function(t,n,a){if(e(t,n,a))return r=n,!1})),r}function _e(t,e,n,r){for(var a=t.length,i=n+(r?1:-1);r?i--:++i<a;)if(e(t[i],i,t))return i;return-1}function xe(t,e,n){return e==e?function(t,e,n){var r=n-1,a=t.length;for(;++r<a;)if(t[r]===e)return r;return-1}(t,e,n):_e(t,Ee,n)}function we(t,e,n,r){for(var a=n-1,i=t.length;++a<i;)if(r(t[a],e))return a;return-1}function Ee(t){return t!=t}function Me(t,e){var n=null==t?0:t.length;return n?De(t,e)/n:NaN}function Se(t){return function(e){return null==e?void 0:e[t]}}function ke(t){return function(e){return null==t?void 0:t[e]}}function Te(t,e,n,r,a){return a(t,(function(t,a,i){n=r?(r=!1,t):e(n,t,a,i)})),n}function De(t,e){for(var n,r=-1,a=t.length;++r<a;){var i=e(t[r]);void 0!==i&&(n=void 0===n?i:n+i)}return n}function Ce(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function Ne(t){return function(e){return t(e)}}function Ae(t,e){return pe(e,(function(e){return t[e]}))}function Pe(t,e){return t.has(e)}function Ie(t,e){for(var n=-1,r=t.length;++n<r&&xe(e,t[n],0)>-1;);return n}function Oe(t,e){for(var n=t.length;n--&&xe(e,t[n],0)>-1;);return n}function je(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var Re=ke({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),Le=ke({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Fe(t){return"\\"+qt[t]}function Be(t){return Rt.test(t)}function He(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function ze(t,e){return function(n){return t(e(n))}}function qe(t,e){for(var n=-1,r=t.length,a=0,i=[];++n<r;){var s=t[n];s!==e&&s!==o||(t[n]=o,i[a++]=n)}return i}function Ge(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function Ue(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function Ve(t){return Be(t)?function(t){var e=Ot.lastIndex=0;for(;Ot.test(t);)++e;return e}(t):ge(t)}function Ye(t){return Be(t)?function(t){return t.match(Ot)||[]}(t):function(t){return t.split("")}(t)}var We=ke({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var $e=function t(e){var n,r=(e=null==e?Wt:$e.defaults(Wt.Object(),e,$e.pick(Wt,Ft))).Array,a=e.Date,ft=e.Error,pt=e.Function,dt=e.Math,mt=e.Object,yt=e.RegExp,vt=e.String,gt=e.TypeError,bt=r.prototype,_t=pt.prototype,xt=mt.prototype,wt=e["__core-js_shared__"],Et=_t.toString,Mt=xt.hasOwnProperty,St=0,kt=(n=/[^.]+$/.exec(wt&&wt.keys&&wt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Tt=xt.toString,Dt=Et.call(mt),Ct=Wt._,Nt=yt("^"+Et.call(Mt).replace(Y,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),At=Zt?e.Buffer:void 0,Ot=e.Symbol,Rt=e.Uint8Array,qt=At?At.allocUnsafe:void 0,Vt=ze(mt.getPrototypeOf,mt),Yt=mt.create,$t=xt.propertyIsEnumerable,Xt=bt.splice,Qt=Ot?Ot.isConcatSpreadable:void 0,Jt=Ot?Ot.iterator:void 0,ge=Ot?Ot.toStringTag:void 0,ke=function(){try{var t=Ka(mt,"defineProperty");return t({},"",{}),t}catch(t){}}(),Xe=e.clearTimeout!==Wt.clearTimeout&&e.clearTimeout,Ze=a&&a.now!==Wt.Date.now&&a.now,Qe=e.setTimeout!==Wt.setTimeout&&e.setTimeout,Je=dt.ceil,Ke=dt.floor,tn=mt.getOwnPropertySymbols,en=At?At.isBuffer:void 0,nn=e.isFinite,rn=bt.join,an=ze(mt.keys,mt),on=dt.max,sn=dt.min,ln=a.now,un=e.parseInt,cn=dt.random,hn=bt.reverse,fn=Ka(e,"DataView"),pn=Ka(e,"Map"),dn=Ka(e,"Promise"),mn=Ka(e,"Set"),yn=Ka(e,"WeakMap"),vn=Ka(mt,"create"),gn=yn&&new yn,bn={},_n=ki(fn),xn=ki(pn),wn=ki(dn),En=ki(mn),Mn=ki(yn),Sn=Ot?Ot.prototype:void 0,kn=Sn?Sn.valueOf:void 0,Tn=Sn?Sn.toString:void 0;function Dn(t){if(Uo(t)&&!Io(t)&&!(t instanceof Pn)){if(t instanceof An)return t;if(Mt.call(t,"__wrapped__"))return Ti(t)}return new An(t)}var Cn=function(){function t(){}return function(e){if(!Go(e))return{};if(Yt)return Yt(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();function Nn(){}function An(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function Pn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function In(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function On(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function jn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Rn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new jn;++e<n;)this.add(t[e])}function Ln(t){var e=this.__data__=new On(t);this.size=e.size}function Fn(t,e){var n=Io(t),r=!n&&Po(t),a=!n&&!r&&Lo(t),i=!n&&!r&&!a&&Jo(t),o=n||r||a||i,s=o?Ce(t.length,vt):[],l=s.length;for(var u in t)!e&&!Mt.call(t,u)||o&&("length"==u||a&&("offset"==u||"parent"==u)||i&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||oi(u,l))||s.push(u);return s}function Bn(t){var e=t.length;return e?t[Rr(0,e-1)]:void 0}function Hn(t,e){return Ei(va(t),Xn(e,0,t.length))}function zn(t){return Ei(va(t))}function qn(t,e,n){(void 0!==n&&!Co(t[e],n)||void 0===n&&!(e in t))&&Wn(t,e,n)}function Gn(t,e,n){var r=t[e];Mt.call(t,e)&&Co(r,n)&&(void 0!==n||e in t)||Wn(t,e,n)}function Un(t,e){for(var n=t.length;n--;)if(Co(t[n][0],e))return n;return-1}function Vn(t,e,n,r){return tr(t,(function(t,a,i){e(r,t,n(t),i)})),r}function Yn(t,e){return t&&ga(e,_s(e),t)}function Wn(t,e,n){"__proto__"==e&&ke?ke(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function $n(t,e){for(var n=-1,a=e.length,i=r(a),o=null==t;++n<a;)i[n]=o?void 0:ms(t,e[n]);return i}function Xn(t,e,n){return t==t&&(void 0!==n&&(t=t<=n?t:n),void 0!==e&&(t=t>=e?t:e)),t}function Zn(t,e,n,r,a,i){var o,s=1&e,u=2&e,f=4&e;if(n&&(o=a?n(t,r,a,i):n(t)),void 0!==o)return o;if(!Go(t))return t;var w=Io(t);if(w){if(o=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&Mt.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!s)return va(t,o)}else{var I=ni(t),O=I==p||I==d;if(Lo(t))return ha(t,s);if(I==v||I==l||O&&!a){if(o=u||O?{}:ai(t),!s)return u?function(t,e){return ga(t,ei(t),e)}(t,function(t,e){return t&&ga(e,xs(e),t)}(o,t)):function(t,e){return ga(t,ti(t),e)}(t,Yn(o,t))}else{if(!zt[I])return a?t:{};o=function(t,e,n){var r=t.constructor;switch(e){case E:return fa(t);case c:case h:return new r(+t);case M:return function(t,e){var n=e?fa(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case S:case k:case T:case D:case C:case N:case"[object Uint8ClampedArray]":case A:case P:return pa(t,n);case m:return new r;case y:case _:return new r(t);case g:return function(t){var e=new t.constructor(t.source,rt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case b:return new r;case x:return a=t,kn?mt(kn.call(a)):{}}var a}(t,I,s)}}i||(i=new Ln);var j=i.get(t);if(j)return j;i.set(t,o),Xo(t)?t.forEach((function(r){o.add(Zn(r,e,n,r,t,i))})):Vo(t)&&t.forEach((function(r,a){o.set(a,Zn(r,e,n,a,t,i))}));var R=w?void 0:(f?u?Ya:Va:u?xs:_s)(t);return se(R||t,(function(r,a){R&&(r=t[a=r]),Gn(o,a,Zn(r,e,n,a,t,i))})),o}function Qn(t,e,n){var r=n.length;if(null==t)return!r;for(t=mt(t);r--;){var a=n[r],i=e[a],o=t[a];if(void 0===o&&!(a in t)||!i(o))return!1}return!0}function Jn(t,e,n){if("function"!=typeof t)throw new gt(i);return bi((function(){t.apply(void 0,n)}),e)}function Kn(t,e,n,r){var a=-1,i=he,o=!0,s=t.length,l=[],u=e.length;if(!s)return l;n&&(e=pe(e,Ne(n))),r?(i=fe,o=!1):e.length>=200&&(i=Pe,o=!1,e=new Rn(e));t:for(;++a<s;){var c=t[a],h=null==n?c:n(c);if(c=r||0!==c?c:0,o&&h==h){for(var f=u;f--;)if(e[f]===h)continue t;l.push(c)}else i(e,h,r)||l.push(c)}return l}Dn.templateSettings={escape:H,evaluate:z,interpolate:q,variable:"",imports:{_:Dn}},Dn.prototype=Nn.prototype,Dn.prototype.constructor=Dn,An.prototype=Cn(Nn.prototype),An.prototype.constructor=An,Pn.prototype=Cn(Nn.prototype),Pn.prototype.constructor=Pn,In.prototype.clear=function(){this.__data__=vn?vn(null):{},this.size=0},In.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},In.prototype.get=function(t){var e=this.__data__;if(vn){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return Mt.call(e,t)?e[t]:void 0},In.prototype.has=function(t){var e=this.__data__;return vn?void 0!==e[t]:Mt.call(e,t)},In.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=vn&&void 0===e?"__lodash_hash_undefined__":e,this},On.prototype.clear=function(){this.__data__=[],this.size=0},On.prototype.delete=function(t){var e=this.__data__,n=Un(e,t);return!(n<0)&&(n==e.length-1?e.pop():Xt.call(e,n,1),--this.size,!0)},On.prototype.get=function(t){var e=this.__data__,n=Un(e,t);return n<0?void 0:e[n][1]},On.prototype.has=function(t){return Un(this.__data__,t)>-1},On.prototype.set=function(t,e){var n=this.__data__,r=Un(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},jn.prototype.clear=function(){this.size=0,this.__data__={hash:new In,map:new(pn||On),string:new In}},jn.prototype.delete=function(t){var e=Qa(this,t).delete(t);return this.size-=e?1:0,e},jn.prototype.get=function(t){return Qa(this,t).get(t)},jn.prototype.has=function(t){return Qa(this,t).has(t)},jn.prototype.set=function(t,e){var n=Qa(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Rn.prototype.add=Rn.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Rn.prototype.has=function(t){return this.__data__.has(t)},Ln.prototype.clear=function(){this.__data__=new On,this.size=0},Ln.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Ln.prototype.get=function(t){return this.__data__.get(t)},Ln.prototype.has=function(t){return this.__data__.has(t)},Ln.prototype.set=function(t,e){var n=this.__data__;if(n instanceof On){var r=n.__data__;if(!pn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new jn(r)}return n.set(t,e),this.size=n.size,this};var tr=xa(lr),er=xa(ur,!0);function nr(t,e){var n=!0;return tr(t,(function(t,r,a){return n=!!e(t,r,a)})),n}function rr(t,e,n){for(var r=-1,a=t.length;++r<a;){var i=t[r],o=e(i);if(null!=o&&(void 0===s?o==o&&!Qo(o):n(o,s)))var s=o,l=i}return l}function ar(t,e){var n=[];return tr(t,(function(t,r,a){e(t,r,a)&&n.push(t)})),n}function ir(t,e,n,r,a){var i=-1,o=t.length;for(n||(n=ii),a||(a=[]);++i<o;){var s=t[i];e>0&&n(s)?e>1?ir(s,e-1,n,r,a):de(a,s):r||(a[a.length]=s)}return a}var or=wa(),sr=wa(!0);function lr(t,e){return t&&or(t,e,_s)}function ur(t,e){return t&&sr(t,e,_s)}function cr(t,e){return ce(e,(function(e){return Ho(t[e])}))}function hr(t,e){for(var n=0,r=(e=sa(e,t)).length;null!=t&&n<r;)t=t[Si(e[n++])];return n&&n==r?t:void 0}function fr(t,e,n){var r=e(t);return Io(t)?r:de(r,n(t))}function pr(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":ge&&ge in mt(t)?function(t){var e=Mt.call(t,ge),n=t[ge];try{t[ge]=void 0;var r=!0}catch(t){}var a=Tt.call(t);r&&(e?t[ge]=n:delete t[ge]);return a}(t):function(t){return Tt.call(t)}(t)}function dr(t,e){return t>e}function mr(t,e){return null!=t&&Mt.call(t,e)}function yr(t,e){return null!=t&&e in mt(t)}function vr(t,e,n){for(var a=n?fe:he,i=t[0].length,o=t.length,s=o,l=r(o),u=1/0,c=[];s--;){var h=t[s];s&&e&&(h=pe(h,Ne(e))),u=sn(h.length,u),l[s]=!n&&(e||i>=120&&h.length>=120)?new Rn(s&&h):void 0}h=t[0];var f=-1,p=l[0];t:for(;++f<i&&c.length<u;){var d=h[f],m=e?e(d):d;if(d=n||0!==d?d:0,!(p?Pe(p,m):a(c,m,n))){for(s=o;--s;){var y=l[s];if(!(y?Pe(y,m):a(t[s],m,n)))continue t}p&&p.push(m),c.push(d)}}return c}function gr(t,e,n){var r=null==(t=mi(t,e=sa(e,t)))?t:t[Si(Fi(e))];return null==r?void 0:ie(r,t,n)}function br(t){return Uo(t)&&pr(t)==l}function _r(t,e,n,r,a){return t===e||(null==t||null==e||!Uo(t)&&!Uo(e)?t!=t&&e!=e:function(t,e,n,r,a,i){var o=Io(t),s=Io(e),p=o?u:ni(t),d=s?u:ni(e),w=(p=p==l?v:p)==v,S=(d=d==l?v:d)==v,k=p==d;if(k&&Lo(t)){if(!Lo(e))return!1;o=!0,w=!1}if(k&&!w)return i||(i=new Ln),o||Jo(t)?Ga(t,e,n,r,a,i):function(t,e,n,r,a,i,o){switch(n){case M:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case E:return!(t.byteLength!=e.byteLength||!i(new Rt(t),new Rt(e)));case c:case h:case y:return Co(+t,+e);case f:return t.name==e.name&&t.message==e.message;case g:case _:return t==e+"";case m:var s=He;case b:var l=1&r;if(s||(s=Ge),t.size!=e.size&&!l)return!1;var u=o.get(t);if(u)return u==e;r|=2,o.set(t,e);var p=Ga(s(t),s(e),r,a,i,o);return o.delete(t),p;case x:if(kn)return kn.call(t)==kn.call(e)}return!1}(t,e,p,n,r,a,i);if(!(1&n)){var T=w&&Mt.call(t,"__wrapped__"),D=S&&Mt.call(e,"__wrapped__");if(T||D){var C=T?t.value():t,N=D?e.value():e;return i||(i=new Ln),a(C,N,n,r,i)}}if(!k)return!1;return i||(i=new Ln),function(t,e,n,r,a,i){var o=1&n,s=Va(t),l=s.length,u=Va(e).length;if(l!=u&&!o)return!1;var c=l;for(;c--;){var h=s[c];if(!(o?h in e:Mt.call(e,h)))return!1}var f=i.get(t),p=i.get(e);if(f&&p)return f==e&&p==t;var d=!0;i.set(t,e),i.set(e,t);var m=o;for(;++c<l;){h=s[c];var y=t[h],v=e[h];if(r)var g=o?r(v,y,h,e,t,i):r(y,v,h,t,e,i);if(!(void 0===g?y===v||a(y,v,n,r,i):g)){d=!1;break}m||(m="constructor"==h)}if(d&&!m){var b=t.constructor,_=e.constructor;b==_||!("constructor"in t)||!("constructor"in e)||"function"==typeof b&&b instanceof b&&"function"==typeof _&&_ instanceof _||(d=!1)}return i.delete(t),i.delete(e),d}(t,e,n,r,a,i)}(t,e,n,r,_r,a))}function xr(t,e,n,r){var a=n.length,i=a,o=!r;if(null==t)return!i;for(t=mt(t);a--;){var s=n[a];if(o&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++a<i;){var l=(s=n[a])[0],u=t[l],c=s[1];if(o&&s[2]){if(void 0===u&&!(l in t))return!1}else{var h=new Ln;if(r)var f=r(u,c,l,t,e,h);if(!(void 0===f?_r(c,u,3,r,h):f))return!1}}return!0}function wr(t){return!(!Go(t)||(e=t,kt&&kt in e))&&(Ho(t)?Nt:ot).test(ki(t));var e}function Er(t){return"function"==typeof t?t:null==t?Ys:"object"==typeof t?Io(t)?Cr(t[0],t[1]):Dr(t):el(t)}function Mr(t){if(!hi(t))return an(t);var e=[];for(var n in mt(t))Mt.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Sr(t){if(!Go(t))return function(t){var e=[];if(null!=t)for(var n in mt(t))e.push(n);return e}(t);var e=hi(t),n=[];for(var r in t)("constructor"!=r||!e&&Mt.call(t,r))&&n.push(r);return n}function kr(t,e){return t<e}function Tr(t,e){var n=-1,a=jo(t)?r(t.length):[];return tr(t,(function(t,r,i){a[++n]=e(t,r,i)})),a}function Dr(t){var e=Ja(t);return 1==e.length&&e[0][2]?pi(e[0][0],e[0][1]):function(n){return n===t||xr(n,t,e)}}function Cr(t,e){return li(t)&&fi(e)?pi(Si(t),e):function(n){var r=ms(n,t);return void 0===r&&r===e?ys(n,t):_r(e,r,3)}}function Nr(t,e,n,r,a){t!==e&&or(e,(function(i,o){if(a||(a=new Ln),Go(i))!function(t,e,n,r,a,i,o){var s=vi(t,n),l=vi(e,n),u=o.get(l);if(u)return void qn(t,n,u);var c=i?i(s,l,n+"",t,e,o):void 0,h=void 0===c;if(h){var f=Io(l),p=!f&&Lo(l),d=!f&&!p&&Jo(l);c=l,f||p||d?Io(s)?c=s:Ro(s)?c=va(s):p?(h=!1,c=ha(l,!0)):d?(h=!1,c=pa(l,!0)):c=[]:Wo(l)||Po(l)?(c=s,Po(s)?c=os(s):Go(s)&&!Ho(s)||(c=ai(l))):h=!1}h&&(o.set(l,c),a(c,l,r,i,o),o.delete(l));qn(t,n,c)}(t,e,o,n,Nr,r,a);else{var s=r?r(vi(t,o),i,o+"",t,e,a):void 0;void 0===s&&(s=i),qn(t,o,s)}}),xs)}function Ar(t,e){var n=t.length;if(n)return oi(e+=e<0?n:0,n)?t[e]:void 0}function Pr(t,e,n){e=e.length?pe(e,(function(t){return Io(t)?function(e){return hr(e,1===t.length?t[0]:t)}:t})):[Ys];var r=-1;return e=pe(e,Ne(Za())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(Tr(t,(function(t,n,a){return{criteria:pe(e,(function(e){return e(t)})),index:++r,value:t}})),(function(t,e){return function(t,e,n){var r=-1,a=t.criteria,i=e.criteria,o=a.length,s=n.length;for(;++r<o;){var l=da(a[r],i[r]);if(l){if(r>=s)return l;var u=n[r];return l*("desc"==u?-1:1)}}return t.index-e.index}(t,e,n)}))}function Ir(t,e,n){for(var r=-1,a=e.length,i={};++r<a;){var o=e[r],s=hr(t,o);n(s,o)&&zr(i,sa(o,t),s)}return i}function Or(t,e,n,r){var a=r?we:xe,i=-1,o=e.length,s=t;for(t===e&&(e=va(e)),n&&(s=pe(t,Ne(n)));++i<o;)for(var l=0,u=e[i],c=n?n(u):u;(l=a(s,c,l,r))>-1;)s!==t&&Xt.call(s,l,1),Xt.call(t,l,1);return t}function jr(t,e){for(var n=t?e.length:0,r=n-1;n--;){var a=e[n];if(n==r||a!==i){var i=a;oi(a)?Xt.call(t,a,1):Kr(t,a)}}return t}function Rr(t,e){return t+Ke(cn()*(e-t+1))}function Lr(t,e){var n="";if(!t||e<1||e>9007199254740991)return n;do{e%2&&(n+=t),(e=Ke(e/2))&&(t+=t)}while(e);return n}function Fr(t,e){return _i(di(t,e,Ys),t+"")}function Br(t){return Bn(Cs(t))}function Hr(t,e){var n=Cs(t);return Ei(n,Xn(e,0,n.length))}function zr(t,e,n,r){if(!Go(t))return t;for(var a=-1,i=(e=sa(e,t)).length,o=i-1,s=t;null!=s&&++a<i;){var l=Si(e[a]),u=n;if("__proto__"===l||"constructor"===l||"prototype"===l)return t;if(a!=o){var c=s[l];void 0===(u=r?r(c,l,s):void 0)&&(u=Go(c)?c:oi(e[a+1])?[]:{})}Gn(s,l,u),s=s[l]}return t}var qr=gn?function(t,e){return gn.set(t,e),t}:Ys,Gr=ke?function(t,e){return ke(t,"toString",{configurable:!0,enumerable:!1,value:Gs(e),writable:!0})}:Ys;function Ur(t){return Ei(Cs(t))}function Vr(t,e,n){var a=-1,i=t.length;e<0&&(e=-e>i?0:i+e),(n=n>i?i:n)<0&&(n+=i),i=e>n?0:n-e>>>0,e>>>=0;for(var o=r(i);++a<i;)o[a]=t[a+e];return o}function Yr(t,e){var n;return tr(t,(function(t,r,a){return!(n=e(t,r,a))})),!!n}function Wr(t,e,n){var r=0,a=null==t?r:t.length;if("number"==typeof e&&e==e&&a<=2147483647){for(;r<a;){var i=r+a>>>1,o=t[i];null!==o&&!Qo(o)&&(n?o<=e:o<e)?r=i+1:a=i}return a}return $r(t,e,Ys,n)}function $r(t,e,n,r){var a=0,i=null==t?0:t.length;if(0===i)return 0;for(var o=(e=n(e))!=e,s=null===e,l=Qo(e),u=void 0===e;a<i;){var c=Ke((a+i)/2),h=n(t[c]),f=void 0!==h,p=null===h,d=h==h,m=Qo(h);if(o)var y=r||d;else y=u?d&&(r||f):s?d&&f&&(r||!p):l?d&&f&&!p&&(r||!m):!p&&!m&&(r?h<=e:h<e);y?a=c+1:i=c}return sn(i,4294967294)}function Xr(t,e){for(var n=-1,r=t.length,a=0,i=[];++n<r;){var o=t[n],s=e?e(o):o;if(!n||!Co(s,l)){var l=s;i[a++]=0===o?0:o}}return i}function Zr(t){return"number"==typeof t?t:Qo(t)?NaN:+t}function Qr(t){if("string"==typeof t)return t;if(Io(t))return pe(t,Qr)+"";if(Qo(t))return Tn?Tn.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Jr(t,e,n){var r=-1,a=he,i=t.length,o=!0,s=[],l=s;if(n)o=!1,a=fe;else if(i>=200){var u=e?null:La(t);if(u)return Ge(u);o=!1,a=Pe,l=new Rn}else l=e?[]:s;t:for(;++r<i;){var c=t[r],h=e?e(c):c;if(c=n||0!==c?c:0,o&&h==h){for(var f=l.length;f--;)if(l[f]===h)continue t;e&&l.push(h),s.push(c)}else a(l,h,n)||(l!==s&&l.push(h),s.push(c))}return s}function Kr(t,e){return null==(t=mi(t,e=sa(e,t)))||delete t[Si(Fi(e))]}function ta(t,e,n,r){return zr(t,e,n(hr(t,e)),r)}function ea(t,e,n,r){for(var a=t.length,i=r?a:-1;(r?i--:++i<a)&&e(t[i],i,t););return n?Vr(t,r?0:i,r?i+1:a):Vr(t,r?i+1:0,r?a:i)}function na(t,e){var n=t;return n instanceof Pn&&(n=n.value()),me(e,(function(t,e){return e.func.apply(e.thisArg,de([t],e.args))}),n)}function ra(t,e,n){var a=t.length;if(a<2)return a?Jr(t[0]):[];for(var i=-1,o=r(a);++i<a;)for(var s=t[i],l=-1;++l<a;)l!=i&&(o[i]=Kn(o[i]||s,t[l],e,n));return Jr(ir(o,1),e,n)}function aa(t,e,n){for(var r=-1,a=t.length,i=e.length,o={};++r<a;){var s=r<i?e[r]:void 0;n(o,t[r],s)}return o}function ia(t){return Ro(t)?t:[]}function oa(t){return"function"==typeof t?t:Ys}function sa(t,e){return Io(t)?t:li(t,e)?[t]:Mi(ss(t))}var la=Fr;function ua(t,e,n){var r=t.length;return n=void 0===n?r:n,!e&&n>=r?t:Vr(t,e,n)}var ca=Xe||function(t){return Wt.clearTimeout(t)};function ha(t,e){if(e)return t.slice();var n=t.length,r=qt?qt(n):new t.constructor(n);return t.copy(r),r}function fa(t){var e=new t.constructor(t.byteLength);return new Rt(e).set(new Rt(t)),e}function pa(t,e){var n=e?fa(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function da(t,e){if(t!==e){var n=void 0!==t,r=null===t,a=t==t,i=Qo(t),o=void 0!==e,s=null===e,l=e==e,u=Qo(e);if(!s&&!u&&!i&&t>e||i&&o&&l&&!s&&!u||r&&o&&l||!n&&l||!a)return 1;if(!r&&!i&&!u&&t<e||u&&n&&a&&!r&&!i||s&&n&&a||!o&&a||!l)return-1}return 0}function ma(t,e,n,a){for(var i=-1,o=t.length,s=n.length,l=-1,u=e.length,c=on(o-s,0),h=r(u+c),f=!a;++l<u;)h[l]=e[l];for(;++i<s;)(f||i<o)&&(h[n[i]]=t[i]);for(;c--;)h[l++]=t[i++];return h}function ya(t,e,n,a){for(var i=-1,o=t.length,s=-1,l=n.length,u=-1,c=e.length,h=on(o-l,0),f=r(h+c),p=!a;++i<h;)f[i]=t[i];for(var d=i;++u<c;)f[d+u]=e[u];for(;++s<l;)(p||i<o)&&(f[d+n[s]]=t[i++]);return f}function va(t,e){var n=-1,a=t.length;for(e||(e=r(a));++n<a;)e[n]=t[n];return e}function ga(t,e,n,r){var a=!n;n||(n={});for(var i=-1,o=e.length;++i<o;){var s=e[i],l=r?r(n[s],t[s],s,n,t):void 0;void 0===l&&(l=t[s]),a?Wn(n,s,l):Gn(n,s,l)}return n}function ba(t,e){return function(n,r){var a=Io(n)?oe:Vn,i=e?e():{};return a(n,t,Za(r,2),i)}}function _a(t){return Fr((function(e,n){var r=-1,a=n.length,i=a>1?n[a-1]:void 0,o=a>2?n[2]:void 0;for(i=t.length>3&&"function"==typeof i?(a--,i):void 0,o&&si(n[0],n[1],o)&&(i=a<3?void 0:i,a=1),e=mt(e);++r<a;){var s=n[r];s&&t(e,s,r,i)}return e}))}function xa(t,e){return function(n,r){if(null==n)return n;if(!jo(n))return t(n,r);for(var a=n.length,i=e?a:-1,o=mt(n);(e?i--:++i<a)&&!1!==r(o[i],i,o););return n}}function wa(t){return function(e,n,r){for(var a=-1,i=mt(e),o=r(e),s=o.length;s--;){var l=o[t?s:++a];if(!1===n(i[l],l,i))break}return e}}function Ea(t){return function(e){var n=Be(e=ss(e))?Ye(e):void 0,r=n?n[0]:e.charAt(0),a=n?ua(n,1).join(""):e.slice(1);return r[t]()+a}}function Ma(t){return function(e){return me(Hs(Ps(e).replace(Pt,"")),t,"")}}function Sa(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=Cn(t.prototype),r=t.apply(n,e);return Go(r)?r:n}}function ka(t){return function(e,n,r){var a=mt(e);if(!jo(e)){var i=Za(n,3);e=_s(e),n=function(t){return i(a[t],t,a)}}var o=t(e,n,r);return o>-1?a[i?e[o]:o]:void 0}}function Ta(t){return Ua((function(e){var n=e.length,r=n,a=An.prototype.thru;for(t&&e.reverse();r--;){var o=e[r];if("function"!=typeof o)throw new gt(i);if(a&&!s&&"wrapper"==$a(o))var s=new An([],!0)}for(r=s?r:n;++r<n;){var l=$a(o=e[r]),u="wrapper"==l?Wa(o):void 0;s=u&&ui(u[0])&&424==u[1]&&!u[4].length&&1==u[9]?s[$a(u[0])].apply(s,u[3]):1==o.length&&ui(o)?s[l]():s.thru(o)}return function(){var t=arguments,r=t[0];if(s&&1==t.length&&Io(r))return s.plant(r).value();for(var a=0,i=n?e[a].apply(this,t):r;++a<n;)i=e[a].call(this,i);return i}}))}function Da(t,e,n,a,i,o,s,l,u,c){var h=128&e,f=1&e,p=2&e,d=24&e,m=512&e,y=p?void 0:Sa(t);return function v(){for(var g=arguments.length,b=r(g),_=g;_--;)b[_]=arguments[_];if(d)var x=Xa(v),w=je(b,x);if(a&&(b=ma(b,a,i,d)),o&&(b=ya(b,o,s,d)),g-=w,d&&g<c){var E=qe(b,x);return ja(t,e,Da,v.placeholder,n,b,E,l,u,c-g)}var M=f?n:this,S=p?M[t]:t;return g=b.length,l?b=yi(b,l):m&&g>1&&b.reverse(),h&&u<g&&(b.length=u),this&&this!==Wt&&this instanceof v&&(S=y||Sa(S)),S.apply(M,b)}}function Ca(t,e){return function(n,r){return function(t,e,n,r){return lr(t,(function(t,a,i){e(r,n(t),a,i)})),r}(n,t,e(r),{})}}function Na(t,e){return function(n,r){var a;if(void 0===n&&void 0===r)return e;if(void 0!==n&&(a=n),void 0!==r){if(void 0===a)return r;"string"==typeof n||"string"==typeof r?(n=Qr(n),r=Qr(r)):(n=Zr(n),r=Zr(r)),a=t(n,r)}return a}}function Aa(t){return Ua((function(e){return e=pe(e,Ne(Za())),Fr((function(n){var r=this;return t(e,(function(t){return ie(t,r,n)}))}))}))}function Pa(t,e){var n=(e=void 0===e?" ":Qr(e)).length;if(n<2)return n?Lr(e,t):e;var r=Lr(e,Je(t/Ve(e)));return Be(e)?ua(Ye(r),0,t).join(""):r.slice(0,t)}function Ia(t){return function(e,n,a){return a&&"number"!=typeof a&&si(e,n,a)&&(n=a=void 0),e=ns(e),void 0===n?(n=e,e=0):n=ns(n),function(t,e,n,a){for(var i=-1,o=on(Je((e-t)/(n||1)),0),s=r(o);o--;)s[a?o:++i]=t,t+=n;return s}(e,n,a=void 0===a?e<n?1:-1:ns(a),t)}}function Oa(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=is(e),n=is(n)),t(e,n)}}function ja(t,e,n,r,a,i,o,s,l,u){var c=8&e;e|=c?32:64,4&(e&=~(c?64:32))||(e&=-4);var h=[t,e,a,c?i:void 0,c?o:void 0,c?void 0:i,c?void 0:o,s,l,u],f=n.apply(void 0,h);return ui(t)&&gi(f,h),f.placeholder=r,xi(f,t,e)}function Ra(t){var e=dt[t];return function(t,n){if(t=is(t),(n=null==n?0:sn(rs(n),292))&&nn(t)){var r=(ss(t)+"e").split("e");return+((r=(ss(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var La=mn&&1/Ge(new mn([,-0]))[1]==1/0?function(t){return new mn(t)}:Qs;function Fa(t){return function(e){var n=ni(e);return n==m?He(e):n==b?Ue(e):function(t,e){return pe(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Ba(t,e,n,a,s,l,u,c){var h=2&e;if(!h&&"function"!=typeof t)throw new gt(i);var f=a?a.length:0;if(f||(e&=-97,a=s=void 0),u=void 0===u?u:on(rs(u),0),c=void 0===c?c:rs(c),f-=s?s.length:0,64&e){var p=a,d=s;a=s=void 0}var m=h?void 0:Wa(t),y=[t,e,n,a,s,p,d,l,u,c];if(m&&function(t,e){var n=t[1],r=e[1],a=n|r,i=a<131,s=128==r&&8==n||128==r&&256==n&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!i&&!s)return t;1&r&&(t[2]=e[2],a|=1&n?0:4);var l=e[3];if(l){var u=t[3];t[3]=u?ma(u,l,e[4]):l,t[4]=u?qe(t[3],o):e[4]}(l=e[5])&&(u=t[5],t[5]=u?ya(u,l,e[6]):l,t[6]=u?qe(t[5],o):e[6]);(l=e[7])&&(t[7]=l);128&r&&(t[8]=null==t[8]?e[8]:sn(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=a}(y,m),t=y[0],e=y[1],n=y[2],a=y[3],s=y[4],!(c=y[9]=void 0===y[9]?h?0:t.length:on(y[9]-f,0))&&24&e&&(e&=-25),e&&1!=e)v=8==e||16==e?function(t,e,n){var a=Sa(t);return function i(){for(var o=arguments.length,s=r(o),l=o,u=Xa(i);l--;)s[l]=arguments[l];var c=o<3&&s[0]!==u&&s[o-1]!==u?[]:qe(s,u);if((o-=c.length)<n)return ja(t,e,Da,i.placeholder,void 0,s,c,void 0,void 0,n-o);var h=this&&this!==Wt&&this instanceof i?a:t;return ie(h,this,s)}}(t,e,c):32!=e&&33!=e||s.length?Da.apply(void 0,y):function(t,e,n,a){var i=1&e,o=Sa(t);return function e(){for(var s=-1,l=arguments.length,u=-1,c=a.length,h=r(c+l),f=this&&this!==Wt&&this instanceof e?o:t;++u<c;)h[u]=a[u];for(;l--;)h[u++]=arguments[++s];return ie(f,i?n:this,h)}}(t,e,n,a);else var v=function(t,e,n){var r=1&e,a=Sa(t);return function e(){var i=this&&this!==Wt&&this instanceof e?a:t;return i.apply(r?n:this,arguments)}}(t,e,n);return xi((m?qr:gi)(v,y),t,e)}function Ha(t,e,n,r){return void 0===t||Co(t,xt[n])&&!Mt.call(r,n)?e:t}function za(t,e,n,r,a,i){return Go(t)&&Go(e)&&(i.set(e,t),Nr(t,e,void 0,za,i),i.delete(e)),t}function qa(t){return Wo(t)?void 0:t}function Ga(t,e,n,r,a,i){var o=1&n,s=t.length,l=e.length;if(s!=l&&!(o&&l>s))return!1;var u=i.get(t),c=i.get(e);if(u&&c)return u==e&&c==t;var h=-1,f=!0,p=2&n?new Rn:void 0;for(i.set(t,e),i.set(e,t);++h<s;){var d=t[h],m=e[h];if(r)var y=o?r(m,d,h,e,t,i):r(d,m,h,t,e,i);if(void 0!==y){if(y)continue;f=!1;break}if(p){if(!ve(e,(function(t,e){if(!Pe(p,e)&&(d===t||a(d,t,n,r,i)))return p.push(e)}))){f=!1;break}}else if(d!==m&&!a(d,m,n,r,i)){f=!1;break}}return i.delete(t),i.delete(e),f}function Ua(t){return _i(di(t,void 0,Ii),t+"")}function Va(t){return fr(t,_s,ti)}function Ya(t){return fr(t,xs,ei)}var Wa=gn?function(t){return gn.get(t)}:Qs;function $a(t){for(var e=t.name+"",n=bn[e],r=Mt.call(bn,e)?n.length:0;r--;){var a=n[r],i=a.func;if(null==i||i==t)return a.name}return e}function Xa(t){return(Mt.call(Dn,"placeholder")?Dn:t).placeholder}function Za(){var t=Dn.iteratee||Ws;return t=t===Ws?Er:t,arguments.length?t(arguments[0],arguments[1]):t}function Qa(t,e){var n,r,a=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?a["string"==typeof e?"string":"hash"]:a.map}function Ja(t){for(var e=_s(t),n=e.length;n--;){var r=e[n],a=t[r];e[n]=[r,a,fi(a)]}return e}function Ka(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return wr(n)?n:void 0}var ti=tn?function(t){return null==t?[]:(t=mt(t),ce(tn(t),(function(e){return $t.call(t,e)})))}:al,ei=tn?function(t){for(var e=[];t;)de(e,ti(t)),t=Vt(t);return e}:al,ni=pr;function ri(t,e,n){for(var r=-1,a=(e=sa(e,t)).length,i=!1;++r<a;){var o=Si(e[r]);if(!(i=null!=t&&n(t,o)))break;t=t[o]}return i||++r!=a?i:!!(a=null==t?0:t.length)&&qo(a)&&oi(o,a)&&(Io(t)||Po(t))}function ai(t){return"function"!=typeof t.constructor||hi(t)?{}:Cn(Vt(t))}function ii(t){return Io(t)||Po(t)||!!(Qt&&t&&t[Qt])}function oi(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&lt.test(t))&&t>-1&&t%1==0&&t<e}function si(t,e,n){if(!Go(n))return!1;var r=typeof e;return!!("number"==r?jo(n)&&oi(e,n.length):"string"==r&&e in n)&&Co(n[e],t)}function li(t,e){if(Io(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Qo(t))||(U.test(t)||!G.test(t)||null!=e&&t in mt(e))}function ui(t){var e=$a(t),n=Dn[e];if("function"!=typeof n||!(e in Pn.prototype))return!1;if(t===n)return!0;var r=Wa(n);return!!r&&t===r[0]}(fn&&ni(new fn(new ArrayBuffer(1)))!=M||pn&&ni(new pn)!=m||dn&&"[object Promise]"!=ni(dn.resolve())||mn&&ni(new mn)!=b||yn&&ni(new yn)!=w)&&(ni=function(t){var e=pr(t),n=e==v?t.constructor:void 0,r=n?ki(n):"";if(r)switch(r){case _n:return M;case xn:return m;case wn:return"[object Promise]";case En:return b;case Mn:return w}return e});var ci=wt?Ho:il;function hi(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||xt)}function fi(t){return t==t&&!Go(t)}function pi(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in mt(n)))}}function di(t,e,n){return e=on(void 0===e?t.length-1:e,0),function(){for(var a=arguments,i=-1,o=on(a.length-e,0),s=r(o);++i<o;)s[i]=a[e+i];i=-1;for(var l=r(e+1);++i<e;)l[i]=a[i];return l[e]=n(s),ie(t,this,l)}}function mi(t,e){return e.length<2?t:hr(t,Vr(e,0,-1))}function yi(t,e){for(var n=t.length,r=sn(e.length,n),a=va(t);r--;){var i=e[r];t[r]=oi(i,n)?a[i]:void 0}return t}function vi(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var gi=wi(qr),bi=Qe||function(t,e){return Wt.setTimeout(t,e)},_i=wi(Gr);function xi(t,e,n){var r=e+"";return _i(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Q,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return se(s,(function(n){var r="_."+n[0];e&n[1]&&!he(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(J);return e?e[1].split(K):[]}(r),n)))}function wi(t){var e=0,n=0;return function(){var r=ln(),a=16-(r-n);if(n=r,a>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function Ei(t,e){var n=-1,r=t.length,a=r-1;for(e=void 0===e?r:e;++n<e;){var i=Rr(n,a),o=t[i];t[i]=t[n],t[n]=o}return t.length=e,t}var Mi=function(t){var e=Eo(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(V,(function(t,n,r,a){e.push(r?a.replace(et,"$1"):n||t)})),e}));function Si(t){if("string"==typeof t||Qo(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function ki(t){if(null!=t){try{return Et.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Ti(t){if(t instanceof Pn)return t.clone();var e=new An(t.__wrapped__,t.__chain__);return e.__actions__=va(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Di=Fr((function(t,e){return Ro(t)?Kn(t,ir(e,1,Ro,!0)):[]})),Ci=Fr((function(t,e){var n=Fi(e);return Ro(n)&&(n=void 0),Ro(t)?Kn(t,ir(e,1,Ro,!0),Za(n,2)):[]})),Ni=Fr((function(t,e){var n=Fi(e);return Ro(n)&&(n=void 0),Ro(t)?Kn(t,ir(e,1,Ro,!0),void 0,n):[]}));function Ai(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var a=null==n?0:rs(n);return a<0&&(a=on(r+a,0)),_e(t,Za(e,3),a)}function Pi(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var a=r-1;return void 0!==n&&(a=rs(n),a=n<0?on(r+a,0):sn(a,r-1)),_e(t,Za(e,3),a,!0)}function Ii(t){return(null==t?0:t.length)?ir(t,1):[]}function Oi(t){return t&&t.length?t[0]:void 0}var ji=Fr((function(t){var e=pe(t,ia);return e.length&&e[0]===t[0]?vr(e):[]})),Ri=Fr((function(t){var e=Fi(t),n=pe(t,ia);return e===Fi(n)?e=void 0:n.pop(),n.length&&n[0]===t[0]?vr(n,Za(e,2)):[]})),Li=Fr((function(t){var e=Fi(t),n=pe(t,ia);return(e="function"==typeof e?e:void 0)&&n.pop(),n.length&&n[0]===t[0]?vr(n,void 0,e):[]}));function Fi(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var Bi=Fr(Hi);function Hi(t,e){return t&&t.length&&e&&e.length?Or(t,e):t}var zi=Ua((function(t,e){var n=null==t?0:t.length,r=$n(t,e);return jr(t,pe(e,(function(t){return oi(t,n)?+t:t})).sort(da)),r}));function qi(t){return null==t?t:hn.call(t)}var Gi=Fr((function(t){return Jr(ir(t,1,Ro,!0))})),Ui=Fr((function(t){var e=Fi(t);return Ro(e)&&(e=void 0),Jr(ir(t,1,Ro,!0),Za(e,2))})),Vi=Fr((function(t){var e=Fi(t);return e="function"==typeof e?e:void 0,Jr(ir(t,1,Ro,!0),void 0,e)}));function Yi(t){if(!t||!t.length)return[];var e=0;return t=ce(t,(function(t){if(Ro(t))return e=on(t.length,e),!0})),Ce(e,(function(e){return pe(t,Se(e))}))}function Wi(t,e){if(!t||!t.length)return[];var n=Yi(t);return null==e?n:pe(n,(function(t){return ie(e,void 0,t)}))}var $i=Fr((function(t,e){return Ro(t)?Kn(t,e):[]})),Xi=Fr((function(t){return ra(ce(t,Ro))})),Zi=Fr((function(t){var e=Fi(t);return Ro(e)&&(e=void 0),ra(ce(t,Ro),Za(e,2))})),Qi=Fr((function(t){var e=Fi(t);return e="function"==typeof e?e:void 0,ra(ce(t,Ro),void 0,e)})),Ji=Fr(Yi);var Ki=Fr((function(t){var e=t.length,n=e>1?t[e-1]:void 0;return n="function"==typeof n?(t.pop(),n):void 0,Wi(t,n)}));function to(t){var e=Dn(t);return e.__chain__=!0,e}function eo(t,e){return e(t)}var no=Ua((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,a=function(e){return $n(e,t)};return!(e>1||this.__actions__.length)&&r instanceof Pn&&oi(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:eo,args:[a],thisArg:void 0}),new An(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(a)}));var ro=ba((function(t,e,n){Mt.call(t,n)?++t[n]:Wn(t,n,1)}));var ao=ka(Ai),io=ka(Pi);function oo(t,e){return(Io(t)?se:tr)(t,Za(e,3))}function so(t,e){return(Io(t)?le:er)(t,Za(e,3))}var lo=ba((function(t,e,n){Mt.call(t,n)?t[n].push(e):Wn(t,n,[e])}));var uo=Fr((function(t,e,n){var a=-1,i="function"==typeof e,o=jo(t)?r(t.length):[];return tr(t,(function(t){o[++a]=i?ie(e,t,n):gr(t,e,n)})),o})),co=ba((function(t,e,n){Wn(t,n,e)}));function ho(t,e){return(Io(t)?pe:Tr)(t,Za(e,3))}var fo=ba((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var po=Fr((function(t,e){if(null==t)return[];var n=e.length;return n>1&&si(t,e[0],e[1])?e=[]:n>2&&si(e[0],e[1],e[2])&&(e=[e[0]]),Pr(t,ir(e,1),[])})),mo=Ze||function(){return Wt.Date.now()};function yo(t,e,n){return e=n?void 0:e,Ba(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function vo(t,e){var n;if("function"!=typeof e)throw new gt(i);return t=rs(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=void 0),n}}var go=Fr((function(t,e,n){var r=1;if(n.length){var a=qe(n,Xa(go));r|=32}return Ba(t,r,e,n,a)})),bo=Fr((function(t,e,n){var r=3;if(n.length){var a=qe(n,Xa(bo));r|=32}return Ba(e,r,t,n,a)}));function _o(t,e,n){var r,a,o,s,l,u,c=0,h=!1,f=!1,p=!0;if("function"!=typeof t)throw new gt(i);function d(e){var n=r,i=a;return r=a=void 0,c=e,s=t.apply(i,n)}function m(t){return c=t,l=bi(v,e),h?d(t):s}function y(t){var n=t-u;return void 0===u||n>=e||n<0||f&&t-c>=o}function v(){var t=mo();if(y(t))return g(t);l=bi(v,function(t){var n=e-(t-u);return f?sn(n,o-(t-c)):n}(t))}function g(t){return l=void 0,p&&r?d(t):(r=a=void 0,s)}function b(){var t=mo(),n=y(t);if(r=arguments,a=this,u=t,n){if(void 0===l)return m(u);if(f)return ca(l),l=bi(v,e),d(u)}return void 0===l&&(l=bi(v,e)),s}return e=is(e)||0,Go(n)&&(h=!!n.leading,o=(f="maxWait"in n)?on(is(n.maxWait)||0,e):o,p="trailing"in n?!!n.trailing:p),b.cancel=function(){void 0!==l&&ca(l),c=0,r=u=a=l=void 0},b.flush=function(){return void 0===l?s:g(mo())},b}var xo=Fr((function(t,e){return Jn(t,1,e)})),wo=Fr((function(t,e,n){return Jn(t,is(e)||0,n)}));function Eo(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new gt(i);var n=function(){var r=arguments,a=e?e.apply(this,r):r[0],i=n.cache;if(i.has(a))return i.get(a);var o=t.apply(this,r);return n.cache=i.set(a,o)||i,o};return n.cache=new(Eo.Cache||jn),n}function Mo(t){if("function"!=typeof t)throw new gt(i);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Eo.Cache=jn;var So=la((function(t,e){var n=(e=1==e.length&&Io(e[0])?pe(e[0],Ne(Za())):pe(ir(e,1),Ne(Za()))).length;return Fr((function(r){for(var a=-1,i=sn(r.length,n);++a<i;)r[a]=e[a].call(this,r[a]);return ie(t,this,r)}))})),ko=Fr((function(t,e){return Ba(t,32,void 0,e,qe(e,Xa(ko)))})),To=Fr((function(t,e){return Ba(t,64,void 0,e,qe(e,Xa(To)))})),Do=Ua((function(t,e){return Ba(t,256,void 0,void 0,void 0,e)}));function Co(t,e){return t===e||t!=t&&e!=e}var No=Oa(dr),Ao=Oa((function(t,e){return t>=e})),Po=br(function(){return arguments}())?br:function(t){return Uo(t)&&Mt.call(t,"callee")&&!$t.call(t,"callee")},Io=r.isArray,Oo=Kt?Ne(Kt):function(t){return Uo(t)&&pr(t)==E};function jo(t){return null!=t&&qo(t.length)&&!Ho(t)}function Ro(t){return Uo(t)&&jo(t)}var Lo=en||il,Fo=te?Ne(te):function(t){return Uo(t)&&pr(t)==h};function Bo(t){if(!Uo(t))return!1;var e=pr(t);return e==f||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!Wo(t)}function Ho(t){if(!Go(t))return!1;var e=pr(t);return e==p||e==d||"[object AsyncFunction]"==e||"[object Proxy]"==e}function zo(t){return"number"==typeof t&&t==rs(t)}function qo(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Go(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Uo(t){return null!=t&&"object"==typeof t}var Vo=ee?Ne(ee):function(t){return Uo(t)&&ni(t)==m};function Yo(t){return"number"==typeof t||Uo(t)&&pr(t)==y}function Wo(t){if(!Uo(t)||pr(t)!=v)return!1;var e=Vt(t);if(null===e)return!0;var n=Mt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Et.call(n)==Dt}var $o=ne?Ne(ne):function(t){return Uo(t)&&pr(t)==g};var Xo=re?Ne(re):function(t){return Uo(t)&&ni(t)==b};function Zo(t){return"string"==typeof t||!Io(t)&&Uo(t)&&pr(t)==_}function Qo(t){return"symbol"==typeof t||Uo(t)&&pr(t)==x}var Jo=ae?Ne(ae):function(t){return Uo(t)&&qo(t.length)&&!!Ht[pr(t)]};var Ko=Oa(kr),ts=Oa((function(t,e){return t<=e}));function es(t){if(!t)return[];if(jo(t))return Zo(t)?Ye(t):va(t);if(Jt&&t[Jt])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Jt]());var e=ni(t);return(e==m?He:e==b?Ge:Cs)(t)}function ns(t){return t?(t=is(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function rs(t){var e=ns(t),n=e%1;return e==e?n?e-n:e:0}function as(t){return t?Xn(rs(t),0,4294967295):0}function is(t){if("number"==typeof t)return t;if(Qo(t))return NaN;if(Go(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Go(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace($,"");var n=it.test(t);return n||st.test(t)?Ut(t.slice(2),n?2:8):at.test(t)?NaN:+t}function os(t){return ga(t,xs(t))}function ss(t){return null==t?"":Qr(t)}var ls=_a((function(t,e){if(hi(e)||jo(e))ga(e,_s(e),t);else for(var n in e)Mt.call(e,n)&&Gn(t,n,e[n])})),us=_a((function(t,e){ga(e,xs(e),t)})),cs=_a((function(t,e,n,r){ga(e,xs(e),t,r)})),hs=_a((function(t,e,n,r){ga(e,_s(e),t,r)})),fs=Ua($n);var ps=Fr((function(t,e){t=mt(t);var n=-1,r=e.length,a=r>2?e[2]:void 0;for(a&&si(e[0],e[1],a)&&(r=1);++n<r;)for(var i=e[n],o=xs(i),s=-1,l=o.length;++s<l;){var u=o[s],c=t[u];(void 0===c||Co(c,xt[u])&&!Mt.call(t,u))&&(t[u]=i[u])}return t})),ds=Fr((function(t){return t.push(void 0,za),ie(Es,void 0,t)}));function ms(t,e,n){var r=null==t?void 0:hr(t,e);return void 0===r?n:r}function ys(t,e){return null!=t&&ri(t,e,yr)}var vs=Ca((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Tt.call(e)),t[e]=n}),Gs(Ys)),gs=Ca((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Tt.call(e)),Mt.call(t,e)?t[e].push(n):t[e]=[n]}),Za),bs=Fr(gr);function _s(t){return jo(t)?Fn(t):Mr(t)}function xs(t){return jo(t)?Fn(t,!0):Sr(t)}var ws=_a((function(t,e,n){Nr(t,e,n)})),Es=_a((function(t,e,n,r){Nr(t,e,n,r)})),Ms=Ua((function(t,e){var n={};if(null==t)return n;var r=!1;e=pe(e,(function(e){return e=sa(e,t),r||(r=e.length>1),e})),ga(t,Ya(t),n),r&&(n=Zn(n,7,qa));for(var a=e.length;a--;)Kr(n,e[a]);return n}));var Ss=Ua((function(t,e){return null==t?{}:function(t,e){return Ir(t,e,(function(e,n){return ys(t,n)}))}(t,e)}));function ks(t,e){if(null==t)return{};var n=pe(Ya(t),(function(t){return[t]}));return e=Za(e),Ir(t,n,(function(t,n){return e(t,n[0])}))}var Ts=Fa(_s),Ds=Fa(xs);function Cs(t){return null==t?[]:Ae(t,_s(t))}var Ns=Ma((function(t,e,n){return e=e.toLowerCase(),t+(n?As(e):e)}));function As(t){return Bs(ss(t).toLowerCase())}function Ps(t){return(t=ss(t))&&t.replace(ut,Re).replace(It,"")}var Is=Ma((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),Os=Ma((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),js=Ea("toLowerCase");var Rs=Ma((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var Ls=Ma((function(t,e,n){return t+(n?" ":"")+Bs(e)}));var Fs=Ma((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Bs=Ea("toUpperCase");function Hs(t,e,n){return t=ss(t),void 0===(e=n?void 0:e)?function(t){return Lt.test(t)}(t)?function(t){return t.match(jt)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var zs=Fr((function(t,e){try{return ie(t,void 0,e)}catch(t){return Bo(t)?t:new ft(t)}})),qs=Ua((function(t,e){return se(e,(function(e){e=Si(e),Wn(t,e,go(t[e],t))})),t}));function Gs(t){return function(){return t}}var Us=Ta(),Vs=Ta(!0);function Ys(t){return t}function Ws(t){return Er("function"==typeof t?t:Zn(t,1))}var $s=Fr((function(t,e){return function(n){return gr(n,t,e)}})),Xs=Fr((function(t,e){return function(n){return gr(t,n,e)}}));function Zs(t,e,n){var r=_s(e),a=cr(e,r);null!=n||Go(e)&&(a.length||!r.length)||(n=e,e=t,t=this,a=cr(e,_s(e)));var i=!(Go(n)&&"chain"in n&&!n.chain),o=Ho(t);return se(a,(function(n){var r=e[n];t[n]=r,o&&(t.prototype[n]=function(){var e=this.__chain__;if(i||e){var n=t(this.__wrapped__),a=n.__actions__=va(this.__actions__);return a.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,de([this.value()],arguments))})})),t}function Qs(){}var Js=Aa(pe),Ks=Aa(ue),tl=Aa(ve);function el(t){return li(t)?Se(Si(t)):function(t){return function(e){return hr(e,t)}}(t)}var nl=Ia(),rl=Ia(!0);function al(){return[]}function il(){return!1}var ol=Na((function(t,e){return t+e}),0),sl=Ra("ceil"),ll=Na((function(t,e){return t/e}),1),ul=Ra("floor");var cl,hl=Na((function(t,e){return t*e}),1),fl=Ra("round"),pl=Na((function(t,e){return t-e}),0);return Dn.after=function(t,e){if("function"!=typeof e)throw new gt(i);return t=rs(t),function(){if(--t<1)return e.apply(this,arguments)}},Dn.ary=yo,Dn.assign=ls,Dn.assignIn=us,Dn.assignInWith=cs,Dn.assignWith=hs,Dn.at=fs,Dn.before=vo,Dn.bind=go,Dn.bindAll=qs,Dn.bindKey=bo,Dn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return Io(t)?t:[t]},Dn.chain=to,Dn.chunk=function(t,e,n){e=(n?si(t,e,n):void 0===e)?1:on(rs(e),0);var a=null==t?0:t.length;if(!a||e<1)return[];for(var i=0,o=0,s=r(Je(a/e));i<a;)s[o++]=Vr(t,i,i+=e);return s},Dn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,a=[];++e<n;){var i=t[e];i&&(a[r++]=i)}return a},Dn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],a=t;a--;)e[a-1]=arguments[a];return de(Io(n)?va(n):[n],ir(e,1))},Dn.cond=function(t){var e=null==t?0:t.length,n=Za();return t=e?pe(t,(function(t){if("function"!=typeof t[1])throw new gt(i);return[n(t[0]),t[1]]})):[],Fr((function(n){for(var r=-1;++r<e;){var a=t[r];if(ie(a[0],this,n))return ie(a[1],this,n)}}))},Dn.conforms=function(t){return function(t){var e=_s(t);return function(n){return Qn(n,t,e)}}(Zn(t,1))},Dn.constant=Gs,Dn.countBy=ro,Dn.create=function(t,e){var n=Cn(t);return null==e?n:Yn(n,e)},Dn.curry=function t(e,n,r){var a=Ba(e,8,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return a.placeholder=t.placeholder,a},Dn.curryRight=function t(e,n,r){var a=Ba(e,16,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return a.placeholder=t.placeholder,a},Dn.debounce=_o,Dn.defaults=ps,Dn.defaultsDeep=ds,Dn.defer=xo,Dn.delay=wo,Dn.difference=Di,Dn.differenceBy=Ci,Dn.differenceWith=Ni,Dn.drop=function(t,e,n){var r=null==t?0:t.length;return r?Vr(t,(e=n||void 0===e?1:rs(e))<0?0:e,r):[]},Dn.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?Vr(t,0,(e=r-(e=n||void 0===e?1:rs(e)))<0?0:e):[]},Dn.dropRightWhile=function(t,e){return t&&t.length?ea(t,Za(e,3),!0,!0):[]},Dn.dropWhile=function(t,e){return t&&t.length?ea(t,Za(e,3),!0):[]},Dn.fill=function(t,e,n,r){var a=null==t?0:t.length;return a?(n&&"number"!=typeof n&&si(t,e,n)&&(n=0,r=a),function(t,e,n,r){var a=t.length;for((n=rs(n))<0&&(n=-n>a?0:a+n),(r=void 0===r||r>a?a:rs(r))<0&&(r+=a),r=n>r?0:as(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Dn.filter=function(t,e){return(Io(t)?ce:ar)(t,Za(e,3))},Dn.flatMap=function(t,e){return ir(ho(t,e),1)},Dn.flatMapDeep=function(t,e){return ir(ho(t,e),1/0)},Dn.flatMapDepth=function(t,e,n){return n=void 0===n?1:rs(n),ir(ho(t,e),n)},Dn.flatten=Ii,Dn.flattenDeep=function(t){return(null==t?0:t.length)?ir(t,1/0):[]},Dn.flattenDepth=function(t,e){return(null==t?0:t.length)?ir(t,e=void 0===e?1:rs(e)):[]},Dn.flip=function(t){return Ba(t,512)},Dn.flow=Us,Dn.flowRight=Vs,Dn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var a=t[e];r[a[0]]=a[1]}return r},Dn.functions=function(t){return null==t?[]:cr(t,_s(t))},Dn.functionsIn=function(t){return null==t?[]:cr(t,xs(t))},Dn.groupBy=lo,Dn.initial=function(t){return(null==t?0:t.length)?Vr(t,0,-1):[]},Dn.intersection=ji,Dn.intersectionBy=Ri,Dn.intersectionWith=Li,Dn.invert=vs,Dn.invertBy=gs,Dn.invokeMap=uo,Dn.iteratee=Ws,Dn.keyBy=co,Dn.keys=_s,Dn.keysIn=xs,Dn.map=ho,Dn.mapKeys=function(t,e){var n={};return e=Za(e,3),lr(t,(function(t,r,a){Wn(n,e(t,r,a),t)})),n},Dn.mapValues=function(t,e){var n={};return e=Za(e,3),lr(t,(function(t,r,a){Wn(n,r,e(t,r,a))})),n},Dn.matches=function(t){return Dr(Zn(t,1))},Dn.matchesProperty=function(t,e){return Cr(t,Zn(e,1))},Dn.memoize=Eo,Dn.merge=ws,Dn.mergeWith=Es,Dn.method=$s,Dn.methodOf=Xs,Dn.mixin=Zs,Dn.negate=Mo,Dn.nthArg=function(t){return t=rs(t),Fr((function(e){return Ar(e,t)}))},Dn.omit=Ms,Dn.omitBy=function(t,e){return ks(t,Mo(Za(e)))},Dn.once=function(t){return vo(2,t)},Dn.orderBy=function(t,e,n,r){return null==t?[]:(Io(e)||(e=null==e?[]:[e]),Io(n=r?void 0:n)||(n=null==n?[]:[n]),Pr(t,e,n))},Dn.over=Js,Dn.overArgs=So,Dn.overEvery=Ks,Dn.overSome=tl,Dn.partial=ko,Dn.partialRight=To,Dn.partition=fo,Dn.pick=Ss,Dn.pickBy=ks,Dn.property=el,Dn.propertyOf=function(t){return function(e){return null==t?void 0:hr(t,e)}},Dn.pull=Bi,Dn.pullAll=Hi,Dn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Or(t,e,Za(n,2)):t},Dn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Or(t,e,void 0,n):t},Dn.pullAt=zi,Dn.range=nl,Dn.rangeRight=rl,Dn.rearg=Do,Dn.reject=function(t,e){return(Io(t)?ce:ar)(t,Mo(Za(e,3)))},Dn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,a=[],i=t.length;for(e=Za(e,3);++r<i;){var o=t[r];e(o,r,t)&&(n.push(o),a.push(r))}return jr(t,a),n},Dn.rest=function(t,e){if("function"!=typeof t)throw new gt(i);return Fr(t,e=void 0===e?e:rs(e))},Dn.reverse=qi,Dn.sampleSize=function(t,e,n){return e=(n?si(t,e,n):void 0===e)?1:rs(e),(Io(t)?Hn:Hr)(t,e)},Dn.set=function(t,e,n){return null==t?t:zr(t,e,n)},Dn.setWith=function(t,e,n,r){return r="function"==typeof r?r:void 0,null==t?t:zr(t,e,n,r)},Dn.shuffle=function(t){return(Io(t)?zn:Ur)(t)},Dn.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&si(t,e,n)?(e=0,n=r):(e=null==e?0:rs(e),n=void 0===n?r:rs(n)),Vr(t,e,n)):[]},Dn.sortBy=po,Dn.sortedUniq=function(t){return t&&t.length?Xr(t):[]},Dn.sortedUniqBy=function(t,e){return t&&t.length?Xr(t,Za(e,2)):[]},Dn.split=function(t,e,n){return n&&"number"!=typeof n&&si(t,e,n)&&(e=n=void 0),(n=void 0===n?4294967295:n>>>0)?(t=ss(t))&&("string"==typeof e||null!=e&&!$o(e))&&!(e=Qr(e))&&Be(t)?ua(Ye(t),0,n):t.split(e,n):[]},Dn.spread=function(t,e){if("function"!=typeof t)throw new gt(i);return e=null==e?0:on(rs(e),0),Fr((function(n){var r=n[e],a=ua(n,0,e);return r&&de(a,r),ie(t,this,a)}))},Dn.tail=function(t){var e=null==t?0:t.length;return e?Vr(t,1,e):[]},Dn.take=function(t,e,n){return t&&t.length?Vr(t,0,(e=n||void 0===e?1:rs(e))<0?0:e):[]},Dn.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?Vr(t,(e=r-(e=n||void 0===e?1:rs(e)))<0?0:e,r):[]},Dn.takeRightWhile=function(t,e){return t&&t.length?ea(t,Za(e,3),!1,!0):[]},Dn.takeWhile=function(t,e){return t&&t.length?ea(t,Za(e,3)):[]},Dn.tap=function(t,e){return e(t),t},Dn.throttle=function(t,e,n){var r=!0,a=!0;if("function"!=typeof t)throw new gt(i);return Go(n)&&(r="leading"in n?!!n.leading:r,a="trailing"in n?!!n.trailing:a),_o(t,e,{leading:r,maxWait:e,trailing:a})},Dn.thru=eo,Dn.toArray=es,Dn.toPairs=Ts,Dn.toPairsIn=Ds,Dn.toPath=function(t){return Io(t)?pe(t,Si):Qo(t)?[t]:va(Mi(ss(t)))},Dn.toPlainObject=os,Dn.transform=function(t,e,n){var r=Io(t),a=r||Lo(t)||Jo(t);if(e=Za(e,4),null==n){var i=t&&t.constructor;n=a?r?new i:[]:Go(t)&&Ho(i)?Cn(Vt(t)):{}}return(a?se:lr)(t,(function(t,r,a){return e(n,t,r,a)})),n},Dn.unary=function(t){return yo(t,1)},Dn.union=Gi,Dn.unionBy=Ui,Dn.unionWith=Vi,Dn.uniq=function(t){return t&&t.length?Jr(t):[]},Dn.uniqBy=function(t,e){return t&&t.length?Jr(t,Za(e,2)):[]},Dn.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?Jr(t,void 0,e):[]},Dn.unset=function(t,e){return null==t||Kr(t,e)},Dn.unzip=Yi,Dn.unzipWith=Wi,Dn.update=function(t,e,n){return null==t?t:ta(t,e,oa(n))},Dn.updateWith=function(t,e,n,r){return r="function"==typeof r?r:void 0,null==t?t:ta(t,e,oa(n),r)},Dn.values=Cs,Dn.valuesIn=function(t){return null==t?[]:Ae(t,xs(t))},Dn.without=$i,Dn.words=Hs,Dn.wrap=function(t,e){return ko(oa(e),t)},Dn.xor=Xi,Dn.xorBy=Zi,Dn.xorWith=Qi,Dn.zip=Ji,Dn.zipObject=function(t,e){return aa(t||[],e||[],Gn)},Dn.zipObjectDeep=function(t,e){return aa(t||[],e||[],zr)},Dn.zipWith=Ki,Dn.entries=Ts,Dn.entriesIn=Ds,Dn.extend=us,Dn.extendWith=cs,Zs(Dn,Dn),Dn.add=ol,Dn.attempt=zs,Dn.camelCase=Ns,Dn.capitalize=As,Dn.ceil=sl,Dn.clamp=function(t,e,n){return void 0===n&&(n=e,e=void 0),void 0!==n&&(n=(n=is(n))==n?n:0),void 0!==e&&(e=(e=is(e))==e?e:0),Xn(is(t),e,n)},Dn.clone=function(t){return Zn(t,4)},Dn.cloneDeep=function(t){return Zn(t,5)},Dn.cloneDeepWith=function(t,e){return Zn(t,5,e="function"==typeof e?e:void 0)},Dn.cloneWith=function(t,e){return Zn(t,4,e="function"==typeof e?e:void 0)},Dn.conformsTo=function(t,e){return null==e||Qn(t,e,_s(e))},Dn.deburr=Ps,Dn.defaultTo=function(t,e){return null==t||t!=t?e:t},Dn.divide=ll,Dn.endsWith=function(t,e,n){t=ss(t),e=Qr(e);var r=t.length,a=n=void 0===n?r:Xn(rs(n),0,r);return(n-=e.length)>=0&&t.slice(n,a)==e},Dn.eq=Co,Dn.escape=function(t){return(t=ss(t))&&B.test(t)?t.replace(L,Le):t},Dn.escapeRegExp=function(t){return(t=ss(t))&&W.test(t)?t.replace(Y,"\\$&"):t},Dn.every=function(t,e,n){var r=Io(t)?ue:nr;return n&&si(t,e,n)&&(e=void 0),r(t,Za(e,3))},Dn.find=ao,Dn.findIndex=Ai,Dn.findKey=function(t,e){return be(t,Za(e,3),lr)},Dn.findLast=io,Dn.findLastIndex=Pi,Dn.findLastKey=function(t,e){return be(t,Za(e,3),ur)},Dn.floor=ul,Dn.forEach=oo,Dn.forEachRight=so,Dn.forIn=function(t,e){return null==t?t:or(t,Za(e,3),xs)},Dn.forInRight=function(t,e){return null==t?t:sr(t,Za(e,3),xs)},Dn.forOwn=function(t,e){return t&&lr(t,Za(e,3))},Dn.forOwnRight=function(t,e){return t&&ur(t,Za(e,3))},Dn.get=ms,Dn.gt=No,Dn.gte=Ao,Dn.has=function(t,e){return null!=t&&ri(t,e,mr)},Dn.hasIn=ys,Dn.head=Oi,Dn.identity=Ys,Dn.includes=function(t,e,n,r){t=jo(t)?t:Cs(t),n=n&&!r?rs(n):0;var a=t.length;return n<0&&(n=on(a+n,0)),Zo(t)?n<=a&&t.indexOf(e,n)>-1:!!a&&xe(t,e,n)>-1},Dn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var a=null==n?0:rs(n);return a<0&&(a=on(r+a,0)),xe(t,e,a)},Dn.inRange=function(t,e,n){return e=ns(e),void 0===n?(n=e,e=0):n=ns(n),function(t,e,n){return t>=sn(e,n)&&t<on(e,n)}(t=is(t),e,n)},Dn.invoke=bs,Dn.isArguments=Po,Dn.isArray=Io,Dn.isArrayBuffer=Oo,Dn.isArrayLike=jo,Dn.isArrayLikeObject=Ro,Dn.isBoolean=function(t){return!0===t||!1===t||Uo(t)&&pr(t)==c},Dn.isBuffer=Lo,Dn.isDate=Fo,Dn.isElement=function(t){return Uo(t)&&1===t.nodeType&&!Wo(t)},Dn.isEmpty=function(t){if(null==t)return!0;if(jo(t)&&(Io(t)||"string"==typeof t||"function"==typeof t.splice||Lo(t)||Jo(t)||Po(t)))return!t.length;var e=ni(t);if(e==m||e==b)return!t.size;if(hi(t))return!Mr(t).length;for(var n in t)if(Mt.call(t,n))return!1;return!0},Dn.isEqual=function(t,e){return _r(t,e)},Dn.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:void 0)?n(t,e):void 0;return void 0===r?_r(t,e,void 0,n):!!r},Dn.isError=Bo,Dn.isFinite=function(t){return"number"==typeof t&&nn(t)},Dn.isFunction=Ho,Dn.isInteger=zo,Dn.isLength=qo,Dn.isMap=Vo,Dn.isMatch=function(t,e){return t===e||xr(t,e,Ja(e))},Dn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:void 0,xr(t,e,Ja(e),n)},Dn.isNaN=function(t){return Yo(t)&&t!=+t},Dn.isNative=function(t){if(ci(t))throw new ft("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return wr(t)},Dn.isNil=function(t){return null==t},Dn.isNull=function(t){return null===t},Dn.isNumber=Yo,Dn.isObject=Go,Dn.isObjectLike=Uo,Dn.isPlainObject=Wo,Dn.isRegExp=$o,Dn.isSafeInteger=function(t){return zo(t)&&t>=-9007199254740991&&t<=9007199254740991},Dn.isSet=Xo,Dn.isString=Zo,Dn.isSymbol=Qo,Dn.isTypedArray=Jo,Dn.isUndefined=function(t){return void 0===t},Dn.isWeakMap=function(t){return Uo(t)&&ni(t)==w},Dn.isWeakSet=function(t){return Uo(t)&&"[object WeakSet]"==pr(t)},Dn.join=function(t,e){return null==t?"":rn.call(t,e)},Dn.kebabCase=Is,Dn.last=Fi,Dn.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var a=r;return void 0!==n&&(a=(a=rs(n))<0?on(r+a,0):sn(a,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,a):_e(t,Ee,a,!0)},Dn.lowerCase=Os,Dn.lowerFirst=js,Dn.lt=Ko,Dn.lte=ts,Dn.max=function(t){return t&&t.length?rr(t,Ys,dr):void 0},Dn.maxBy=function(t,e){return t&&t.length?rr(t,Za(e,2),dr):void 0},Dn.mean=function(t){return Me(t,Ys)},Dn.meanBy=function(t,e){return Me(t,Za(e,2))},Dn.min=function(t){return t&&t.length?rr(t,Ys,kr):void 0},Dn.minBy=function(t,e){return t&&t.length?rr(t,Za(e,2),kr):void 0},Dn.stubArray=al,Dn.stubFalse=il,Dn.stubObject=function(){return{}},Dn.stubString=function(){return""},Dn.stubTrue=function(){return!0},Dn.multiply=hl,Dn.nth=function(t,e){return t&&t.length?Ar(t,rs(e)):void 0},Dn.noConflict=function(){return Wt._===this&&(Wt._=Ct),this},Dn.noop=Qs,Dn.now=mo,Dn.pad=function(t,e,n){t=ss(t);var r=(e=rs(e))?Ve(t):0;if(!e||r>=e)return t;var a=(e-r)/2;return Pa(Ke(a),n)+t+Pa(Je(a),n)},Dn.padEnd=function(t,e,n){t=ss(t);var r=(e=rs(e))?Ve(t):0;return e&&r<e?t+Pa(e-r,n):t},Dn.padStart=function(t,e,n){t=ss(t);var r=(e=rs(e))?Ve(t):0;return e&&r<e?Pa(e-r,n)+t:t},Dn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),un(ss(t).replace(X,""),e||0)},Dn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&si(t,e,n)&&(e=n=void 0),void 0===n&&("boolean"==typeof e?(n=e,e=void 0):"boolean"==typeof t&&(n=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=ns(t),void 0===e?(e=t,t=0):e=ns(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var a=cn();return sn(t+a*(e-t+Gt("1e-"+((a+"").length-1))),e)}return Rr(t,e)},Dn.reduce=function(t,e,n){var r=Io(t)?me:Te,a=arguments.length<3;return r(t,Za(e,4),n,a,tr)},Dn.reduceRight=function(t,e,n){var r=Io(t)?ye:Te,a=arguments.length<3;return r(t,Za(e,4),n,a,er)},Dn.repeat=function(t,e,n){return e=(n?si(t,e,n):void 0===e)?1:rs(e),Lr(ss(t),e)},Dn.replace=function(){var t=arguments,e=ss(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Dn.result=function(t,e,n){var r=-1,a=(e=sa(e,t)).length;for(a||(a=1,t=void 0);++r<a;){var i=null==t?void 0:t[Si(e[r])];void 0===i&&(r=a,i=n),t=Ho(i)?i.call(t):i}return t},Dn.round=fl,Dn.runInContext=t,Dn.sample=function(t){return(Io(t)?Bn:Br)(t)},Dn.size=function(t){if(null==t)return 0;if(jo(t))return Zo(t)?Ve(t):t.length;var e=ni(t);return e==m||e==b?t.size:Mr(t).length},Dn.snakeCase=Rs,Dn.some=function(t,e,n){var r=Io(t)?ve:Yr;return n&&si(t,e,n)&&(e=void 0),r(t,Za(e,3))},Dn.sortedIndex=function(t,e){return Wr(t,e)},Dn.sortedIndexBy=function(t,e,n){return $r(t,e,Za(n,2))},Dn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Wr(t,e);if(r<n&&Co(t[r],e))return r}return-1},Dn.sortedLastIndex=function(t,e){return Wr(t,e,!0)},Dn.sortedLastIndexBy=function(t,e,n){return $r(t,e,Za(n,2),!0)},Dn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=Wr(t,e,!0)-1;if(Co(t[n],e))return n}return-1},Dn.startCase=Ls,Dn.startsWith=function(t,e,n){return t=ss(t),n=null==n?0:Xn(rs(n),0,t.length),e=Qr(e),t.slice(n,n+e.length)==e},Dn.subtract=pl,Dn.sum=function(t){return t&&t.length?De(t,Ys):0},Dn.sumBy=function(t,e){return t&&t.length?De(t,Za(e,2)):0},Dn.template=function(t,e,n){var r=Dn.templateSettings;n&&si(t,e,n)&&(e=void 0),t=ss(t),e=cs({},e,r,Ha);var a,i,o=cs({},e.imports,r.imports,Ha),s=_s(o),l=Ae(o,s),u=0,c=e.interpolate||ct,h="__p += '",f=yt((e.escape||ct).source+"|"+c.source+"|"+(c===q?nt:ct).source+"|"+(e.evaluate||ct).source+"|$","g"),p="//# sourceURL="+(Mt.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Bt+"]")+"\n";t.replace(f,(function(e,n,r,o,s,l){return r||(r=o),h+=t.slice(u,l).replace(ht,Fe),n&&(a=!0,h+="' +\n__e("+n+") +\n'"),s&&(i=!0,h+="';\n"+s+";\n__p += '"),r&&(h+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),u=l+e.length,e})),h+="';\n";var d=Mt.call(e,"variable")&&e.variable;d||(h="with (obj) {\n"+h+"\n}\n"),h=(i?h.replace(I,""):h).replace(O,"$1").replace(j,"$1;"),h="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(a?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+h+"return __p\n}";var m=zs((function(){return pt(s,p+"return "+h).apply(void 0,l)}));if(m.source=h,Bo(m))throw m;return m},Dn.times=function(t,e){if((t=rs(t))<1||t>9007199254740991)return[];var n=4294967295,r=sn(t,4294967295);t-=4294967295;for(var a=Ce(r,e=Za(e));++n<t;)e(n);return a},Dn.toFinite=ns,Dn.toInteger=rs,Dn.toLength=as,Dn.toLower=function(t){return ss(t).toLowerCase()},Dn.toNumber=is,Dn.toSafeInteger=function(t){return t?Xn(rs(t),-9007199254740991,9007199254740991):0===t?t:0},Dn.toString=ss,Dn.toUpper=function(t){return ss(t).toUpperCase()},Dn.trim=function(t,e,n){if((t=ss(t))&&(n||void 0===e))return t.replace($,"");if(!t||!(e=Qr(e)))return t;var r=Ye(t),a=Ye(e);return ua(r,Ie(r,a),Oe(r,a)+1).join("")},Dn.trimEnd=function(t,e,n){if((t=ss(t))&&(n||void 0===e))return t.replace(Z,"");if(!t||!(e=Qr(e)))return t;var r=Ye(t);return ua(r,0,Oe(r,Ye(e))+1).join("")},Dn.trimStart=function(t,e,n){if((t=ss(t))&&(n||void 0===e))return t.replace(X,"");if(!t||!(e=Qr(e)))return t;var r=Ye(t);return ua(r,Ie(r,Ye(e))).join("")},Dn.truncate=function(t,e){var n=30,r="...";if(Go(e)){var a="separator"in e?e.separator:a;n="length"in e?rs(e.length):n,r="omission"in e?Qr(e.omission):r}var i=(t=ss(t)).length;if(Be(t)){var o=Ye(t);i=o.length}if(n>=i)return t;var s=n-Ve(r);if(s<1)return r;var l=o?ua(o,0,s).join(""):t.slice(0,s);if(void 0===a)return l+r;if(o&&(s+=l.length-s),$o(a)){if(t.slice(s).search(a)){var u,c=l;for(a.global||(a=yt(a.source,ss(rt.exec(a))+"g")),a.lastIndex=0;u=a.exec(c);)var h=u.index;l=l.slice(0,void 0===h?s:h)}}else if(t.indexOf(Qr(a),s)!=s){var f=l.lastIndexOf(a);f>-1&&(l=l.slice(0,f))}return l+r},Dn.unescape=function(t){return(t=ss(t))&&F.test(t)?t.replace(R,We):t},Dn.uniqueId=function(t){var e=++St;return ss(t)+e},Dn.upperCase=Fs,Dn.upperFirst=Bs,Dn.each=oo,Dn.eachRight=so,Dn.first=Oi,Zs(Dn,(cl={},lr(Dn,(function(t,e){Mt.call(Dn.prototype,e)||(cl[e]=t)})),cl),{chain:!1}),Dn.VERSION="4.17.20",se(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Dn[t].placeholder=Dn})),se(["drop","take"],(function(t,e){Pn.prototype[t]=function(n){n=void 0===n?1:on(rs(n),0);var r=this.__filtered__&&!e?new Pn(this):this.clone();return r.__filtered__?r.__takeCount__=sn(n,r.__takeCount__):r.__views__.push({size:sn(n,4294967295),type:t+(r.__dir__<0?"Right":"")}),r},Pn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),se(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Pn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Za(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),se(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Pn.prototype[t]=function(){return this[n](1).value()[0]}})),se(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Pn.prototype[t]=function(){return this.__filtered__?new Pn(this):this[n](1)}})),Pn.prototype.compact=function(){return this.filter(Ys)},Pn.prototype.find=function(t){return this.filter(t).head()},Pn.prototype.findLast=function(t){return this.reverse().find(t)},Pn.prototype.invokeMap=Fr((function(t,e){return"function"==typeof t?new Pn(this):this.map((function(n){return gr(n,t,e)}))})),Pn.prototype.reject=function(t){return this.filter(Mo(Za(t)))},Pn.prototype.slice=function(t,e){t=rs(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Pn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),void 0!==e&&(n=(e=rs(e))<0?n.dropRight(-e):n.take(e-t)),n)},Pn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Pn.prototype.toArray=function(){return this.take(4294967295)},lr(Pn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),a=Dn[r?"take"+("last"==e?"Right":""):e],i=r||/^find/.test(e);a&&(Dn.prototype[e]=function(){var e=this.__wrapped__,o=r?[1]:arguments,s=e instanceof Pn,l=o[0],u=s||Io(e),c=function(t){var e=a.apply(Dn,de([t],o));return r&&h?e[0]:e};u&&n&&"function"==typeof l&&1!=l.length&&(s=u=!1);var h=this.__chain__,f=!!this.__actions__.length,p=i&&!h,d=s&&!f;if(!i&&u){e=d?e:new Pn(this);var m=t.apply(e,o);return m.__actions__.push({func:eo,args:[c],thisArg:void 0}),new An(m,h)}return p&&d?t.apply(this,o):(m=this.thru(c),p?r?m.value()[0]:m.value():m)})})),se(["pop","push","shift","sort","splice","unshift"],(function(t){var e=bt[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Dn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var a=this.value();return e.apply(Io(a)?a:[],t)}return this[n]((function(n){return e.apply(Io(n)?n:[],t)}))}})),lr(Pn.prototype,(function(t,e){var n=Dn[e];if(n){var r=n.name+"";Mt.call(bn,r)||(bn[r]=[]),bn[r].push({name:e,func:n})}})),bn[Da(void 0,2).name]=[{name:"wrapper",func:void 0}],Pn.prototype.clone=function(){var t=new Pn(this.__wrapped__);return t.__actions__=va(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=va(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=va(this.__views__),t},Pn.prototype.reverse=function(){if(this.__filtered__){var t=new Pn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Pn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=Io(t),r=e<0,a=n?t.length:0,i=function(t,e,n){var r=-1,a=n.length;for(;++r<a;){var i=n[r],o=i.size;switch(i.type){case"drop":t+=o;break;case"dropRight":e-=o;break;case"take":e=sn(e,t+o);break;case"takeRight":t=on(t,e-o)}}return{start:t,end:e}}(0,a,this.__views__),o=i.start,s=i.end,l=s-o,u=r?s:o-1,c=this.__iteratees__,h=c.length,f=0,p=sn(l,this.__takeCount__);if(!n||!r&&a==l&&p==l)return na(t,this.__actions__);var d=[];t:for(;l--&&f<p;){for(var m=-1,y=t[u+=e];++m<h;){var v=c[m],g=v.iteratee,b=v.type,_=g(y);if(2==b)y=_;else if(!_){if(1==b)continue t;break t}}d[f++]=y}return d},Dn.prototype.at=no,Dn.prototype.chain=function(){return to(this)},Dn.prototype.commit=function(){return new An(this.value(),this.__chain__)},Dn.prototype.next=function(){void 0===this.__values__&&(this.__values__=es(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Dn.prototype.plant=function(t){for(var e,n=this;n instanceof Nn;){var r=Ti(n);r.__index__=0,r.__values__=void 0,e?a.__wrapped__=r:e=r;var a=r;n=n.__wrapped__}return a.__wrapped__=t,e},Dn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Pn){var e=t;return this.__actions__.length&&(e=new Pn(this)),(e=e.reverse()).__actions__.push({func:eo,args:[qi],thisArg:void 0}),new An(e,this.__chain__)}return this.thru(qi)},Dn.prototype.toJSON=Dn.prototype.valueOf=Dn.prototype.value=function(){return na(this.__wrapped__,this.__actions__)},Dn.prototype.first=Dn.prototype.head,Jt&&(Dn.prototype[Jt]=function(){return this}),Dn}();Wt._=$e,void 0===(a=function(){return $e}.call(e,n,e,r))||(r.exports=a)}).call(this)}).call(this,n(19),n(20)(t))},function(t,e){t.exports=d3},function(t,e,n){!function(t){"use strict";function e(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function n(t){return 1===t.length&&(t=function(t){return function(n,r){return e(t(n),r)}}(t)),{left:function(e,n,r,a){for(null==r&&(r=0),null==a&&(a=e.length);r<a;){var i=r+a>>>1;t(e[i],n)<0?r=i+1:a=i}return r},right:function(e,n,r,a){for(null==r&&(r=0),null==a&&(a=e.length);r<a;){var i=r+a>>>1;t(e[i],n)>0?a=i:r=i+1}return r}}}function r(t,e){return[t,e]}function a(t){return null===t?NaN:+t}function i(t,e){var n,r,i=t.length,o=0,s=-1,l=0,u=0;if(null==e)for(;++s<i;)isNaN(n=a(t[s]))||(u+=(r=n-l)*(n-(l+=r/++o)));else for(;++s<i;)isNaN(n=a(e(t[s],s,t)))||(u+=(r=n-l)*(n-(l+=r/++o)));if(o>1)return u/(o-1)}function o(t,e){var n=i(t,e);return n?Math.sqrt(n):n}function s(t,e){var n,r,a,i=t.length,o=-1;if(null==e){for(;++o<i;)if(null!=(n=t[o])&&n>=n)for(r=a=n;++o<i;)null!=(n=t[o])&&(r>n&&(r=n),a<n&&(a=n))}else for(;++o<i;)if(null!=(n=e(t[o],o,t))&&n>=n)for(r=a=n;++o<i;)null!=(n=e(t[o],o,t))&&(r>n&&(r=n),a<n&&(a=n));return[r,a]}function l(t){return function(){return t}}function u(t){return t}function c(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i}function h(t,e,n){var r,a,i,o,s=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=f(t,e,n))||!isFinite(o))return[];if(o>0)for(t=Math.ceil(t/o),e=Math.floor(e/o),i=new Array(a=Math.ceil(e-t+1));++s<a;)i[s]=(t+s)*o;else for(t=Math.floor(t*o),e=Math.ceil(e*o),i=new Array(a=Math.ceil(t-e+1));++s<a;)i[s]=(t-s)/o;return r&&i.reverse(),i}function f(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=Ou?10:i>=ju?5:i>=Ru?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=Ou?10:i>=ju?5:i>=Ru?2:1)}function p(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=Ou?a*=10:i>=ju?a*=5:i>=Ru&&(a*=2),e<t?-a:a}function d(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1}function m(t,e,n){if(null==n&&(n=a),r=t.length){if((e=+e)<=0||r<2)return+n(t[0],0,t);if(e>=1)return+n(t[r-1],r-1,t);var r,i=(r-1)*e,o=Math.floor(i),s=+n(t[o],o,t);return s+(+n(t[o+1],o+1,t)-s)*(i-o)}}function y(t){for(var e,n,r,a=t.length,i=-1,o=0;++i<a;)o+=t[i].length;for(n=new Array(o);--a>=0;)for(e=(r=t[a]).length;--e>=0;)n[--o]=r[e];return n}function v(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&r>n&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&r>n&&(r=n);return r}function g(t){if(!(a=t.length))return[];for(var e=-1,n=v(t,b),r=new Array(n);++e<n;)for(var a,i=-1,o=r[e]=new Array(a);++i<a;)o[i]=t[i][e];return r}function b(t){return t.length}function _(t){return t}function x(t){return"translate("+(t+.5)+",0)"}function w(t){return"translate(0,"+(t+.5)+")"}function E(){return!this.__axis}function M(t,e){function n(n){var f=null==a?e.ticks?e.ticks.apply(e,r):e.domain():a,p=null==i?e.tickFormat?e.tickFormat.apply(e,r):_:i,d=Math.max(o,0)+l,m=e.range(),y=+m[0]+.5,v=+m[m.length-1]+.5,g=(e.bandwidth?function(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}:function(t){return function(e){return+t(e)}})(e.copy()),b=n.selection?n.selection():n,x=b.selectAll(".domain").data([null]),w=b.selectAll(".tick").data(f,e).order(),M=w.exit(),S=w.enter().append("g").attr("class","tick"),k=w.select("line"),T=w.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),w=w.merge(S),k=k.merge(S.append("line").attr("stroke","#000").attr(c+"2",u*o)),T=T.merge(S.append("text").attr("fill","#000").attr(c,u*d).attr("dy",t===Fu?"0em":t===Hu?"0.71em":"0.32em")),n!==b&&(x=x.transition(n),w=w.transition(n),k=k.transition(n),T=T.transition(n),M=M.transition(n).attr("opacity",qu).attr("transform",(function(t){return isFinite(t=g(t))?h(t):this.getAttribute("transform")})),S.attr("opacity",qu).attr("transform",(function(t){var e=this.parentNode.__axis;return h(e&&isFinite(e=e(t))?e:g(t))}))),M.remove(),x.attr("d",t===zu||t==Bu?"M"+u*s+","+y+"H0.5V"+v+"H"+u*s:"M"+y+","+u*s+"V0.5H"+v+"V"+u*s),w.attr("opacity",1).attr("transform",(function(t){return h(g(t))})),k.attr(c+"2",u*o),T.attr(c,u*d).text(p),b.filter(E).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===Bu?"start":t===zu?"end":"middle"),b.each((function(){this.__axis=g}))}var r=[],a=null,i=null,o=6,s=6,l=3,u=t===Fu||t===zu?-1:1,c=t===zu||t===Bu?"x":"y",h=t===Fu||t===Hu?x:w;return n.scale=function(t){return arguments.length?(e=t,n):e},n.ticks=function(){return r=Lu.call(arguments),n},n.tickArguments=function(t){return arguments.length?(r=null==t?[]:Lu.call(t),n):r.slice()},n.tickValues=function(t){return arguments.length?(a=null==t?null:Lu.call(t),n):a&&a.slice()},n.tickFormat=function(t){return arguments.length?(i=t,n):i},n.tickSize=function(t){return arguments.length?(o=s=+t,n):o},n.tickSizeInner=function(t){return arguments.length?(o=+t,n):o},n.tickSizeOuter=function(t){return arguments.length?(s=+t,n):s},n.tickPadding=function(t){return arguments.length?(l=+t,n):l},n}function S(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new k(r)}function k(t){this._=t}function T(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=Gu,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}function D(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),Vu.hasOwnProperty(e)?{space:Vu[e],local:t}:t}function C(t){var e=D(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===Uu&&e.documentElement.namespaceURI===Uu?e.createElement(t):e.createElementNS(n,t)}})(e)}function N(){}function A(t){return null==t?N:function(){return this.querySelector(t)}}function P(){return[]}function I(t){return null==t?P:function(){return this.querySelectorAll(t)}}function O(t){return new Array(t.length)}function j(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function R(t,e,n,r,a,i){for(var o,s=0,l=e.length,u=i.length;s<u;++s)(o=e[s])?(o.__data__=i[s],r[s]=o):n[s]=new j(t,i[s]);for(;s<l;++s)(o=e[s])&&(a[s]=o)}function L(t,e,n,r,a,i,o){var s,l,u,c={},h=e.length,f=i.length,p=new Array(h);for(s=0;s<h;++s)(l=e[s])&&(p[s]=u=Zu+o.call(l,l.__data__,s,e),u in c?a[s]=l:c[u]=l);for(s=0;s<f;++s)(l=c[u=Zu+o.call(t,i[s],s,i)])?(r[s]=l,l.__data__=i[s],c[u]=null):n[s]=new j(t,i[s]);for(s=0;s<h;++s)(l=e[s])&&c[p[s]]===l&&(a[s]=l)}function F(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function B(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function H(t,e){return t.style.getPropertyValue(e)||B(t).getComputedStyle(t,null).getPropertyValue(e)}function z(t){return t.trim().split(/^|\s+/)}function q(t){return t.classList||new G(t)}function G(t){this._node=t,this._names=z(t.getAttribute("class")||"")}function U(t,e){for(var n=q(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function V(t,e){for(var n=q(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function Y(){this.textContent=""}function W(){this.innerHTML=""}function $(){this.nextSibling&&this.parentNode.appendChild(this)}function X(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Z(){return null}function Q(){var t=this.parentNode;t&&t.removeChild(this)}function J(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function K(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}function tt(t,e,n){return t=et(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function et(e,n,r){return function(a){var i=t.event;t.event=a;try{e.call(this,this.__data__,n,r)}finally{t.event=i}}}function nt(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.capture);++a?e.length=a:delete this.__on}}}function rt(t,e,n){var r=Qu.hasOwnProperty(t.type)?tt:et;return function(a,i,o){var s,l=this.__on,u=r(e,i,o);if(l)for(var c=0,h=l.length;c<h;++c)if((s=l[c]).type===t.type&&s.name===t.name)return this.removeEventListener(s.type,s.listener,s.capture),this.addEventListener(s.type,s.listener=u,s.capture=n),void(s.value=e);this.addEventListener(t.type,u,n),s={type:t.type,name:t.name,value:e,listener:u,capture:n},l?l.push(s):this.__on=[s]}}function at(e,n,r,a){var i=t.event;e.sourceEvent=t.event,t.event=e;try{return n.apply(r,a)}finally{t.event=i}}function it(t,e,n){var r=B(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}function ot(t,e){this._groups=t,this._parents=e}function st(){return new ot([[document.documentElement]],Ju)}function lt(t){return"string"==typeof t?new ot([[document.querySelector(t)]],[document.documentElement]):new ot([[t]],Ju)}function ut(){return new ct}function ct(){this._="@"+(++Ku).toString(36)}function ht(){for(var e,n=t.event;e=n.sourceEvent;)n=e;return n}function ft(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var a=t.getBoundingClientRect();return[e.clientX-a.left-t.clientLeft,e.clientY-a.top-t.clientTop]}function pt(t){var e=ht();return e.changedTouches&&(e=e.changedTouches[0]),ft(t,e)}function dt(t,e,n){arguments.length<3&&(n=e,e=ht().changedTouches);for(var r,a=0,i=e?e.length:0;a<i;++a)if((r=e[a]).identifier===n)return ft(t,r);return null}function mt(){t.event.stopImmediatePropagation()}function yt(){t.event.preventDefault(),t.event.stopImmediatePropagation()}function vt(t){var e=t.document.documentElement,n=lt(t).on("dragstart.drag",yt,!0);"onselectstart"in e?n.on("selectstart.drag",yt,!0):(e.__noselect=e.style.MozUserSelect,e.style.MozUserSelect="none")}function gt(t,e){var n=t.document.documentElement,r=lt(t).on("dragstart.drag",null);e&&(r.on("click.drag",yt,!0),setTimeout((function(){r.on("click.drag",null)}),0)),"onselectstart"in n?r.on("selectstart.drag",null):(n.style.MozUserSelect=n.__noselect,delete n.__noselect)}function bt(t){return function(){return t}}function _t(t,e,n,r,a,i,o,s,l,u){this.target=t,this.type=e,this.subject=n,this.identifier=r,this.active=a,this.x=i,this.y=o,this.dx=s,this.dy=l,this._=u}function xt(){return!t.event.button}function wt(){return this.parentNode}function Et(e){return null==e?{x:t.event.x,y:t.event.y}:e}function Mt(){return"ontouchstart"in this}function St(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function kt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Tt(){}function Dt(t){var e;return t=(t+"").trim().toLowerCase(),(e=rc.exec(t))?new It((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=ac.exec(t))?Ct(parseInt(e[1],16)):(e=ic.exec(t))?new It(e[1],e[2],e[3],1):(e=oc.exec(t))?new It(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=sc.exec(t))?Nt(e[1],e[2],e[3],e[4]):(e=lc.exec(t))?Nt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=uc.exec(t))?Ot(e[1],e[2]/100,e[3]/100,1):(e=cc.exec(t))?Ot(e[1],e[2]/100,e[3]/100,e[4]):hc.hasOwnProperty(t)?Ct(hc[t]):"transparent"===t?new It(NaN,NaN,NaN,0):null}function Ct(t){return new It(t>>16&255,t>>8&255,255&t,1)}function Nt(t,e,n,r){return r<=0&&(t=e=n=NaN),new It(t,e,n,r)}function At(t){return t instanceof Tt||(t=Dt(t)),t?new It((t=t.rgb()).r,t.g,t.b,t.opacity):new It}function Pt(t,e,n,r){return 1===arguments.length?At(t):new It(t,e,n,null==r?1:r)}function It(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Ot(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Rt(t,e,n,r)}function jt(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Rt)return new Rt(t.h,t.s,t.l,t.opacity);if(t instanceof Tt||(t=Dt(t)),!t)return new Rt;if(t instanceof Rt)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,s=i-a,l=(i+a)/2;return s?(o=e===i?(n-r)/s+6*(n<r):n===i?(r-e)/s+2:(e-n)/s+4,s/=l<.5?i+a:2-i-a,o*=60):s=l>0&&l<1?0:o,new Rt(o,s,l,t.opacity)}(t):new Rt(t,e,n,null==r?1:r)}function Rt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Lt(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Ft(t){if(t instanceof Ht)return new Ht(t.l,t.a,t.b,t.opacity);if(t instanceof Yt){var e=t.h*fc;return new Ht(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}t instanceof It||(t=At(t));var n=Ut(t.r),r=Ut(t.g),a=Ut(t.b),i=zt((.4124564*n+.3575761*r+.1804375*a)/dc),o=zt((.2126729*n+.7151522*r+.072175*a)/mc);return new Ht(116*o-16,500*(i-o),200*(o-zt((.0193339*n+.119192*r+.9503041*a)/yc)),t.opacity)}function Bt(t,e,n,r){return 1===arguments.length?Ft(t):new Ht(t,e,n,null==r?1:r)}function Ht(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function zt(t){return t>_c?Math.pow(t,1/3):t/bc+vc}function qt(t){return t>gc?t*t*t:bc*(t-vc)}function Gt(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ut(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Vt(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof Yt)return new Yt(t.h,t.c,t.l,t.opacity);t instanceof Ht||(t=Ft(t));var e=Math.atan2(t.b,t.a)*pc;return new Yt(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new Yt(t,e,n,null==r?1:r)}function Yt(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function Wt(t,e,n,r){return 1===arguments.length?function(t){if(t instanceof $t)return new $t(t.h,t.s,t.l,t.opacity);t instanceof It||(t=At(t));var e=t.r/255,n=t.g/255,r=t.b/255,a=(kc*r+Mc*e-Sc*n)/(kc+Mc-Sc),i=r-a,o=(Ec*(n-a)-xc*i)/wc,s=Math.sqrt(o*o+i*i)/(Ec*a*(1-a)),l=s?Math.atan2(o,i)*pc-120:NaN;return new $t(l<0?l+360:l,s,a,t.opacity)}(t):new $t(t,e,n,null==r?1:r)}function $t(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Xt(t,e,n,r,a){var i=t*t,o=i*t;return((1-3*t+3*i-o)*e+(4-6*i+3*o)*n+(1+3*t+3*i-3*o)*r+o*a)/6}function Zt(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),a=t[r],i=t[r+1],o=r>0?t[r-1]:2*a-i,s=r<e-1?t[r+2]:2*i-a;return Xt((n-r/e)*e,o,a,i,s)}}function Qt(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),a=t[(r+e-1)%e],i=t[r%e],o=t[(r+1)%e],s=t[(r+2)%e];return Xt((n-r/e)*e,a,i,o,s)}}function Jt(t){return function(){return t}}function Kt(t,e){return function(n){return t+n*e}}function te(t,e){var n=e-t;return n?Kt(t,n>180||n<-180?n-360*Math.round(n/360):n):Jt(isNaN(t)?e:t)}function ee(t,e){var n=e-t;return n?Kt(t,n):Jt(isNaN(t)?e:t)}function ne(t){return function(e){var n,r,a=e.length,i=new Array(a),o=new Array(a),s=new Array(a);for(n=0;n<a;++n)r=Pt(e[n]),i[n]=r.r||0,o[n]=r.g||0,s[n]=r.b||0;return i=t(i),o=t(o),s=t(s),r.opacity=1,function(t){return r.r=i(t),r.g=o(t),r.b=s(t),r+""}}}function re(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=le(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}function ae(t,e){var n=new Date;return e-=t=+t,function(r){return n.setTime(t+e*r),n}}function ie(t,e){return e-=t=+t,function(n){return t+e*n}}function oe(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=le(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}function se(t,e){var n,r,a,i=Rc.lastIndex=Lc.lastIndex=0,o=-1,s=[],l=[];for(t+="",e+="";(n=Rc.exec(t))&&(r=Lc.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),s[o]?s[o]+=a:s[++o]=a),(n=n[0])===(r=r[0])?s[o]?s[o]+=r:s[++o]=r:(s[++o]=null,l.push({i:o,x:ie(n,r)})),i=Lc.lastIndex;return i<e.length&&(a=e.slice(i),s[o]?s[o]+=a:s[++o]=a),s.length<2?l[0]?function(t){return function(e){return t(e)+""}}(l[0].x):function(t){return function(){return t}}(e):(e=l.length,function(t){for(var n,r=0;r<e;++r)s[(n=l[r]).i]=n.x(t);return s.join("")})}function le(t,e){var n,r=typeof e;return null==e||"boolean"===r?Jt(e):("number"===r?ie:"string"===r?(n=Dt(e))?(e=n,Ic):se:e instanceof Dt?Ic:e instanceof Date?ae:Array.isArray(e)?re:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?oe:ie)(t,e)}function ue(t,e){return e-=t=+t,function(n){return Math.round(t+e*n)}}function ce(t,e,n,r,a,i){var o,s,l;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(l=t*n+e*r)&&(n-=t*l,r-=e*l),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,l/=s),t*r<e*n&&(t=-t,e=-e,l=-l,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*Fc,skewX:Math.atan(l)*Fc,scaleX:o,scaleY:s}}function he(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var s=[],l=[];return i=t(i),o=t(o),function(t,r,a,i,o,s){if(t!==a||r!==i){var l=o.push("translate(",null,e,null,n);s.push({i:l-4,x:ie(t,a)},{i:l-2,x:ie(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,s,l),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:ie(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,s,l),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:ie(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,s,l),function(t,e,n,r,i,o){if(t!==n||e!==r){var s=i.push(a(i)+"scale(",null,",",null,")");o.push({i:s-4,x:ie(t,n)},{i:s-2,x:ie(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,s,l),i=o=null,function(t){for(var e,n=-1,r=l.length;++n<r;)s[(e=l[n]).i]=e.x(t);return s.join("")}}}function fe(t){return((t=Math.exp(t))+1/t)/2}function pe(t,e){var n,r,a=t[0],i=t[1],o=t[2],s=e[0],l=e[1],u=e[2],c=s-a,h=l-i,f=c*c+h*h;if(f<Vc)r=Math.log(u/o)/qc,n=function(t){return[a+t*c,i+t*h,o*Math.exp(qc*t*r)]};else{var p=Math.sqrt(f),d=(u*u-o*o+Uc*f)/(2*o*Gc*p),m=(u*u-o*o-Uc*f)/(2*u*Gc*p),y=Math.log(Math.sqrt(d*d+1)-d),v=Math.log(Math.sqrt(m*m+1)-m);r=(v-y)/qc,n=function(t){var e=t*r,n=fe(y),s=o/(Gc*p)*(n*function(t){return((t=Math.exp(2*t))-1)/(t+1)}(qc*e+y)-function(t){return((t=Math.exp(t))-1/t)/2}(y));return[a+s*c,i+s*h,o*n/fe(qc*e+y)]}}return n.duration=1e3*r,n}function de(t){return function(e,n){var r=t((e=jt(e)).h,(n=jt(n)).h),a=ee(e.s,n.s),i=ee(e.l,n.l),o=ee(e.opacity,n.opacity);return function(t){return e.h=r(t),e.s=a(t),e.l=i(t),e.opacity=o(t),e+""}}}function me(t){return function(e,n){var r=t((e=Vt(e)).h,(n=Vt(n)).h),a=ee(e.c,n.c),i=ee(e.l,n.l),o=ee(e.opacity,n.opacity);return function(t){return e.h=r(t),e.c=a(t),e.l=i(t),e.opacity=o(t),e+""}}}function ye(t){return function e(n){function r(e,r){var a=t((e=Wt(e)).h,(r=Wt(r)).h),i=ee(e.s,r.s),o=ee(e.l,r.l),s=ee(e.opacity,r.opacity);return function(t){return e.h=a(t),e.s=i(t),e.l=o(Math.pow(t,n)),e.opacity=s(t),e+""}}return n=+n,r.gamma=e,r}(1)}function ve(){return rh||(oh(ge),rh=ih.now()+ah)}function ge(){rh=0}function be(){this._call=this._time=this._next=null}function _e(t,e,n){var r=new be;return r.restart(t,e,n),r}function xe(){ve(),++Jc;for(var t,e=Ac;e;)(t=rh-e._time)>=0&&e._call.call(null,t),e=e._next;--Jc}function we(){rh=(nh=ih.now())+ah,Jc=Kc=0;try{xe()}finally{Jc=0,function(){for(var t,e,n=Ac,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ac=e);Pc=t,Me(r)}(),rh=0}}function Ee(){var t=ih.now(),e=t-nh;e>eh&&(ah-=e,nh=t)}function Me(t){Jc||(Kc&&(Kc=clearTimeout(Kc)),t-rh>24?(t<1/0&&(Kc=setTimeout(we,t-ih.now()-ah)),th&&(th=clearInterval(th))):(th||(nh=ih.now(),th=setInterval(Ee,eh)),Jc=1,oh(we)))}function Se(t,e,n){var r=new be;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r}function ke(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){function r(l){var u,c,h,f;if(n.state!==ch)return i();for(u in s)if((f=s[u]).name===n.name){if(f.state===fh)return Se(r);f.state===ph?(f.state=mh,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete s[u]):+u<e&&(f.state=mh,f.timer.stop(),delete s[u])}if(Se((function(){n.state===fh&&(n.state=ph,n.timer.restart(a,n.delay,n.time),a(l))})),n.state=hh,n.on.call("start",t,t.__data__,n.index,n.group),n.state===hh){for(n.state=fh,o=new Array(h=n.tween.length),u=0,c=-1;u<h;++u)(f=n.tween[u].value.call(t,t.__data__,n.index,n.group))&&(o[++c]=f);o.length=c+1}}function a(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(i),n.state=dh,1),a=-1,s=o.length;++a<s;)o[a].call(null,r);n.state===dh&&(n.on.call("end",t,t.__data__,n.index,n.group),i())}function i(){for(var r in n.state=mh,n.timer.stop(),delete s[e],s)return;delete t.__transition}var o,s=t.__transition;s[e]=n,n.timer=_e((function(t){n.state=ch,n.timer.restart(r,n.delay,n.time),n.delay<=t&&r(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:a,on:sh,tween:lh,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:uh})}function Te(t,e){var n=Ce(t,e);if(n.state>uh)throw new Error("too late; already scheduled");return n}function De(t,e){var n=Ce(t,e);if(n.state>hh)throw new Error("too late; already started");return n}function Ce(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function Ne(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>hh&&n.state<dh,n.state=mh,n.timer.stop(),r&&n.on.call("interrupt",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}function Ae(t,e,n){var r=t._id;return t.each((function(){var t=De(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return Ce(t,r).value[e]}}function Pe(t,e){var n;return("number"==typeof e?ie:e instanceof Dt?Ic:(n=Dt(e))?(e=n,Ic):se)(t,e)}function Ie(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Oe(t){return st().transition(t)}function je(){return++vh}function Re(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function Le(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}function Fe(t){return(1-Math.cos(wh*t))/2}function Be(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function He(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}function ze(t){return(t=+t)<Mh?Ih*t*t:t<kh?Ih*(t-=Sh)*t+Th:t<Ch?Ih*(t-=Dh)*t+Nh:Ih*(t-=Ah)*t+Ph}function qe(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return zh.time=ve(),zh;return n}function Ge(t){return function(){return t}}function Ue(){t.event.stopImmediatePropagation()}function Ve(){t.event.preventDefault(),t.event.stopImmediatePropagation()}function Ye(t){return{type:t}}function We(){return!t.event.button}function $e(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Xe(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function Ze(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function Qe(e){function n(t){var n=t.property("__brush",s).selectAll(".overlay").data([Ye("overlay")]);n.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Zh.overlay).merge(n).each((function(){var t=Xe(this).extent;lt(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])})),t.selectAll(".selection").data([Ye("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Zh.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var a=t.selectAll(".handle").data(e.handles,(function(t){return t.type}));a.exit().remove(),a.enter().append("rect").attr("class",(function(t){return"handle handle--"+t.type})).attr("cursor",(function(t){return Zh[t.type]})),t.each(r).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",o)}function r(){var t=lt(this),e=Xe(this).selection;e?(t.selectAll(".selection").style("display",null).attr("x",e[0][0]).attr("y",e[0][1]).attr("width",e[1][0]-e[0][0]).attr("height",e[1][1]-e[0][1]),t.selectAll(".handle").style("display",null).attr("x",(function(t){return"e"===t.type[t.type.length-1]?e[1][0]-f/2:e[0][0]-f/2})).attr("y",(function(t){return"s"===t.type[0]?e[1][1]-f/2:e[0][1]-f/2})).attr("width",(function(t){return"n"===t.type||"s"===t.type?e[1][0]-e[0][0]+f:f})).attr("height",(function(t){return"e"===t.type||"w"===t.type?e[1][1]-e[0][1]+f:f}))):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function a(t,e){return t.__brush.emitter||new i(t,e)}function i(t,e){this.that=t,this.args=e,this.state=t.__brush,this.active=0}function o(){function n(){var t=pt(w);!O||_||x||(Math.abs(t[0]-R[0])>Math.abs(t[1]-R[1])?x=!0:_=!0),R=t,b=!0,Ve(),i()}function i(){var t;switch(v=R[0]-j[0],g=R[1]-j[1],M){case Uh:case Gh:S&&(v=Math.max(N-s,Math.min(P-p,v)),u=s+v,d=p+v),k&&(g=Math.max(A-h,Math.min(I-m,g)),f=h+g,y=m+g);break;case Vh:S<0?(v=Math.max(N-s,Math.min(P-s,v)),u=s+v,d=p):S>0&&(v=Math.max(N-p,Math.min(P-p,v)),u=s,d=p+v),k<0?(g=Math.max(A-h,Math.min(I-h,g)),f=h+g,y=m):k>0&&(g=Math.max(A-m,Math.min(I-m,g)),f=h,y=m+g);break;case Yh:S&&(u=Math.max(N,Math.min(P,s-v*S)),d=Math.max(N,Math.min(P,p+v*S))),k&&(f=Math.max(A,Math.min(I,h-g*k)),y=Math.max(A,Math.min(I,m+g*k)))}d<u&&(S*=-1,t=s,s=p,p=t,t=u,u=d,d=t,E in Qh&&B.attr("cursor",Zh[E=Qh[E]])),y<f&&(k*=-1,t=h,h=m,m=t,t=f,f=y,y=t,E in Jh&&B.attr("cursor",Zh[E=Jh[E]])),T.selection&&(C=T.selection),_&&(u=C[0][0],d=C[1][0]),x&&(f=C[0][1],y=C[1][1]),C[0][0]===u&&C[0][1]===f&&C[1][0]===d&&C[1][1]===y||(T.selection=[[u,f],[d,y]],r.call(w),L.brush())}function o(){if(Ue(),t.event.touches){if(t.event.touches.length)return;l&&clearTimeout(l),l=setTimeout((function(){l=null}),500),F.on("touchmove.brush touchend.brush touchcancel.brush",null)}else gt(t.event.view,b),H.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);F.attr("pointer-events","all"),B.attr("cursor",Zh.overlay),T.selection&&(C=T.selection),Ze(C)&&(T.selection=null,r.call(w)),L.end()}if(t.event.touches){if(t.event.changedTouches.length<t.event.touches.length)return Ve()}else if(l)return;if(c.apply(this,arguments)){var s,u,h,f,p,d,m,y,v,g,b,_,x,w=this,E=t.event.target.__data__.type,M="selection"===(t.event.metaKey?E="overlay":E)?Gh:t.event.altKey?Yh:Vh,S=e===$h?null:Kh[E],k=e===Wh?null:tf[E],T=Xe(w),D=T.extent,C=T.selection,N=D[0][0],A=D[0][1],P=D[1][0],I=D[1][1],O=S&&k&&t.event.shiftKey,j=pt(w),R=j,L=a(w,arguments).beforestart();"overlay"===E?T.selection=C=[[s=e===$h?N:j[0],h=e===Wh?A:j[1]],[p=e===$h?P:s,m=e===Wh?I:h]]:(s=C[0][0],h=C[0][1],p=C[1][0],m=C[1][1]),u=s,f=h,d=p,y=m;var F=lt(w).attr("pointer-events","none"),B=F.selectAll(".overlay").attr("cursor",Zh[E]);if(t.event.touches)F.on("touchmove.brush",n,!0).on("touchend.brush touchcancel.brush",o,!0);else{var H=lt(t.event.view).on("keydown.brush",(function(){switch(t.event.keyCode){case 16:O=S&&k;break;case 18:M===Vh&&(S&&(p=d-v*S,s=u+v*S),k&&(m=y-g*k,h=f+g*k),M=Yh,i());break;case 32:M!==Vh&&M!==Yh||(S<0?p=d-v:S>0&&(s=u-v),k<0?m=y-g:k>0&&(h=f-g),M=Uh,B.attr("cursor",Zh.selection),i());break;default:return}Ve()}),!0).on("keyup.brush",(function(){switch(t.event.keyCode){case 16:O&&(_=x=O=!1,i());break;case 18:M===Yh&&(S<0?p=d:S>0&&(s=u),k<0?m=y:k>0&&(h=f),M=Vh,i());break;case 32:M===Uh&&(t.event.altKey?(S&&(p=d-v*S,s=u+v*S),k&&(m=y-g*k,h=f+g*k),M=Yh):(S<0?p=d:S>0&&(s=u),k<0?m=y:k>0&&(h=f),M=Vh),B.attr("cursor",Zh[E]),i());break;default:return}Ve()}),!0).on("mousemove.brush",n,!0).on("mouseup.brush",o,!0);vt(t.event.view)}Ue(),Ne(w),r.call(w),L.start()}}function s(){var t=this.__brush||{selection:null};return t.extent=u.apply(this,arguments),t.dim=e,t}var l,u=$e,c=We,h=S(n,"start","brush","end"),f=6;return n.move=function(t,n){t.selection?t.on("start.brush",(function(){a(this,arguments).beforestart().start()})).on("interrupt.brush end.brush",(function(){a(this,arguments).end()})).tween("brush",(function(){function t(t){o.selection=1===t&&Ze(u)?null:c(t),r.call(i),s.brush()}var i=this,o=i.__brush,s=a(i,arguments),l=o.selection,u=e.input("function"==typeof n?n.apply(this,arguments):n,o.extent),c=le(l,u);return l&&u?t:t(1)})):t.each((function(){var t=arguments,i=this.__brush,o=e.input("function"==typeof n?n.apply(this,t):n,i.extent),s=a(this,t).beforestart();Ne(this),i.selection=null==o||Ze(o)?null:o,r.call(this),s.start().brush().end()}))},i.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(t){at(new function(t,e,n){this.target=t,this.type=e,this.selection=n}(n,t,e.output(this.state.selection)),h.apply,h,[t,this.that,this.args])}},n.extent=function(t){return arguments.length?(u="function"==typeof t?t:Ge([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),n):u},n.filter=function(t){return arguments.length?(c="function"==typeof t?t:Ge(!!t),n):c},n.handleSize=function(t){return arguments.length?(f=+t,n):f},n.on=function(){var t=h.on.apply(h,arguments);return t===h?n:t},n}function Je(t){return function(){return t}}function Ke(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function tn(){return new Ke}function en(t){return t.source}function nn(t){return t.target}function rn(t){return t.radius}function an(t){return t.startAngle}function on(t){return t.endAngle}function sn(){}function ln(t,e){var n=new sn;if(t instanceof sn)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,a=-1,i=t.length;if(null==e)for(;++a<i;)n.set(a,t[a]);else for(;++a<i;)n.set(e(r=t[a],a,t),r)}else if(t)for(var o in t)n.set(o,t[o]);return n}function un(){return{}}function cn(t,e,n){t[e]=n}function hn(){return ln()}function fn(t,e,n){t.set(e,n)}function pn(){}function dn(t,e){var n=new pn;if(t instanceof pn)t.each((function(t){n.add(t)}));else if(t){var r=-1,a=t.length;if(null==e)for(;++r<a;)n.add(t[r]);else for(;++r<a;)n.add(e(t[r],r,t))}return n}function mn(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+"]"})).join(",")+"}")}function yn(t){function e(t,e){function n(){if(u)return df;if(c)return c=!1,pf;var e,n,r=s;if(t.charCodeAt(r)===mf){for(;s++<o&&t.charCodeAt(s)!==mf||t.charCodeAt(++s)===mf;);return(e=s)>=o?u=!0:(n=t.charCodeAt(s++))===yf?c=!0:n===vf&&(c=!0,t.charCodeAt(s)===yf&&++s),t.slice(r+1,e-1).replace(/""/g,'"')}for(;s<o;){if((n=t.charCodeAt(e=s++))===yf)c=!0;else if(n===vf)c=!0,t.charCodeAt(s)===yf&&++s;else if(n!==i)continue;return t.slice(r,e)}return u=!0,t.slice(r,o)}var r,a=[],o=t.length,s=0,l=0,u=o<=0,c=!1;for(t.charCodeAt(o-1)===yf&&--o,t.charCodeAt(o-1)===vf&&--o;(r=n())!==df;){for(var h=[];r!==pf&&r!==df;)h.push(r),r=n();e&&null==(h=e(h,l++))||a.push(h)}return a}function n(e){return e.map(r).join(t)}function r(t){return null==t?"":a.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}var a=new RegExp('["'+t+"\n\r]"),i=t.charCodeAt(0);return{parse:function(t,n){var r,a,i=e(t,(function(t,e){if(r)return r(t,e-1);a=t,r=n?function(t,e){var n=mn(t);return function(r,a){return e(n(r),a,t)}}(t,n):mn(t)}));return i.columns=a||[],i},parseRows:e,format:function(e,n){return null==n&&(n=function(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}(e)),[n.map(r).join(t)].concat(e.map((function(e){return n.map((function(t){return r(e[t])})).join(t)}))).join("\n")},formatRows:function(t){return t.map(n).join("\n")}}}function vn(t){return function(){return t}}function gn(){return 1e-6*(Math.random()-.5)}function bn(t,e,n,r){if(isNaN(e)||isNaN(n))return t;var a,i,o,s,l,u,c,h,f,p=t._root,d={data:r},m=t._x0,y=t._y0,v=t._x1,g=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((u=e>=(i=(m+v)/2))?m=i:v=i,(c=n>=(o=(y+g)/2))?y=o:g=o,a=p,!(p=p[h=c<<1|u]))return a[h]=d,t;if(s=+t._x.call(null,p.data),l=+t._y.call(null,p.data),e===s&&n===l)return d.next=p,a?a[h]=d:t._root=d,t;do{a=a?a[h]=new Array(4):t._root=new Array(4),(u=e>=(i=(m+v)/2))?m=i:v=i,(c=n>=(o=(y+g)/2))?y=o:g=o}while((h=c<<1|u)==(f=(l>=o)<<1|s>=i));return a[f]=p,a[h]=d,t}function _n(t,e,n,r,a){this.node=t,this.x0=e,this.y0=n,this.x1=r,this.y1=a}function xn(t){return t[0]}function wn(t){return t[1]}function En(t,e,n){var r=new Mn(null==e?xn:e,null==n?wn:n,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function Mn(t,e,n,r,a,i){this._x=t,this._y=e,this._x0=n,this._y0=r,this._x1=a,this._y1=i,this._root=void 0}function Sn(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}function kn(t){return t.x+t.vx}function Tn(t){return t.y+t.vy}function Dn(t){return t.index}function Cn(t,e){var n=t.get(e);if(!n)throw new Error("missing: "+e);return n}function Nn(t){return t.x}function An(t){return t.y}function Pn(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function In(t){return(t=Pn(Math.abs(t)))?t[1]:NaN}function On(t,e){var n=Pn(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}function jn(t){return new Rn(t)}function Rn(t){if(!(e=Pf.exec(t)))throw new Error("invalid format: "+t);var e,n=e[1]||" ",r=e[2]||">",a=e[3]||"-",i=e[4]||"",o=!!e[5],s=e[6]&&+e[6],l=!!e[7],u=e[8]&&+e[8].slice(1),c=e[9]||"";"n"===c?(l=!0,c="g"):Af[c]||(c=""),(o||"0"===n&&"="===r)&&(o=!0,n="0",r="="),this.fill=n,this.align=r,this.sign=a,this.symbol=i,this.zero=o,this.width=s,this.comma=l,this.precision=u,this.type=c}function Ln(t){return t}function Fn(t){function e(t){function e(t){var e,r,o,c=y,_=v;if("c"===m)_=g(t)+_,t="";else{var x=(t=+t)<0;if(t=g(Math.abs(t),d),x&&0==+t&&(x=!1),c=(x?"("===u?u:"-":"-"===u||"("===u?"":u)+c,_=("s"===m?Of[8+Cf/3]:"")+_+(x&&"("===u?")":""),b)for(e=-1,r=t.length;++e<r;)if(48>(o=t.charCodeAt(e))||o>57){_=(46===o?a+t.slice(e+1):t.slice(e))+_,t=t.slice(0,e);break}}p&&!h&&(t=n(t,1/0));var w=c.length+t.length+_.length,E=w<f?new Array(f-w+1).join(s):"";switch(p&&h&&(t=n(E+t,E.length?f-_.length:1/0),E=""),l){case"<":t=c+t+_+E;break;case"=":t=c+E+t+_;break;case"^":t=E.slice(0,w=E.length>>1)+c+t+_+E.slice(w);break;default:t=E+c+t+_}return i(t)}var s=(t=jn(t)).fill,l=t.align,u=t.sign,c=t.symbol,h=t.zero,f=t.width,p=t.comma,d=t.precision,m=t.type,y="$"===c?r[0]:"#"===c&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",v="$"===c?r[1]:/[%p]/.test(m)?o:"",g=Af[m],b=!m||/[defgprs%]/.test(m);return d=null==d?m?6:12:/[gprs]/.test(m)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),e.toString=function(){return t+""},e}var n=t.grouping&&t.thousands?function(t,e){return function(n,r){for(var a=n.length,i=[],o=0,s=t[0],l=0;a>0&&s>0&&(l+s+1>r&&(s=Math.max(1,r-l)),i.push(n.substring(a-=s,a+s)),!((l+=s+1)>r));)s=t[o=(o+1)%t.length];return i.reverse().join(e)}}(t.grouping,t.thousands):Ln,r=t.currency,a=t.decimal,i=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(t.numerals):Ln,o=t.percent||"%";return{format:e,formatPrefix:function(t,n){var r=e(((t=jn(t)).type="f",t)),a=3*Math.max(-8,Math.min(8,Math.floor(In(n)/3))),i=Math.pow(10,-a),o=Of[8+a/3];return function(t){return r(i*t)+o}}}}function Bn(e){return If=Fn(e),t.format=If.format,t.formatPrefix=If.formatPrefix,If}function Hn(t){return Math.max(0,-In(Math.abs(t)))}function zn(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(In(e)/3)))-In(Math.abs(t)))}function qn(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,In(e)-In(t))+1}function Gn(){return new Un}function Un(){this.reset()}function Vn(t,e,n){var r=t.s=e+n,a=r-e,i=r-a;t.t=e-i+(n-a)}function Yn(t){return t>1?0:t<-1?dp:Math.acos(t)}function Wn(t){return t>1?mp:t<-1?-mp:Math.asin(t)}function $n(t){return(t=Dp(t/2))*t}function Xn(){}function Zn(t,e){t&&Ip.hasOwnProperty(t.type)&&Ip[t.type](t,e)}function Qn(t,e,n){var r,a=-1,i=t.length-n;for(e.lineStart();++a<i;)r=t[a],e.point(r[0],r[1],r[2]);e.lineEnd()}function Jn(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)Qn(t[n],e,1);e.polygonEnd()}function Kn(t,e){t&&Pp.hasOwnProperty(t.type)?Pp[t.type](t,e):Zn(t,e)}function tr(){Rp.point=nr}function er(){rr(jf,Rf)}function nr(t,e){Rp.point=rr,jf=t,Rf=e,Lf=t*=bp,Ff=Ep(e=(e*=bp)/2+yp),Bf=Dp(e)}function rr(t,e){e=(e*=bp)/2+yp;var n=(t*=bp)-Lf,r=n>=0?1:-1,a=r*n,i=Ep(e),o=Dp(e),s=Bf*o,l=Ff*i+s*Ep(a),u=s*r*Dp(a);Op.add(wp(u,l)),Lf=t,Ff=i,Bf=o}function ar(t){return[wp(t[1],t[0]),Wn(t[2])]}function ir(t){var e=t[0],n=t[1],r=Ep(n);return[r*Ep(e),r*Dp(e),Dp(n)]}function or(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function sr(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function lr(t,e){t[0]+=e[0],t[1]+=e[1],t[2]+=e[2]}function ur(t,e){return[t[0]*e,t[1]*e,t[2]*e]}function cr(t){var e=Np(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}function hr(t,e){$f.push(Xf=[Hf=t,qf=t]),e<zf&&(zf=e),e>Gf&&(Gf=e)}function fr(t,e){var n=ir([t*bp,e*bp]);if(Wf){var r=sr(Wf,n),a=sr([r[1],-r[0],0],r);cr(a),a=ar(a);var i,o=t-Uf,s=o>0?1:-1,l=a[0]*gp*s,u=_p(o)>180;u^(s*Uf<l&&l<s*t)?(i=a[1]*gp)>Gf&&(Gf=i):u^(s*Uf<(l=(l+360)%360-180)&&l<s*t)?(i=-a[1]*gp)<zf&&(zf=i):(e<zf&&(zf=e),e>Gf&&(Gf=e)),u?t<Uf?gr(Hf,t)>gr(Hf,qf)&&(qf=t):gr(t,qf)>gr(Hf,qf)&&(Hf=t):qf>=Hf?(t<Hf&&(Hf=t),t>qf&&(qf=t)):t>Uf?gr(Hf,t)>gr(Hf,qf)&&(qf=t):gr(t,qf)>gr(Hf,qf)&&(Hf=t)}else $f.push(Xf=[Hf=t,qf=t]);e<zf&&(zf=e),e>Gf&&(Gf=e),Wf=n,Uf=t}function pr(){Fp.point=fr}function dr(){Xf[0]=Hf,Xf[1]=qf,Fp.point=hr,Wf=null}function mr(t,e){if(Wf){var n=t-Uf;Lp.add(_p(n)>180?n+(n>0?360:-360):n)}else Vf=t,Yf=e;Rp.point(t,e),fr(t,e)}function yr(){Rp.lineStart()}function vr(){mr(Vf,Yf),Rp.lineEnd(),_p(Lp)>pp&&(Hf=-(qf=180)),Xf[0]=Hf,Xf[1]=qf,Wf=null}function gr(t,e){return(e-=t)<0?e+360:e}function br(t,e){return t[0]-e[0]}function _r(t,e){return t[0]<=t[1]?t[0]<=e&&e<=t[1]:e<t[0]||t[1]<e}function xr(t,e){t*=bp;var n=Ep(e*=bp);wr(n*Ep(t),n*Dp(t),Dp(e))}function wr(t,e,n){Jf+=(t-Jf)/++Zf,Kf+=(e-Kf)/Zf,tp+=(n-tp)/Zf}function Er(){Bp.point=Mr}function Mr(t,e){t*=bp;var n=Ep(e*=bp);up=n*Ep(t),cp=n*Dp(t),hp=Dp(e),Bp.point=Sr,wr(up,cp,hp)}function Sr(t,e){t*=bp;var n=Ep(e*=bp),r=n*Ep(t),a=n*Dp(t),i=Dp(e),o=wp(Np((o=cp*i-hp*a)*o+(o=hp*r-up*i)*o+(o=up*a-cp*r)*o),up*r+cp*a+hp*i);Qf+=o,ep+=o*(up+(up=r)),np+=o*(cp+(cp=a)),rp+=o*(hp+(hp=i)),wr(up,cp,hp)}function kr(){Bp.point=xr}function Tr(){Bp.point=Cr}function Dr(){Nr(sp,lp),Bp.point=xr}function Cr(t,e){sp=t,lp=e,t*=bp,e*=bp,Bp.point=Nr;var n=Ep(e);up=n*Ep(t),cp=n*Dp(t),hp=Dp(e),wr(up,cp,hp)}function Nr(t,e){t*=bp;var n=Ep(e*=bp),r=n*Ep(t),a=n*Dp(t),i=Dp(e),o=cp*i-hp*a,s=hp*r-up*i,l=up*a-cp*r,u=Np(o*o+s*s+l*l),c=Wn(u),h=u&&-c/u;ap+=h*o,ip+=h*s,op+=h*l,Qf+=c,ep+=c*(up+(up=r)),np+=c*(cp+(cp=a)),rp+=c*(hp+(hp=i)),wr(up,cp,hp)}function Ar(t){return function(){return t}}function Pr(t,e){function n(n,r){return n=t(n,r),e(n[0],n[1])}return t.invert&&e.invert&&(n.invert=function(n,r){return(n=e.invert(n,r))&&t.invert(n[0],n[1])}),n}function Ir(t,e){return[t>dp?t-vp:t<-dp?t+vp:t,e]}function Or(t,e,n){return(t%=vp)?e||n?Pr(Rr(t),Lr(e,n)):Rr(t):e||n?Lr(e,n):Ir}function jr(t){return function(e,n){return[(e+=t)>dp?e-vp:e<-dp?e+vp:e,n]}}function Rr(t){var e=jr(t);return e.invert=jr(-t),e}function Lr(t,e){function n(t,e){var n=Ep(e),s=Ep(t)*n,l=Dp(t)*n,u=Dp(e),c=u*r+s*a;return[wp(l*i-c*o,s*r-u*a),Wn(c*i+l*o)]}var r=Ep(t),a=Dp(t),i=Ep(e),o=Dp(e);return n.invert=function(t,e){var n=Ep(e),s=Ep(t)*n,l=Dp(t)*n,u=Dp(e),c=u*i-l*o;return[wp(l*i+u*o,s*r+c*a),Wn(c*r-s*a)]},n}function Fr(t){function e(e){return(e=t(e[0]*bp,e[1]*bp))[0]*=gp,e[1]*=gp,e}return t=Or(t[0]*bp,t[1]*bp,t.length>2?t[2]*bp:0),e.invert=function(e){return(e=t.invert(e[0]*bp,e[1]*bp))[0]*=gp,e[1]*=gp,e},e}function Br(t,e,n,r,a,i){if(n){var o=Ep(e),s=Dp(e),l=r*n;null==a?(a=e+r*vp,i=e-l/2):(a=Hr(o,a),i=Hr(o,i),(r>0?a<i:a>i)&&(a+=r*vp));for(var u,c=a;r>0?c>i:c<i;c-=l)u=ar([o,-s*Ep(c),-s*Dp(c)]),t.point(u[0],u[1])}}function Hr(t,e){(e=ir(e))[0]-=t,cr(e);var n=Yn(-e[1]);return((-e[2]<0?-n:n)+vp-pp)%vp}function zr(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Xn,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}}function qr(t,e){return _p(t[0]-e[0])<pp&&_p(t[1]-e[1])<pp}function Gr(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}function Ur(t,e,n,r,a){var i,o,s=[],l=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,r=t[0],o=t[e];if(qr(r,o)){for(a.lineStart(),i=0;i<e;++i)a.point((r=t[i])[0],r[1]);a.lineEnd()}else s.push(n=new Gr(r,t,null,!0)),l.push(n.o=new Gr(r,null,n,!1)),s.push(n=new Gr(o,t,null,!1)),l.push(n.o=new Gr(o,null,n,!0))}})),s.length){for(l.sort(e),Vr(s),Vr(l),i=0,o=l.length;i<o;++i)l[i].e=n=!n;for(var u,c,h=s[0];;){for(var f=h,p=!0;f.v;)if((f=f.n)===h)return;u=f.z,a.lineStart();do{if(f.v=f.o.v=!0,f.e){if(p)for(i=0,o=u.length;i<o;++i)a.point((c=u[i])[0],c[1]);else r(f.x,f.n.x,1,a);f=f.n}else{if(p)for(u=f.p.z,i=u.length-1;i>=0;--i)a.point((c=u[i])[0],c[1]);else r(f.x,f.p.x,-1,a);f=f.p}u=(f=f.o).z,p=!p}while(!f.v);a.lineEnd()}}}function Vr(t){if(e=t.length){for(var e,n,r=0,a=t[0];++r<e;)a.n=n=t[r],n.p=a,a=n;a.n=n=t[0],n.p=a}}function Yr(t,e){var n=e[0],r=e[1],a=[Dp(n),-Ep(n),0],i=0,o=0;Qp.reset();for(var s=0,l=t.length;s<l;++s)if(c=(u=t[s]).length)for(var u,c,h=u[c-1],f=h[0],p=h[1]/2+yp,d=Dp(p),m=Ep(p),y=0;y<c;++y,f=g,d=_,m=x,h=v){var v=u[y],g=v[0],b=v[1]/2+yp,_=Dp(b),x=Ep(b),w=g-f,E=w>=0?1:-1,M=E*w,S=M>dp,k=d*_;if(Qp.add(wp(k*E*Dp(M),m*x+k*Ep(M))),i+=S?w+E*vp:w,S^f>=n^g>=n){var T=sr(ir(h),ir(v));cr(T);var D=sr(a,T);cr(D);var C=(S^w>=0?-1:1)*Wn(D[2]);(r>C||r===C&&(T[0]||T[1]))&&(o+=S^w>=0?1:-1)}}return(i<-pp||i<pp&&Qp<-pp)^1&o}function Wr(t,e,n,r){return function(a){function i(e,n){t(e,n)&&a.point(e,n)}function o(t,e){m.point(t,e)}function s(){_.point=o,m.lineStart()}function l(){_.point=i,m.lineEnd()}function u(t,e){d.push([t,e]),g.point(t,e)}function c(){g.lineStart(),d=[]}function h(){u(d[0][0],d[0][1]),g.lineEnd();var t,e,n,r,i=g.clean(),o=v.result(),s=o.length;if(d.pop(),f.push(d),d=null,s)if(1&i){if((e=(n=o[0]).length-1)>0){for(b||(a.polygonStart(),b=!0),a.lineStart(),t=0;t<e;++t)a.point((r=n[t])[0],r[1]);a.lineEnd()}}else s>1&&2&i&&o.push(o.pop().concat(o.shift())),p.push(o.filter($r))}var f,p,d,m=e(a),v=zr(),g=e(v),b=!1,_={point:i,lineStart:s,lineEnd:l,polygonStart:function(){_.point=u,_.lineStart=c,_.lineEnd=h,p=[],f=[]},polygonEnd:function(){_.point=i,_.lineStart=s,_.lineEnd=l,p=y(p);var t=Yr(f,r);p.length?(b||(a.polygonStart(),b=!0),Ur(p,Xr,t,n,a)):t&&(b||(a.polygonStart(),b=!0),a.lineStart(),n(null,null,1,a),a.lineEnd()),b&&(a.polygonEnd(),b=!1),p=f=null},sphere:function(){a.polygonStart(),a.lineStart(),n(null,null,1,a),a.lineEnd(),a.polygonEnd()}};return _}}function $r(t){return t.length>1}function Xr(t,e){return((t=t.x)[0]<0?t[1]-mp-pp:mp-t[1])-((e=e.x)[0]<0?e[1]-mp-pp:mp-e[1])}function Zr(t){function e(t,e){return Ep(t)*Ep(e)>a}function n(t,e,n){var r=[1,0,0],i=sr(ir(t),ir(e)),o=or(i,i),s=i[0],l=o-s*s;if(!l)return!n&&t;var u=a*o/l,c=-a*s/l,h=sr(r,i),f=ur(r,u);lr(f,ur(i,c));var p=h,d=or(f,p),m=or(p,p),y=d*d-m*(or(f,f)-1);if(!(y<0)){var v=Np(y),g=ur(p,(-d-v)/m);if(lr(g,f),g=ar(g),!n)return g;var b,_=t[0],x=e[0],w=t[1],E=e[1];x<_&&(b=_,_=x,x=b);var M=x-_,S=_p(M-dp)<pp;if(!S&&E<w&&(b=w,w=E,E=b),S||M<pp?S?w+E>0^g[1]<(_p(g[0]-_)<pp?w:E):w<=g[1]&&g[1]<=E:M>dp^(_<=g[0]&&g[0]<=x)){var k=ur(p,(-d+v)/m);return lr(k,f),[g,ar(k)]}}}function r(e,n){var r=o?t:dp-t,a=0;return e<-r?a|=1:e>r&&(a|=2),n<-r?a|=4:n>r&&(a|=8),a}var a=Ep(t),i=6*bp,o=a>0,s=_p(a)>pp;return Wr(e,(function(t){var a,i,l,u,c;return{lineStart:function(){u=l=!1,c=1},point:function(h,f){var p,d=[h,f],m=e(h,f),y=o?m?0:r(h,f):m?r(h+(h<0?dp:-dp),f):0;if(!a&&(u=l=m)&&t.lineStart(),m!==l&&(!(p=n(a,d))||qr(a,p)||qr(d,p))&&(d[0]+=pp,d[1]+=pp,m=e(d[0],d[1])),m!==l)c=0,m?(t.lineStart(),p=n(d,a),t.point(p[0],p[1])):(p=n(a,d),t.point(p[0],p[1]),t.lineEnd()),a=p;else if(s&&a&&o^m){var v;y&i||!(v=n(d,a,!0))||(c=0,o?(t.lineStart(),t.point(v[0][0],v[0][1]),t.point(v[1][0],v[1][1]),t.lineEnd()):(t.point(v[1][0],v[1][1]),t.lineEnd(),t.lineStart(),t.point(v[0][0],v[0][1])))}!m||a&&qr(a,d)||t.point(d[0],d[1]),a=d,l=m,i=y},lineEnd:function(){l&&t.lineEnd(),a=null},clean:function(){return c|(u&&l)<<1}}}),(function(e,n,r,a){Br(a,t,i,r,e,n)}),o?[0,-t]:[-dp,t-dp])}function Qr(t,e,n,r){function a(a,i){return t<=a&&a<=n&&e<=i&&i<=r}function i(a,i,s,u){var c=0,h=0;if(null==a||(c=o(a,s))!==(h=o(i,s))||l(a,i)<0^s>0)do{u.point(0===c||3===c?t:n,c>1?r:e)}while((c=(c+s+4)%4)!==h);else u.point(i[0],i[1])}function o(r,a){return _p(r[0]-t)<pp?a>0?0:3:_p(r[0]-n)<pp?a>0?2:1:_p(r[1]-e)<pp?a>0?1:0:a>0?3:2}function s(t,e){return l(t.x,e.x)}function l(t,e){var n=o(t,1),r=o(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(o){function l(t,e){a(t,e)&&w.point(t,e)}function u(i,o){var s=a(i,o);if(h&&f.push([i,o]),_)p=i,d=o,m=s,_=!1,s&&(w.lineStart(),w.point(i,o));else if(s&&b)w.point(i,o);else{var l=[v=Math.max(td,Math.min(Kp,v)),g=Math.max(td,Math.min(Kp,g))],u=[i=Math.max(td,Math.min(Kp,i)),o=Math.max(td,Math.min(Kp,o))];!function(t,e,n,r,a,i){var o,s=t[0],l=t[1],u=0,c=1,h=e[0]-s,f=e[1]-l;if(o=n-s,h||!(o>0)){if(o/=h,h<0){if(o<u)return;o<c&&(c=o)}else if(h>0){if(o>c)return;o>u&&(u=o)}if(o=a-s,h||!(o<0)){if(o/=h,h<0){if(o>c)return;o>u&&(u=o)}else if(h>0){if(o<u)return;o<c&&(c=o)}if(o=r-l,f||!(o>0)){if(o/=f,f<0){if(o<u)return;o<c&&(c=o)}else if(f>0){if(o>c)return;o>u&&(u=o)}if(o=i-l,f||!(o<0)){if(o/=f,f<0){if(o>c)return;o>u&&(u=o)}else if(f>0){if(o<u)return;o<c&&(c=o)}return u>0&&(t[0]=s+u*h,t[1]=l+u*f),c<1&&(e[0]=s+c*h,e[1]=l+c*f),!0}}}}}(l,u,t,e,n,r)?s&&(w.lineStart(),w.point(i,o),x=!1):(b||(w.lineStart(),w.point(l[0],l[1])),w.point(u[0],u[1]),s||w.lineEnd(),x=!1)}v=i,g=o,b=s}var c,h,f,p,d,m,v,g,b,_,x,w=o,E=zr(),M={point:l,lineStart:function(){M.point=u,h&&h.push(f=[]),_=!0,b=!1,v=g=NaN},lineEnd:function(){c&&(u(p,d),m&&b&&E.rejoin(),c.push(E.result())),M.point=l,b&&w.lineEnd()},polygonStart:function(){w=E,c=[],h=[],x=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,a=h.length;n<a;++n)for(var i,o,s=h[n],l=1,u=s.length,c=s[0],f=c[0],p=c[1];l<u;++l)i=f,o=p,f=(c=s[l])[0],p=c[1],o<=r?p>r&&(f-i)*(r-o)>(p-o)*(t-i)&&++e:p<=r&&(f-i)*(r-o)<(p-o)*(t-i)&&--e;return e}(),n=x&&e,a=(c=y(c)).length;(n||a)&&(o.polygonStart(),n&&(o.lineStart(),i(null,null,1,o),o.lineEnd()),a&&Ur(c,s,e,i,o),o.polygonEnd()),w=o,c=h=f=null}};return M}}function Jr(){nd.point=nd.lineEnd=Xn}function Kr(t,e){Hp=t*=bp,zp=Dp(e*=bp),qp=Ep(e),nd.point=ta}function ta(t,e){t*=bp;var n=Dp(e*=bp),r=Ep(e),a=_p(t-Hp),i=Ep(a),o=r*Dp(a),s=qp*n-zp*r*i,l=zp*n+qp*r*i;ed.add(wp(Np(o*o+s*s),l)),Hp=t,zp=n,qp=r}function ea(t){return ed.reset(),Kn(t,nd),+ed}function na(t,e){return rd[0]=t,rd[1]=e,ea(ad)}function ra(t,e){return!(!t||!od.hasOwnProperty(t.type))&&od[t.type](t,e)}function aa(t,e){return 0===na(t,e)}function ia(t,e){var n=na(t[0],t[1]);return na(t[0],e)+na(e,t[1])<=n+pp}function oa(t,e){return!!Yr(t.map(sa),la(e))}function sa(t){return(t=t.map(la)).pop(),t}function la(t){return[t[0]*bp,t[1]*bp]}function ua(t,e,n){var r=c(t,e-pp,n).concat(e);return function(t){return r.map((function(e){return[t,e]}))}}function ca(t,e,n){var r=c(t,e-pp,n).concat(e);return function(t){return r.map((function(e){return[e,t]}))}}function ha(){function t(){return{type:"MultiLineString",coordinates:e()}}function e(){return c(Mp(i/v)*v,a,v).map(p).concat(c(Mp(u/g)*g,l,g).map(d)).concat(c(Mp(r/m)*m,n,m).filter((function(t){return _p(t%v)>pp})).map(h)).concat(c(Mp(s/y)*y,o,y).filter((function(t){return _p(t%g)>pp})).map(f))}var n,r,a,i,o,s,l,u,h,f,p,d,m=10,y=m,v=90,g=360,b=2.5;return t.lines=function(){return e().map((function(t){return{type:"LineString",coordinates:t}}))},t.outline=function(){return{type:"Polygon",coordinates:[p(i).concat(d(l).slice(1),p(a).reverse().slice(1),d(u).reverse().slice(1))]}},t.extent=function(e){return arguments.length?t.extentMajor(e).extentMinor(e):t.extentMinor()},t.extentMajor=function(e){return arguments.length?(i=+e[0][0],a=+e[1][0],u=+e[0][1],l=+e[1][1],i>a&&(e=i,i=a,a=e),u>l&&(e=u,u=l,l=e),t.precision(b)):[[i,u],[a,l]]},t.extentMinor=function(e){return arguments.length?(r=+e[0][0],n=+e[1][0],s=+e[0][1],o=+e[1][1],r>n&&(e=r,r=n,n=e),s>o&&(e=s,s=o,o=e),t.precision(b)):[[r,s],[n,o]]},t.step=function(e){return arguments.length?t.stepMajor(e).stepMinor(e):t.stepMinor()},t.stepMajor=function(e){return arguments.length?(v=+e[0],g=+e[1],t):[v,g]},t.stepMinor=function(e){return arguments.length?(m=+e[0],y=+e[1],t):[m,y]},t.precision=function(e){return arguments.length?(b=+e,h=ua(s,o,90),f=ca(r,n,b),p=ua(u,l,90),d=ca(i,a,b),t):b},t.extentMajor([[-180,-90+pp],[180,90-pp]]).extentMinor([[-180,-80-pp],[180,80+pp]])}function fa(t){return t}function pa(){ud.point=da}function da(t,e){ud.point=ma,Gp=Vp=t,Up=Yp=e}function ma(t,e){ld.add(Yp*t-Vp*e),Vp=t,Yp=e}function ya(){ma(Gp,Up)}function va(t,e){md+=t,yd+=e,++vd}function ga(){Md.point=ba}function ba(t,e){Md.point=_a,va(Xp=t,Zp=e)}function _a(t,e){var n=t-Xp,r=e-Zp,a=Np(n*n+r*r);gd+=a*(Xp+t)/2,bd+=a*(Zp+e)/2,_d+=a,va(Xp=t,Zp=e)}function xa(){Md.point=va}function wa(){Md.point=Ma}function Ea(){Sa(Wp,$p)}function Ma(t,e){Md.point=Sa,va(Wp=Xp=t,$p=Zp=e)}function Sa(t,e){var n=t-Xp,r=e-Zp,a=Np(n*n+r*r);gd+=a*(Xp+t)/2,bd+=a*(Zp+e)/2,_d+=a,xd+=(a=Zp*t-Xp*e)*(Xp+t),wd+=a*(Zp+e),Ed+=3*a,va(Xp=t,Zp=e)}function ka(t){this._context=t}function Ta(t,e){Ad.point=Da,kd=Dd=t,Td=Cd=e}function Da(t,e){Dd-=t,Cd-=e,Nd.add(Np(Dd*Dd+Cd*Cd)),Dd=t,Cd=e}function Ca(){this._string=[]}function Na(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}function Aa(t){return function(e){var n=new Pa;for(var r in t)n[r]=t[r];return n.stream=e,n}}function Pa(){}function Ia(t,e,n){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),Kn(n,t.stream(dd)),e(dd.result()),null!=r&&t.clipExtent(r),t}function Oa(t,e,n){return Ia(t,(function(n){var r=e[1][0]-e[0][0],a=e[1][1]-e[0][1],i=Math.min(r/(n[1][0]-n[0][0]),a/(n[1][1]-n[0][1])),o=+e[0][0]+(r-i*(n[1][0]+n[0][0]))/2,s=+e[0][1]+(a-i*(n[1][1]+n[0][1]))/2;t.scale(150*i).translate([o,s])}),n)}function ja(t,e,n){return Oa(t,[[0,0],e],n)}function Ra(t,e,n){return Ia(t,(function(n){var r=+e,a=r/(n[1][0]-n[0][0]),i=(r-a*(n[1][0]+n[0][0]))/2,o=-a*n[0][1];t.scale(150*a).translate([i,o])}),n)}function La(t,e,n){return Ia(t,(function(n){var r=+e,a=r/(n[1][1]-n[0][1]),i=-a*n[0][0],o=(r-a*(n[1][1]+n[0][1]))/2;t.scale(150*a).translate([i,o])}),n)}function Fa(t,e){return+e?function(t,e){function n(r,a,i,o,s,l,u,c,h,f,p,d,m,y){var v=u-r,g=c-a,b=v*v+g*g;if(b>4*e&&m--){var _=o+f,x=s+p,w=l+d,E=Np(_*_+x*x+w*w),M=Wn(w/=E),S=_p(_p(w)-1)<pp||_p(i-h)<pp?(i+h)/2:wp(x,_),k=t(S,M),T=k[0],D=k[1],C=T-r,N=D-a,A=g*C-v*N;(A*A/b>e||_p((v*C+g*N)/b-.5)>.3||o*f+s*p+l*d<Id)&&(n(r,a,i,o,s,l,T,D,S,_/=E,x/=E,w,m,y),y.point(T,D),n(T,D,S,_,x,w,u,c,h,f,p,d,m,y))}}return function(e){function r(n,r){n=t(n,r),e.point(n[0],n[1])}function a(){v=NaN,w.point=i,e.lineStart()}function i(r,a){var i=ir([r,a]),o=t(r,a);n(v,g,y,b,_,x,v=o[0],g=o[1],y=r,b=i[0],_=i[1],x=i[2],Pd,e),e.point(v,g)}function o(){w.point=r,e.lineEnd()}function s(){a(),w.point=l,w.lineEnd=u}function l(t,e){i(c=t,e),h=v,f=g,p=b,d=_,m=x,w.point=i}function u(){n(v,g,y,b,_,x,h,f,c,p,d,m,Pd,e),w.lineEnd=o,o()}var c,h,f,p,d,m,y,v,g,b,_,x,w={point:r,lineStart:a,lineEnd:o,polygonStart:function(){e.polygonStart(),w.lineStart=s},polygonEnd:function(){e.polygonEnd(),w.lineStart=a}};return w}}(t,e):function(t){return Aa({point:function(e,n){e=t(e,n),this.stream.point(e[0],e[1])}})}(t)}function Ba(t){return Ha((function(){return t}))()}function Ha(t){function e(t){return[(t=u(t[0]*bp,t[1]*bp))[0]*m+o,s-t[1]*m]}function n(t,e){return[(t=i(t,e))[0]*m+o,s-t[1]*m]}function r(){u=Pr(l=Or(_,x,w),i);var t=i(g,b);return o=y-t[0]*m,s=v+t[1]*m,a()}function a(){return p=d=null,e}var i,o,s,l,u,c,h,f,p,d,m=150,y=480,v=250,g=0,b=0,_=0,x=0,w=0,E=null,M=Jp,S=null,k=fa,T=.5,D=Fa(n,T);return e.stream=function(t){return p&&d===t?p:p=Od(function(t){return Aa({point:function(e,n){var r=t(e,n);return this.stream.point(r[0],r[1])}})}(l)(M(D(k(d=t)))))},e.preclip=function(t){return arguments.length?(M=t,E=void 0,a()):M},e.postclip=function(t){return arguments.length?(k=t,S=c=h=f=null,a()):k},e.clipAngle=function(t){return arguments.length?(M=+t?Zr(E=t*bp):(E=null,Jp),a()):E*gp},e.clipExtent=function(t){return arguments.length?(k=null==t?(S=c=h=f=null,fa):Qr(S=+t[0][0],c=+t[0][1],h=+t[1][0],f=+t[1][1]),a()):null==S?null:[[S,c],[h,f]]},e.scale=function(t){return arguments.length?(m=+t,r()):m},e.translate=function(t){return arguments.length?(y=+t[0],v=+t[1],r()):[y,v]},e.center=function(t){return arguments.length?(g=t[0]%360*bp,b=t[1]%360*bp,r()):[g*gp,b*gp]},e.rotate=function(t){return arguments.length?(_=t[0]%360*bp,x=t[1]%360*bp,w=t.length>2?t[2]%360*bp:0,r()):[_*gp,x*gp,w*gp]},e.precision=function(t){return arguments.length?(D=Fa(n,T=t*t),a()):Np(T)},e.fitExtent=function(t,n){return Oa(e,t,n)},e.fitSize=function(t,n){return ja(e,t,n)},e.fitWidth=function(t,n){return Ra(e,t,n)},e.fitHeight=function(t,n){return La(e,t,n)},function(){return i=t.apply(this,arguments),e.invert=i.invert&&function(t){return(t=u.invert((t[0]-o)/m,(s-t[1])/m))&&[t[0]*gp,t[1]*gp]},r()}}function za(t){var e=0,n=dp/3,r=Ha(t),a=r(e,n);return a.parallels=function(t){return arguments.length?r(e=t[0]*bp,n=t[1]*bp):[e*gp,n*gp]},a}function qa(t,e){function n(t,e){var n=Np(i-2*a*Dp(e))/a;return[n*Dp(t*=a),o-n*Ep(t)]}var r=Dp(t),a=(r+Dp(e))/2;if(_p(a)<pp)return function(t){function e(t,e){return[t*n,Dp(e)/n]}var n=Ep(t);return e.invert=function(t,e){return[t/n,Wn(e*n)]},e}(t);var i=1+r*(2*a-r),o=Np(i)/a;return n.invert=function(t,e){var n=o-e;return[wp(t,_p(n))/a*Cp(n),Wn((i-(t*t+n*n)*a*a)/(2*a))]},n}function Ga(){return za(qa).scale(155.424).center([0,33.6442])}function Ua(){return Ga().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])}function Va(t){return function(e,n){var r=Ep(e),a=Ep(n),i=t(r*a);return[i*a*Dp(e),i*Dp(n)]}}function Ya(t){return function(e,n){var r=Np(e*e+n*n),a=t(r),i=Dp(a),o=Ep(a);return[wp(e*i,r*o),Wn(r&&n*i/r)]}}function Wa(t,e){return[t,kp(Ap((mp+e)/2))]}function $a(t){function e(){var e=dp*s(),o=i(Fr(i.rotate()).invert([0,0]));return u(null==c?[[o[0]-e,o[1]-e],[o[0]+e,o[1]+e]]:t===Wa?[[Math.max(o[0]-e,c),n],[Math.min(o[0]+e,r),a]]:[[c,Math.max(o[1]-e,n)],[r,Math.min(o[1]+e,a)]])}var n,r,a,i=Ba(t),o=i.center,s=i.scale,l=i.translate,u=i.clipExtent,c=null;return i.scale=function(t){return arguments.length?(s(t),e()):s()},i.translate=function(t){return arguments.length?(l(t),e()):l()},i.center=function(t){return arguments.length?(o(t),e()):o()},i.clipExtent=function(t){return arguments.length?(null==t?c=n=r=a=null:(c=+t[0][0],n=+t[0][1],r=+t[1][0],a=+t[1][1]),e()):null==c?null:[[c,n],[r,a]]},e()}function Xa(t){return Ap((mp+t)/2)}function Za(t,e){function n(t,e){i>0?e<-mp+pp&&(e=-mp+pp):e>mp-pp&&(e=mp-pp);var n=i/Tp(Xa(e),a);return[n*Dp(a*t),i-n*Ep(a*t)]}var r=Ep(t),a=t===e?Dp(t):kp(r/Ep(e))/kp(Xa(e)/Xa(t)),i=r*Tp(Xa(t),a)/a;return a?(n.invert=function(t,e){var n=i-e,r=Cp(a)*Np(t*t+n*n);return[wp(t,_p(n))/a*Cp(n),2*xp(Tp(i/r,1/a))-mp]},n):Wa}function Qa(t,e){return[t,e]}function Ja(t,e){function n(t,e){var n=i-e,r=a*t;return[n*Dp(r),i-n*Ep(r)]}var r=Ep(t),a=t===e?Dp(t):(r-Ep(e))/(e-t),i=r/a+t;return _p(a)<pp?Qa:(n.invert=function(t,e){var n=i-e;return[wp(t,_p(n))/a*Cp(n),i-Cp(a)*Np(t*t+n*n)]},n)}function Ka(t,e){var n=Ep(e),r=Ep(t)*n;return[n*Dp(t)/r,Dp(e)/r]}function ti(t,e,n,r){return 1===t&&1===e&&0===n&&0===r?fa:Aa({point:function(a,i){this.stream.point(a*t+n,i*e+r)}})}function ei(t,e){var n=e*e,r=n*n;return[t*(.8707-.131979*n+r*(r*(.003971*n-.001529*r)-.013791)),e*(1.007226+n*(.015085+r*(.028874*n-.044475-.005916*r)))]}function ni(t,e){return[Ep(e)*Dp(t),Dp(e)]}function ri(t,e){var n=Ep(e),r=1+Ep(t)*n;return[n*Dp(t)/r,Dp(e)/r]}function ai(t,e){return[kp(Ap((mp+e)/2)),-t]}function ii(t,e){return t.parent===e.parent?1:2}function oi(t,e){return t+e.x}function si(t,e){return Math.max(t,e.y)}function li(t){var e=0,n=t.children,r=n&&n.length;if(r)for(;--r>=0;)e+=n[r].value;else e=1;t.value=e}function ui(t,e){var n,r,a,i,o,s=new pi(t),l=+t.value&&(s.value=t.value),u=[s];for(null==e&&(e=ci);n=u.pop();)if(l&&(n.value=+n.data.value),(a=e(n.data))&&(o=a.length))for(n.children=new Array(o),i=o-1;i>=0;--i)u.push(r=n.children[i]=new pi(a[i])),r.parent=n,r.depth=n.depth+1;return s.eachBefore(fi)}function ci(t){return t.children}function hi(t){t.data=t.data.data}function fi(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function pi(t){this.data=t,this.depth=this.height=0,this.parent=null}function di(t){for(var e,n,r=0,a=(t=function(t){for(var e,n,r=t.length;r;)n=Math.random()*r--|0,e=t[r],t[r]=t[n],t[n]=e;return t}(Ld.call(t))).length,i=[];r<a;)e=t[r],n&&yi(n,e)?++r:(n=function(t){switch(t.length){case 1:return function(t){return{x:t.x,y:t.y,r:t.r}}(t[0]);case 2:return gi(t[0],t[1]);case 3:return bi(t[0],t[1],t[2])}}(i=function(t,e){var n,r;if(vi(e,t))return[e];for(n=0;n<t.length;++n)if(mi(e,t[n])&&vi(gi(t[n],e),t))return[t[n],e];for(n=0;n<t.length-1;++n)for(r=n+1;r<t.length;++r)if(mi(gi(t[n],t[r]),e)&&mi(gi(t[n],e),t[r])&&mi(gi(t[r],e),t[n])&&vi(bi(t[n],t[r],e),t))return[t[n],t[r],e];throw new Error}(i,e)),r=0);return n}function mi(t,e){var n=t.r-e.r,r=e.x-t.x,a=e.y-t.y;return n<0||n*n<r*r+a*a}function yi(t,e){var n=t.r-e.r+1e-6,r=e.x-t.x,a=e.y-t.y;return n>0&&n*n>r*r+a*a}function vi(t,e){for(var n=0;n<e.length;++n)if(!yi(t,e[n]))return!1;return!0}function gi(t,e){var n=t.x,r=t.y,a=t.r,i=e.x,o=e.y,s=e.r,l=i-n,u=o-r,c=s-a,h=Math.sqrt(l*l+u*u);return{x:(n+i+l/h*c)/2,y:(r+o+u/h*c)/2,r:(h+a+s)/2}}function bi(t,e,n){var r=t.x,a=t.y,i=t.r,o=e.x,s=e.y,l=e.r,u=n.x,c=n.y,h=n.r,f=r-o,p=r-u,d=a-s,m=a-c,y=l-i,v=h-i,g=r*r+a*a-i*i,b=g-o*o-s*s+l*l,_=g-u*u-c*c+h*h,x=p*d-f*m,w=(d*_-m*b)/(2*x)-r,E=(m*y-d*v)/x,M=(p*b-f*_)/(2*x)-a,S=(f*v-p*y)/x,k=E*E+S*S-1,T=2*(i+w*E+M*S),D=w*w+M*M-i*i,C=-(k?(T+Math.sqrt(T*T-4*k*D))/(2*k):D/T);return{x:r+w+E*C,y:a+M+S*C,r:C}}function _i(t,e,n){var r=t.x,a=t.y,i=e.r+n.r,o=t.r+n.r,s=e.x-r,l=e.y-a,u=s*s+l*l;if(u){var c=.5+((o*=o)-(i*=i))/(2*u),h=Math.sqrt(Math.max(0,2*i*(o+u)-(o-=u)*o-i*i))/(2*u);n.x=r+c*s+h*l,n.y=a+c*l-h*s}else n.x=r+o,n.y=a}function xi(t,e){var n=e.x-t.x,r=e.y-t.y,a=t.r+e.r;return a*a-1e-6>n*n+r*r}function wi(t){var e=t._,n=t.next._,r=e.r+n.r,a=(e.x*n.r+n.x*e.r)/r,i=(e.y*n.r+n.y*e.r)/r;return a*a+i*i}function Ei(t){this._=t,this.next=null,this.previous=null}function Mi(t){if(!(a=t.length))return 0;var e,n,r,a,i,o,s,l,u,c,h;if((e=t[0]).x=0,e.y=0,!(a>1))return e.r;if(n=t[1],e.x=-n.r,n.x=e.r,n.y=0,!(a>2))return e.r+n.r;_i(n,e,r=t[2]),e=new Ei(e),n=new Ei(n),r=new Ei(r),e.next=r.previous=n,n.next=e.previous=r,r.next=n.previous=e;t:for(s=3;s<a;++s){_i(e._,n._,r=t[s]),r=new Ei(r),l=n.next,u=e.previous,c=n._.r,h=e._.r;do{if(c<=h){if(xi(l._,r._)){n=l,e.next=n,n.previous=e,--s;continue t}c+=l._.r,l=l.next}else{if(xi(u._,r._)){(e=u).next=n,n.previous=e,--s;continue t}h+=u._.r,u=u.previous}}while(l!==u.next);for(r.previous=e,r.next=n,e.next=n.previous=n=r,i=wi(e);(r=r.next)!==n;)(o=wi(r))<i&&(e=r,i=o);n=e.next}for(e=[n._],r=n;(r=r.next)!==n;)e.push(r._);for(r=di(e),s=0;s<a;++s)(e=t[s]).x-=r.x,e.y-=r.y;return r.r}function Si(t){if("function"!=typeof t)throw new Error;return t}function ki(){return 0}function Ti(t){return function(){return t}}function Di(t){return Math.sqrt(t.value)}function Ci(t){return function(e){e.children||(e.r=Math.max(0,+t(e)||0))}}function Ni(t,e){return function(n){if(r=n.children){var r,a,i,o=r.length,s=t(n)*e||0;if(s)for(a=0;a<o;++a)r[a].r+=s;if(i=Mi(r),s)for(a=0;a<o;++a)r[a].r-=s;n.r=i+s}}}function Ai(t){return function(e){var n=e.parent;e.r*=t,n&&(e.x=n.x+t*e.x,e.y=n.y+t*e.y)}}function Pi(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)}function Ii(t,e,n,r,a){for(var i,o=t.children,s=-1,l=o.length,u=t.value&&(r-e)/t.value;++s<l;)(i=o[s]).y0=n,i.y1=a,i.x0=e,i.x1=e+=i.value*u}function Oi(t){return t.id}function ji(t){return t.parentId}function Ri(t,e){return t.parent===e.parent?1:2}function Li(t){var e=t.children;return e?e[0]:t.t}function Fi(t){var e=t.children;return e?e[e.length-1]:t.t}function Bi(t,e,n){var r=n/(e.i-t.i);e.c-=r,e.s+=n,t.c+=r,e.z+=n,e.m+=n}function Hi(t,e,n){return t.a.parent===e.parent?t.a:n}function zi(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}function qi(t,e,n,r,a){for(var i,o=t.children,s=-1,l=o.length,u=t.value&&(a-n)/t.value;++s<l;)(i=o[s]).x0=e,i.x1=r,i.y0=n,i.y1=n+=i.value*u}function Gi(t,e,n,r,a,i){for(var o,s,l,u,c,h,f,p,d,m,y,v=[],g=e.children,b=0,_=0,x=g.length,w=e.value;b<x;){l=a-n,u=i-r;do{c=g[_++].value}while(!c&&_<x);for(h=f=c,y=c*c*(m=Math.max(u/l,l/u)/(w*t)),d=Math.max(f/y,y/h);_<x;++_){if(c+=s=g[_].value,s<h&&(h=s),s>f&&(f=s),y=c*c*m,(p=Math.max(f/y,y/h))>d){c-=s;break}d=p}v.push(o={value:c,dice:l<u,children:g.slice(b,_)}),o.dice?Ii(o,n,r,a,w?r+=u*c/w:i):qi(o,n,r,w?n+=l*c/w:a,i),w-=c,b=_}return v}function Ui(t,e,n){return(e[0]-t[0])*(n[1]-t[1])-(e[1]-t[1])*(n[0]-t[0])}function Vi(t,e){return t[0]-e[0]||t[1]-e[1]}function Yi(t){for(var e=t.length,n=[0,1],r=2,a=2;a<e;++a){for(;r>1&&Ui(t[n[r-2]],t[n[r-1]],t[a])<=0;)--r;n[r++]=a}return n.slice(0,r)}function Wi(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function $i(t){if(!t._start)try{!function(t){for(;t._start=t._waiting&&t._active<t._size;){var e=t._ended+t._active,n=t._tasks[e],r=n.length-1,a=n[r];n[r]=function(t,e){return function(n,r){t._tasks[e]&&(--t._active,++t._ended,t._tasks[e]=null,null==t._error&&(null!=n?Xi(t,n):(t._data[e]=r,t._waiting?$i(t):Zi(t))))}}(t,e),--t._waiting,++t._active,n=a.apply(null,n),t._tasks[e]&&(t._tasks[e]=n||Ud)}}(t)}catch(e){if(t._tasks[t._ended+t._active-1])Xi(t,e);else if(!t._data)throw e}}function Xi(t,e){var n,r=t._tasks.length;for(t._error=e,t._data=void 0,t._waiting=NaN;--r>=0;)if((n=t._tasks[r])&&(t._tasks[r]=null,n.abort))try{n.abort()}catch(e){}t._active=NaN,Zi(t)}function Zi(t){if(!t._active&&t._call){var e=t._data;t._data=void 0,t._call(t._error,e)}}function Qi(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new Wi(t)}function Ji(){return Math.random()}function Ki(t,e){function n(t){var e,n=u.status;if(!n&&function(t){var e=t.responseType;return e&&"text"!==e?t.response:t.responseText}(u)||n>=200&&n<300||304===n){if(i)try{e=i.call(r,u)}catch(t){return void s.call("error",r,t)}else e=u;s.call("load",r,e)}else s.call("error",r,t)}var r,a,i,o,s=S("beforesend","progress","load","error"),l=ln(),u=new XMLHttpRequest,c=null,h=null,f=0;if("undefined"==typeof XDomainRequest||"withCredentials"in u||!/^(http(s)?:)?\/\//.test(t)||(u=new XDomainRequest),"onload"in u?u.onload=u.onerror=u.ontimeout=n:u.onreadystatechange=function(t){u.readyState>3&&n(t)},u.onprogress=function(t){s.call("progress",r,t)},r={header:function(t,e){return t=(t+"").toLowerCase(),arguments.length<2?l.get(t):(null==e?l.remove(t):l.set(t,e+""),r)},mimeType:function(t){return arguments.length?(a=null==t?null:t+"",r):a},responseType:function(t){return arguments.length?(o=t,r):o},timeout:function(t){return arguments.length?(f=+t,r):f},user:function(t){return arguments.length<1?c:(c=null==t?null:t+"",r)},password:function(t){return arguments.length<1?h:(h=null==t?null:t+"",r)},response:function(t){return i=t,r},get:function(t,e){return r.send("GET",t,e)},post:function(t,e){return r.send("POST",t,e)},send:function(e,n,i){return u.open(e,t,!0,c,h),null==a||l.has("accept")||l.set("accept",a+",*/*"),u.setRequestHeader&&l.each((function(t,e){u.setRequestHeader(e,t)})),null!=a&&u.overrideMimeType&&u.overrideMimeType(a),null!=o&&(u.responseType=o),f>0&&(u.timeout=f),null==i&&"function"==typeof n&&(i=n,n=null),null!=i&&1===i.length&&(i=function(t){return function(e,n){t(null==e?n:null)}}(i)),null!=i&&r.on("error",i).on("load",(function(t){i(null,t)})),s.call("beforesend",r,u),u.send(null==n?null:n),r},abort:function(){return u.abort(),r},on:function(){var t=s.on.apply(s,arguments);return t===s?r:t}},null!=e){if("function"!=typeof e)throw new Error("invalid callback: "+e);return r.get(e)}return r}function to(t,e){return function(n,r){var a=Ki(n).mimeType(t).response(e);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return a.get(r)}return a}}function eo(t,e){return function(n,r,a){arguments.length<3&&(a=r,r=null);var i=Ki(n).mimeType(t);return i.row=function(t){return arguments.length?i.response(function(t,e){return function(n){return t(n.responseText,e)}}(e,r=t)):r},i.row(r),a?i.get(a):i}}function no(t){function e(e){var i=e+"",o=n.get(i);if(!o){if(a!==om)return a;n.set(i,o=r.push(e))}return t[(o-1)%t.length]}var n=ln(),r=[],a=om;return t=null==t?[]:im.call(t),e.domain=function(t){if(!arguments.length)return r.slice();r=[],n=ln();for(var a,i,o=-1,s=t.length;++o<s;)n.has(i=(a=t[o])+"")||n.set(i,r.push(a));return e},e.range=function(n){return arguments.length?(t=im.call(n),e):t.slice()},e.unknown=function(t){return arguments.length?(a=t,e):a},e.copy=function(){return no().domain(r).range(t).unknown(a)},e}function ro(){function t(){var t=a().length,r=o[1]<o[0],f=o[r-0],p=o[1-r];e=(p-f)/Math.max(1,t-l+2*u),s&&(e=Math.floor(e)),f+=(p-f-e*(t-l))*h,n=e*(1-l),s&&(f=Math.round(f),n=Math.round(n));var d=c(t).map((function(t){return f+e*t}));return i(r?d.reverse():d)}var e,n,r=no().unknown(void 0),a=r.domain,i=r.range,o=[0,1],s=!1,l=0,u=0,h=.5;return delete r.unknown,r.domain=function(e){return arguments.length?(a(e),t()):a()},r.range=function(e){return arguments.length?(o=[+e[0],+e[1]],t()):o.slice()},r.rangeRound=function(e){return o=[+e[0],+e[1]],s=!0,t()},r.bandwidth=function(){return n},r.step=function(){return e},r.round=function(e){return arguments.length?(s=!!e,t()):s},r.padding=function(e){return arguments.length?(l=u=Math.max(0,Math.min(1,e)),t()):l},r.paddingInner=function(e){return arguments.length?(l=Math.max(0,Math.min(1,e)),t()):l},r.paddingOuter=function(e){return arguments.length?(u=Math.max(0,Math.min(1,e)),t()):u},r.align=function(e){return arguments.length?(h=Math.max(0,Math.min(1,e)),t()):h},r.copy=function(){return ro().domain(a()).range(o).round(s).paddingInner(l).paddingOuter(u).align(h)},t()}function ao(t){return function(){return t}}function io(t){return+t}function oo(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:ao(e)}function so(t,e,n,r){var a=t[0],i=t[1],o=e[0],s=e[1];return i<a?(a=n(i,a),o=r(s,o)):(a=n(a,i),o=r(o,s)),function(t){return o(a(t))}}function lo(t,e,n,r){var a=Math.min(t.length,e.length)-1,i=new Array(a),o=new Array(a),s=-1;for(t[a]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++s<a;)i[s]=n(t[s],t[s+1]),o[s]=r(e[s],e[s+1]);return function(e){var n=Cu(t,e,1,a)-1;return o[n](i[n](e))}}function uo(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function co(t,e){function n(){return a=Math.min(s.length,l.length)>2?lo:so,i=o=null,r}function r(e){return(i||(i=a(s,l,c?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,u)))(+e)}var a,i,o,s=sm,l=sm,u=le,c=!1;return r.invert=function(t){return(o||(o=a(l,s,oo,c?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},r.domain=function(t){return arguments.length?(s=am.call(t,io),n()):s.slice()},r.range=function(t){return arguments.length?(l=im.call(t),n()):l.slice()},r.rangeRound=function(t){return l=im.call(t),u=ue,n()},r.clamp=function(t){return arguments.length?(c=!!t,n()):c},r.interpolate=function(t){return arguments.length?(u=t,n()):u},n()}function ho(e){var n=e.domain;return e.ticks=function(t){var e=n();return h(e[0],e[e.length-1],null==t?10:t)},e.tickFormat=function(e,r){return function(e,n,r){var a,i=e[0],o=e[e.length-1],s=p(i,o,null==n?10:n);switch((r=jn(null==r?",f":r)).type){case"s":var l=Math.max(Math.abs(i),Math.abs(o));return null!=r.precision||isNaN(a=zn(s,l))||(r.precision=a),t.formatPrefix(r,l);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=qn(s,Math.max(Math.abs(i),Math.abs(o))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=Hn(s))||(r.precision=a-2*("%"===r.type))}return t.format(r)}(n(),e,r)},e.nice=function(t){null==t&&(t=10);var r,a=n(),i=0,o=a.length-1,s=a[i],l=a[o];return l<s&&(r=s,s=l,l=r,r=i,i=o,o=r),(r=f(s,l,t))>0?r=f(s=Math.floor(s/r)*r,l=Math.ceil(l/r)*r,t):r<0&&(r=f(s=Math.ceil(s*r)/r,l=Math.floor(l*r)/r,t)),r>0?(a[i]=Math.floor(s/r)*r,a[o]=Math.ceil(l/r)*r,n(a)):r<0&&(a[i]=Math.ceil(s*r)/r,a[o]=Math.floor(l*r)/r,n(a)),e},e}function fo(t,e){var n,r=0,a=(t=t.slice()).length-1,i=t[r],o=t[a];return o<i&&(n=r,r=a,a=n,n=i,i=o,o=n),t[r]=e.floor(i),t[a]=e.ceil(o),t}function po(t,e){return(e=Math.log(e/t))?function(n){return Math.log(n/t)/e}:ao(e)}function mo(t,e){return t<0?function(n){return-Math.pow(-e,n)*Math.pow(-t,1-n)}:function(n){return Math.pow(e,n)*Math.pow(t,1-n)}}function yo(t){return isFinite(t)?+("1e"+t):t<0?0:t}function vo(t){return 10===t?yo:t===Math.E?Math.exp:function(e){return Math.pow(t,e)}}function go(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(e){return Math.log(e)/t})}function bo(t){return function(e){return-t(-e)}}function _o(t,e){return t<0?-Math.pow(-t,e):Math.pow(t,e)}function xo(){var t=1,e=co((function(e,n){return(n=_o(n,t)-(e=_o(e,t)))?function(r){return(_o(r,t)-e)/n}:ao(n)}),(function(e,n){return n=_o(n,t)-(e=_o(e,t)),function(r){return _o(e+n*r,1/t)}})),n=e.domain;return e.exponent=function(e){return arguments.length?(t=+e,n(n())):t},e.copy=function(){return uo(e,xo().exponent(t))},ho(e)}function wo(t,e,n,r){function a(e){return t(e=new Date(+e)),e}return a.floor=a,a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,s=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return s;do{s.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return s},a.filter=function(n){return wo((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(a.count=function(e,r){return lm.setTime(+e),um.setTime(+r),t(lm),t(um),Math.floor(n(lm,um))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}function Eo(t){return wo((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*fm)/pm}))}function Mo(t){return wo((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/pm}))}function So(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ko(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function To(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function Do(t){function e(t,e){return function(n){var r,a,i,o=[],s=-1,l=0,u=t.length;for(n instanceof Date||(n=new Date(+n));++s<u;)37===t.charCodeAt(s)&&(o.push(t.slice(l,s)),null!=(a=hy[r=t.charAt(++s)])?r=t.charAt(++s):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),l=s+1);return o.push(t.slice(l,s)),o.join("")}}function n(t,e){return function(n){var a,i,o=To(1900);if(r(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(a=(i=(a=ko(To(o.y))).getUTCDay())>4||0===i?Wm.ceil(a):Wm(a),a=Um.offset(a,7*(o.V-1)),o.y=a.getUTCFullYear(),o.m=a.getUTCMonth(),o.d=a.getUTCDate()+(o.w+6)%7):(a=(i=(a=e(To(o.y))).getDay())>4||0===i?Em.ceil(a):Em(a),a=_m.offset(a,7*(o.V-1)),o.y=a.getFullYear(),o.m=a.getMonth(),o.d=a.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?ko(To(o.y)).getUTCDay():e(To(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,ko(o)):e(o)}}function r(t,e,n,r){for(var a,i,o=0,s=e.length,l=n.length;o<s;){if(r>=l)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=M[a in hy?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}var a=t.dateTime,i=t.date,o=t.time,s=t.periods,l=t.days,u=t.shortDays,c=t.months,h=t.shortMonths,f=Ao(s),p=Po(s),d=Ao(l),m=Po(l),y=Ao(u),v=Po(u),g=Ao(c),b=Po(c),_=Ao(h),x=Po(h),w={a:function(t){return u[t.getDay()]},A:function(t){return l[t.getDay()]},b:function(t){return h[t.getMonth()]},B:function(t){return c[t.getMonth()]},c:null,d:Jo,e:Jo,f:rs,H:Ko,I:ts,j:es,L:ns,m:as,M:is,p:function(t){return s[+(t.getHours()>=12)]},Q:Is,s:Os,S:os,u:ss,U:ls,V:us,w:cs,W:hs,x:null,X:null,y:fs,Y:ps,Z:ds,"%":Ps},E={a:function(t){return u[t.getUTCDay()]},A:function(t){return l[t.getUTCDay()]},b:function(t){return h[t.getUTCMonth()]},B:function(t){return c[t.getUTCMonth()]},c:null,d:ms,e:ms,f:_s,H:ys,I:vs,j:gs,L:bs,m:xs,M:ws,p:function(t){return s[+(t.getUTCHours()>=12)]},Q:Is,s:Os,S:Es,u:Ms,U:Ss,V:ks,w:Ts,W:Ds,x:null,X:null,y:Cs,Y:Ns,Z:As,"%":Ps},M={a:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.w=v[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=m[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=_.exec(e.slice(n));return r?(t.m=x[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=g.exec(e.slice(n));return r?(t.m=b[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,e,n){return r(t,a,e,n)},d:qo,e:qo,f:$o,H:Uo,I:Uo,j:Go,L:Wo,m:zo,M:Vo,p:function(t,e,n){var r=f.exec(e.slice(n));return r?(t.p=p[r[0].toLowerCase()],n+r[0].length):-1},Q:Zo,s:Qo,S:Yo,u:Oo,U:jo,V:Ro,w:Io,W:Lo,x:function(t,e,n){return r(t,i,e,n)},X:function(t,e,n){return r(t,o,e,n)},y:Bo,Y:Fo,Z:Ho,"%":Xo};return w.x=e(i,w),w.X=e(o,w),w.c=e(a,w),E.x=e(i,E),E.X=e(o,E),E.c=e(a,E),{format:function(t){var n=e(t+="",w);return n.toString=function(){return t},n},parse:function(t){var e=n(t+="",So);return e.toString=function(){return t},e},utcFormat:function(t){var n=e(t+="",E);return n.toString=function(){return t},n},utcParse:function(t){var e=n(t,ko);return e.toString=function(){return t},e}}}function Co(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function No(t){return t.replace(dy,"\\$&")}function Ao(t){return new RegExp("^(?:"+t.map(No).join("|")+")","i")}function Po(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function Io(t,e,n){var r=fy.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Oo(t,e,n){var r=fy.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function jo(t,e,n){var r=fy.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Ro(t,e,n){var r=fy.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Lo(t,e,n){var r=fy.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Fo(t,e,n){var r=fy.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Bo(t,e,n){var r=fy.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Ho(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function zo(t,e,n){var r=fy.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function qo(t,e,n){var r=fy.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Go(t,e,n){var r=fy.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Uo(t,e,n){var r=fy.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Vo(t,e,n){var r=fy.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Yo(t,e,n){var r=fy.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Wo(t,e,n){var r=fy.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function $o(t,e,n){var r=fy.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Xo(t,e,n){var r=py.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Zo(t,e,n){var r=fy.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function Qo(t,e,n){var r=fy.exec(e.slice(n));return r?(t.Q=1e3*+r[0],n+r[0].length):-1}function Jo(t,e){return Co(t.getDate(),e,2)}function Ko(t,e){return Co(t.getHours(),e,2)}function ts(t,e){return Co(t.getHours()%12||12,e,2)}function es(t,e){return Co(1+_m.count(Fm(t),t),e,3)}function ns(t,e){return Co(t.getMilliseconds(),e,3)}function rs(t,e){return ns(t,e)+"000"}function as(t,e){return Co(t.getMonth()+1,e,2)}function is(t,e){return Co(t.getMinutes(),e,2)}function os(t,e){return Co(t.getSeconds(),e,2)}function ss(t){var e=t.getDay();return 0===e?7:e}function ls(t,e){return Co(wm.count(Fm(t),t),e,2)}function us(t,e){var n=t.getDay();return t=n>=4||0===n?km(t):km.ceil(t),Co(km.count(Fm(t),t)+(4===Fm(t).getDay()),e,2)}function cs(t){return t.getDay()}function hs(t,e){return Co(Em.count(Fm(t),t),e,2)}function fs(t,e){return Co(t.getFullYear()%100,e,2)}function ps(t,e){return Co(t.getFullYear()%1e4,e,4)}function ds(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Co(e/60|0,"0",2)+Co(e%60,"0",2)}function ms(t,e){return Co(t.getUTCDate(),e,2)}function ys(t,e){return Co(t.getUTCHours(),e,2)}function vs(t,e){return Co(t.getUTCHours()%12||12,e,2)}function gs(t,e){return Co(1+Um.count(ly(t),t),e,3)}function bs(t,e){return Co(t.getUTCMilliseconds(),e,3)}function _s(t,e){return bs(t,e)+"000"}function xs(t,e){return Co(t.getUTCMonth()+1,e,2)}function ws(t,e){return Co(t.getUTCMinutes(),e,2)}function Es(t,e){return Co(t.getUTCSeconds(),e,2)}function Ms(t){var e=t.getUTCDay();return 0===e?7:e}function Ss(t,e){return Co(Ym.count(ly(t),t),e,2)}function ks(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Zm(t):Zm.ceil(t),Co(Zm.count(ly(t),t)+(4===ly(t).getUTCDay()),e,2)}function Ts(t){return t.getUTCDay()}function Ds(t,e){return Co(Wm.count(ly(t),t),e,2)}function Cs(t,e){return Co(t.getUTCFullYear()%100,e,2)}function Ns(t,e){return Co(t.getUTCFullYear()%1e4,e,4)}function As(){return"+0000"}function Ps(){return"%"}function Is(t){return+t}function Os(t){return Math.floor(+t/1e3)}function js(e){return uy=Do(e),t.timeFormat=uy.format,t.timeParse=uy.parse,t.utcFormat=uy.utcFormat,t.utcParse=uy.utcParse,uy}function Rs(t){return new Date(t)}function Ls(t){return t instanceof Date?+t:+new Date(+t)}function Fs(t,e,r,a,i,o,s,l,u){function c(n){return(s(n)<n?y:o(n)<n?v:i(n)<n?g:a(n)<n?b:e(n)<n?r(n)<n?_:x:t(n)<n?w:E)(n)}function h(e,r,a,i){if(null==e&&(e=10),"number"==typeof e){var o=Math.abs(a-r)/e,s=n((function(t){return t[2]})).right(M,o);s===M.length?(i=p(r/My,a/My,e),e=t):s?(i=(s=M[o/M[s-1][2]<M[s][2]/o?s-1:s])[1],e=s[0]):(i=Math.max(p(r,a,e),1),e=l)}return null==i?e:e.every(i)}var f=co(oo,ie),d=f.invert,m=f.domain,y=u(".%L"),v=u(":%S"),g=u("%I:%M"),b=u("%I %p"),_=u("%a %d"),x=u("%b %d"),w=u("%B"),E=u("%Y"),M=[[s,1,gy],[s,5,5*gy],[s,15,15*gy],[s,30,30*gy],[o,1,by],[o,5,5*by],[o,15,15*by],[o,30,30*by],[i,1,_y],[i,3,3*_y],[i,6,6*_y],[i,12,12*_y],[a,1,xy],[a,2,2*xy],[r,1,wy],[e,1,Ey],[e,3,3*Ey],[t,1,My]];return f.invert=function(t){return new Date(d(t))},f.domain=function(t){return arguments.length?m(am.call(t,Ls)):m().map(Rs)},f.ticks=function(t,e){var n,r=m(),a=r[0],i=r[r.length-1],o=i<a;return o&&(n=a,a=i,i=n),n=(n=h(t,a,i,e))?n.range(a,i+1):[],o?n.reverse():n},f.tickFormat=function(t,e){return null==e?c:u(e)},f.nice=function(t,e){var n=m();return(t=h(t,n[0],n[n.length-1],e))?m(fo(n,t)):f},f.copy=function(){return uo(f,Fs(t,e,r,a,i,o,s,l,u))},f}function Bs(t){return t.match(/.{6}/g).map((function(t){return"#"+t}))}function Hs(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}function zs(t){return function(){return t}}function qs(t){return t>=1?Yy:t<=-1?-Yy:Math.asin(t)}function Gs(t){return t.innerRadius}function Us(t){return t.outerRadius}function Vs(t){return t.startAngle}function Ys(t){return t.endAngle}function Ws(t){return t&&t.padAngle}function $s(t,e,n,r,a,i,o){var s=t-n,l=e-r,u=(o?i:-i)/Gy(s*s+l*l),c=u*l,h=-u*s,f=t+c,p=e+h,d=n+c,m=r+h,y=(f+d)/2,v=(p+m)/2,g=d-f,b=m-p,_=g*g+b*b,x=a-i,w=f*m-d*p,E=(b<0?-1:1)*Gy(Hy(0,x*x*_-w*w)),M=(w*b-g*E)/_,S=(-w*g-b*E)/_,k=(w*b+g*E)/_,T=(-w*g+b*E)/_,D=M-y,C=S-v,N=k-y,A=T-v;return D*D+C*C>N*N+A*A&&(M=k,S=T),{cx:M,cy:S,x01:-c,y01:-h,x11:M*(a/x-1),y11:S*(a/x-1)}}function Xs(t){this._context=t}function Zs(t){return new Xs(t)}function Qs(t){return t[0]}function Js(t){return t[1]}function Ks(){function t(t){var s,l,u,c=t.length,h=!1;for(null==a&&(o=i(u=tn())),s=0;s<=c;++s)!(s<c&&r(l=t[s],s,t))===h&&((h=!h)?o.lineStart():o.lineEnd()),h&&o.point(+e(l,s,t),+n(l,s,t));if(u)return o=null,u+""||null}var e=Qs,n=Js,r=zs(!0),a=null,i=Zs,o=null;return t.x=function(n){return arguments.length?(e="function"==typeof n?n:zs(+n),t):e},t.y=function(e){return arguments.length?(n="function"==typeof e?e:zs(+e),t):n},t.defined=function(e){return arguments.length?(r="function"==typeof e?e:zs(!!e),t):r},t.curve=function(e){return arguments.length?(i=e,null!=a&&(o=i(a)),t):i},t.context=function(e){return arguments.length?(null==e?a=o=null:o=i(a=e),t):a},t}function tl(){function t(t){var e,c,h,f,p,d=t.length,m=!1,y=new Array(d),v=new Array(d);for(null==s&&(u=l(p=tn())),e=0;e<=d;++e){if(!(e<d&&o(f=t[e],e,t))===m)if(m=!m)c=e,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),h=e-1;h>=c;--h)u.point(y[h],v[h]);u.lineEnd(),u.areaEnd()}m&&(y[e]=+n(f,e,t),v[e]=+a(f,e,t),u.point(r?+r(f,e,t):y[e],i?+i(f,e,t):v[e]))}if(p)return u=null,p+""||null}function e(){return Ks().defined(o).curve(l).context(s)}var n=Qs,r=null,a=zs(0),i=Js,o=zs(!0),s=null,l=Zs,u=null;return t.x=function(e){return arguments.length?(n="function"==typeof e?e:zs(+e),r=null,t):n},t.x0=function(e){return arguments.length?(n="function"==typeof e?e:zs(+e),t):n},t.x1=function(e){return arguments.length?(r=null==e?null:"function"==typeof e?e:zs(+e),t):r},t.y=function(e){return arguments.length?(a="function"==typeof e?e:zs(+e),i=null,t):a},t.y0=function(e){return arguments.length?(a="function"==typeof e?e:zs(+e),t):a},t.y1=function(e){return arguments.length?(i=null==e?null:"function"==typeof e?e:zs(+e),t):i},t.lineX0=t.lineY0=function(){return e().x(n).y(a)},t.lineY1=function(){return e().x(n).y(i)},t.lineX1=function(){return e().x(r).y(a)},t.defined=function(e){return arguments.length?(o="function"==typeof e?e:zs(!!e),t):o},t.curve=function(e){return arguments.length?(l=e,null!=s&&(u=l(s)),t):l},t.context=function(e){return arguments.length?(null==e?s=u=null:u=l(s=e),t):s},t}function el(t,e){return e<t?-1:e>t?1:e>=t?0:NaN}function nl(t){return t}function rl(t){this._curve=t}function al(t){function e(e){return new rl(t(e))}return e._curve=t,e}function il(t){var e=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?e(al(t)):e()._curve},t}function ol(){return il(Ks().curve($y))}function sl(){var t=tl().curve($y),e=t.curve,n=t.lineX0,r=t.lineX1,a=t.lineY0,i=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return il(n())},delete t.lineX0,t.lineEndAngle=function(){return il(r())},delete t.lineX1,t.lineInnerRadius=function(){return il(a())},delete t.lineY0,t.lineOuterRadius=function(){return il(i())},delete t.lineY1,t.curve=function(t){return arguments.length?e(al(t)):e()._curve},t}function ll(t,e){return[(e=+e)*Math.cos(t-=Math.PI/2),e*Math.sin(t)]}function ul(t){return t.source}function cl(t){return t.target}function hl(t){function e(){var e,s=Xy.call(arguments),l=n.apply(this,s),u=r.apply(this,s);if(o||(o=e=tn()),t(o,+a.apply(this,(s[0]=l,s)),+i.apply(this,s),+a.apply(this,(s[0]=u,s)),+i.apply(this,s)),e)return o=null,e+""||null}var n=ul,r=cl,a=Qs,i=Js,o=null;return e.source=function(t){return arguments.length?(n=t,e):n},e.target=function(t){return arguments.length?(r=t,e):r},e.x=function(t){return arguments.length?(a="function"==typeof t?t:zs(+t),e):a},e.y=function(t){return arguments.length?(i="function"==typeof t?t:zs(+t),e):i},e.context=function(t){return arguments.length?(o=null==t?null:t,e):o},e}function fl(t,e,n,r,a){t.moveTo(e,n),t.bezierCurveTo(e=(e+r)/2,n,e,a,r,a)}function pl(t,e,n,r,a){t.moveTo(e,n),t.bezierCurveTo(e,n=(n+a)/2,r,n,r,a)}function dl(t,e,n,r,a){var i=ll(e,n),o=ll(e,n=(n+a)/2),s=ll(r,n),l=ll(r,a);t.moveTo(i[0],i[1]),t.bezierCurveTo(o[0],o[1],s[0],s[1],l[0],l[1])}function ml(){}function yl(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function vl(t){this._context=t}function gl(t){this._context=t}function bl(t){this._context=t}function _l(t,e){this._basis=new vl(t),this._beta=e}function xl(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function wl(t,e){this._context=t,this._k=(1-e)/6}function El(t,e){this._context=t,this._k=(1-e)/6}function Ml(t,e){this._context=t,this._k=(1-e)/6}function Sl(t,e,n){var r=t._x1,a=t._y1,i=t._x2,o=t._y2;if(t._l01_a>Uy){var s=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,l=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*s-t._x0*t._l12_2a+t._x2*t._l01_2a)/l,a=(a*s-t._y0*t._l12_2a+t._y2*t._l01_2a)/l}if(t._l23_a>Uy){var u=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);i=(i*u+t._x1*t._l23_2a-e*t._l12_2a)/c,o=(o*u+t._y1*t._l23_2a-n*t._l12_2a)/c}t._context.bezierCurveTo(r,a,i,o,t._x2,t._y2)}function kl(t,e){this._context=t,this._alpha=e}function Tl(t,e){this._context=t,this._alpha=e}function Dl(t,e){this._context=t,this._alpha=e}function Cl(t){this._context=t}function Nl(t){return t<0?-1:1}function Al(t,e,n){var r=t._x1-t._x0,a=e-t._x1,i=(t._y1-t._y0)/(r||a<0&&-0),o=(n-t._y1)/(a||r<0&&-0),s=(i*a+o*r)/(r+a);return(Nl(i)+Nl(o))*Math.min(Math.abs(i),Math.abs(o),.5*Math.abs(s))||0}function Pl(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function Il(t,e,n){var r=t._x0,a=t._y0,i=t._x1,o=t._y1,s=(i-r)/3;t._context.bezierCurveTo(r+s,a+s*e,i-s,o-s*n,i,o)}function Ol(t){this._context=t}function jl(t){this._context=new Rl(t)}function Rl(t){this._context=t}function Ll(t){this._context=t}function Fl(t){var e,n,r=t.length-1,a=new Array(r),i=new Array(r),o=new Array(r);for(a[0]=0,i[0]=2,o[0]=t[0]+2*t[1],e=1;e<r-1;++e)a[e]=1,i[e]=4,o[e]=4*t[e]+2*t[e+1];for(a[r-1]=2,i[r-1]=7,o[r-1]=8*t[r-1]+t[r],e=1;e<r;++e)n=a[e]/i[e-1],i[e]-=n,o[e]-=n*o[e-1];for(a[r-1]=o[r-1]/i[r-1],e=r-2;e>=0;--e)a[e]=(o[e]-a[e+1])/i[e];for(i[r-1]=(t[r]+a[r-1])/2,e=0;e<r-1;++e)i[e]=2*t[e+1]-a[e+1];return[a,i]}function Bl(t,e){this._context=t,this._t=e}function Hl(t,e){if((a=t.length)>1)for(var n,r,a,i=1,o=t[e[0]],s=o.length;i<a;++i)for(r=o,o=t[e[i]],n=0;n<s;++n)o[n][1]+=o[n][0]=isNaN(r[n][1])?r[n][0]:r[n][1]}function zl(t){for(var e=t.length,n=new Array(e);--e>=0;)n[e]=e;return n}function ql(t,e){return t[e]}function Gl(t){var e=t.map(Ul);return zl(t).sort((function(t,n){return e[t]-e[n]}))}function Ul(t){for(var e,n=0,r=-1,a=t.length;++r<a;)(e=+t[r][1])&&(n+=e);return n}function Vl(t){return function(){return t}}function Yl(t){return t[0]}function Wl(t){return t[1]}function $l(){this._=null}function Xl(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Zl(t,e){var n=e,r=e.R,a=n.U;a?a.L===n?a.L=r:a.R=r:t._=r,r.U=a,n.U=r,n.R=r.L,n.R&&(n.R.U=n),r.L=n}function Ql(t,e){var n=e,r=e.L,a=n.U;a?a.L===n?a.L=r:a.R=r:t._=r,r.U=a,n.U=r,n.L=r.R,n.L&&(n.L.U=n),r.R=n}function Jl(t){for(;t.L;)t=t.L;return t}function Kl(t,e,n,r){var a=[null,null],i=Mv.push(a)-1;return a.left=t,a.right=e,n&&eu(a,t,e,n),r&&eu(a,e,t,r),wv[t.index].halfedges.push(i),wv[e.index].halfedges.push(i),a}function tu(t,e,n){var r=[e,n];return r.left=t,r}function eu(t,e,n,r){t[0]||t[1]?t.left===n?t[1]=r:t[0]=r:(t[0]=r,t.left=e,t.right=n)}function nu(t,e,n,r,a){var i,o=t[0],s=t[1],l=o[0],u=o[1],c=0,h=1,f=s[0]-l,p=s[1]-u;if(i=e-l,f||!(i>0)){if(i/=f,f<0){if(i<c)return;i<h&&(h=i)}else if(f>0){if(i>h)return;i>c&&(c=i)}if(i=r-l,f||!(i<0)){if(i/=f,f<0){if(i>h)return;i>c&&(c=i)}else if(f>0){if(i<c)return;i<h&&(h=i)}if(i=n-u,p||!(i>0)){if(i/=p,p<0){if(i<c)return;i<h&&(h=i)}else if(p>0){if(i>h)return;i>c&&(c=i)}if(i=a-u,p||!(i<0)){if(i/=p,p<0){if(i>h)return;i>c&&(c=i)}else if(p>0){if(i<c)return;i<h&&(h=i)}return!(c>0||h<1)||(c>0&&(t[0]=[l+c*f,u+c*p]),h<1&&(t[1]=[l+h*f,u+h*p]),!0)}}}}}function ru(t,e,n,r,a){var i=t[1];if(i)return!0;var o,s,l=t[0],u=t.left,c=t.right,h=u[0],f=u[1],p=c[0],d=c[1],m=(h+p)/2,y=(f+d)/2;if(d===f){if(m<e||m>=r)return;if(h>p){if(l){if(l[1]>=a)return}else l=[m,n];i=[m,a]}else{if(l){if(l[1]<n)return}else l=[m,a];i=[m,n]}}else if(s=y-(o=(h-p)/(d-f))*m,o<-1||o>1)if(h>p){if(l){if(l[1]>=a)return}else l=[(n-s)/o,n];i=[(a-s)/o,a]}else{if(l){if(l[1]<n)return}else l=[(a-s)/o,a];i=[(n-s)/o,n]}else if(f<d){if(l){if(l[0]>=r)return}else l=[e,o*e+s];i=[r,o*r+s]}else{if(l){if(l[0]<e)return}else l=[r,o*r+s];i=[e,o*e+s]}return t[0]=l,t[1]=i,!0}function au(t,e){var n=t.site,r=e.left,a=e.right;return n===a&&(a=r,r=n),a?Math.atan2(a[1]-r[1],a[0]-r[0]):(n===r?(r=e[1],a=e[0]):(r=e[0],a=e[1]),Math.atan2(r[0]-a[0],a[1]-r[1]))}function iu(t,e){return e[+(e.left!==t.site)]}function ou(t,e){return e[+(e.left===t.site)]}function su(t){var e=t.P,n=t.N;if(e&&n){var r=e.site,a=t.site,i=n.site;if(r!==i){var o=a[0],s=a[1],l=r[0]-o,u=r[1]-s,c=i[0]-o,h=i[1]-s,f=2*(l*h-u*c);if(!(f>=-Dv)){var p=l*l+u*u,d=c*c+h*h,m=(h*p-u*d)/f,y=(l*d-c*p)/f,v=Sv.pop()||new function(){Xl(this),this.x=this.y=this.arc=this.site=this.cy=null};v.arc=t,v.site=a,v.x=m+o,v.y=(v.cy=y+s)+Math.sqrt(m*m+y*y),t.circle=v;for(var g=null,b=Ev._;b;)if(v.y<b.y||v.y===b.y&&v.x<=b.x){if(!b.L){g=b.P;break}b=b.L}else{if(!b.R){g=b;break}b=b.R}Ev.insert(g,v),g||(_v=v)}}}}function lu(t){var e=t.circle;e&&(e.P||(_v=e.N),Ev.remove(e),Sv.push(e),Xl(e),t.circle=null)}function uu(t){var e=kv.pop()||new function(){Xl(this),this.edge=this.site=this.circle=null};return e.site=t,e}function cu(t){lu(t),xv.remove(t),kv.push(t),Xl(t)}function hu(t){var e=t.circle,n=e.x,r=e.cy,a=[n,r],i=t.P,o=t.N,s=[t];cu(t);for(var l=i;l.circle&&Math.abs(n-l.circle.x)<Tv&&Math.abs(r-l.circle.cy)<Tv;)i=l.P,s.unshift(l),cu(l),l=i;s.unshift(l),lu(l);for(var u=o;u.circle&&Math.abs(n-u.circle.x)<Tv&&Math.abs(r-u.circle.cy)<Tv;)o=u.N,s.push(u),cu(u),u=o;s.push(u),lu(u);var c,h=s.length;for(c=1;c<h;++c)u=s[c],l=s[c-1],eu(u.edge,l.site,u.site,a);l=s[0],(u=s[h-1]).edge=Kl(l.site,u.site,null,a),su(l),su(u)}function fu(t){for(var e,n,r,a,i=t[0],o=t[1],s=xv._;s;)if((r=pu(s,o)-i)>Tv)s=s.L;else{if(!((a=i-function(t,e){var n=t.N;if(n)return pu(n,e);var r=t.site;return r[1]===e?r[0]:1/0}(s,o))>Tv)){r>-Tv?(e=s.P,n=s):a>-Tv?(e=s,n=s.N):e=n=s;break}if(!s.R){e=s;break}s=s.R}!function(t){wv[t.index]={site:t,halfedges:[]}}(t);var l=uu(t);if(xv.insert(e,l),e||n){if(e===n)return lu(e),n=uu(e.site),xv.insert(l,n),l.edge=n.edge=Kl(e.site,l.site),su(e),void su(n);if(n){lu(e),lu(n);var u=e.site,c=u[0],h=u[1],f=t[0]-c,p=t[1]-h,d=n.site,m=d[0]-c,y=d[1]-h,v=2*(f*y-p*m),g=f*f+p*p,b=m*m+y*y,_=[(y*g-p*b)/v+c,(f*b-m*g)/v+h];eu(n.edge,u,d,_),l.edge=Kl(u,t,null,_),n.edge=Kl(t,d,null,_),su(e),su(n)}else l.edge=Kl(e.site,l.site)}}function pu(t,e){var n=t.site,r=n[0],a=n[1],i=a-e;if(!i)return r;var o=t.P;if(!o)return-1/0;var s=(n=o.site)[0],l=n[1],u=l-e;if(!u)return s;var c=s-r,h=1/i-1/u,f=c/u;return h?(-f+Math.sqrt(f*f-2*h*(c*c/(-2*u)-l+u/2+a-i/2)))/h+r:(r+s)/2}function du(t,e,n){return(t[0]-n[0])*(e[1]-t[1])-(t[0]-e[0])*(n[1]-t[1])}function mu(t,e){return e[1]-t[1]||e[0]-t[0]}function yu(t,e){var n,r,a,i=t.sort(mu).pop();for(Mv=[],wv=new Array(t.length),xv=new $l,Ev=new $l;;)if(a=_v,i&&(!a||i[1]<a.y||i[1]===a.y&&i[0]<a.x))i[0]===n&&i[1]===r||(fu(i),n=i[0],r=i[1]),i=t.pop();else{if(!a)break;hu(a.arc)}if(function(){for(var t,e,n,r,a=0,i=wv.length;a<i;++a)if((t=wv[a])&&(r=(e=t.halfedges).length)){var o=new Array(r),s=new Array(r);for(n=0;n<r;++n)o[n]=n,s[n]=au(t,Mv[e[n]]);for(o.sort((function(t,e){return s[e]-s[t]})),n=0;n<r;++n)s[n]=e[o[n]];for(n=0;n<r;++n)e[n]=s[n]}}(),e){var o=+e[0][0],s=+e[0][1],l=+e[1][0],u=+e[1][1];(function(t,e,n,r){for(var a,i=Mv.length;i--;)ru(a=Mv[i],t,e,n,r)&&nu(a,t,e,n,r)&&(Math.abs(a[0][0]-a[1][0])>Tv||Math.abs(a[0][1]-a[1][1])>Tv)||delete Mv[i]})(o,s,l,u),function(t,e,n,r){var a,i,o,s,l,u,c,h,f,p,d,m,y=wv.length,v=!0;for(a=0;a<y;++a)if(i=wv[a]){for(o=i.site,s=(l=i.halfedges).length;s--;)Mv[l[s]]||l.splice(s,1);for(s=0,u=l.length;s<u;)d=(p=ou(i,Mv[l[s]]))[0],m=p[1],h=(c=iu(i,Mv[l[++s%u]]))[0],f=c[1],(Math.abs(d-h)>Tv||Math.abs(m-f)>Tv)&&(l.splice(s,0,Mv.push(tu(o,p,Math.abs(d-t)<Tv&&r-m>Tv?[t,Math.abs(h-t)<Tv?f:r]:Math.abs(m-r)<Tv&&n-d>Tv?[Math.abs(f-r)<Tv?h:n,r]:Math.abs(d-n)<Tv&&m-e>Tv?[n,Math.abs(h-n)<Tv?f:e]:Math.abs(m-e)<Tv&&d-t>Tv?[Math.abs(f-e)<Tv?h:t,e]:null))-1),++u);u&&(v=!1)}if(v){var g,b,_,x=1/0;for(a=0,v=null;a<y;++a)(i=wv[a])&&(_=(g=(o=i.site)[0]-t)*g+(b=o[1]-e)*b)<x&&(x=_,v=i);if(v){var w=[t,e],E=[t,r],M=[n,r],S=[n,e];v.halfedges.push(Mv.push(tu(o=v.site,w,E))-1,Mv.push(tu(o,E,M))-1,Mv.push(tu(o,M,S))-1,Mv.push(tu(o,S,w))-1)}}for(a=0;a<y;++a)(i=wv[a])&&(i.halfedges.length||delete wv[a])}(o,s,l,u)}this.edges=Mv,this.cells=wv,xv=Ev=Mv=wv=null}function vu(t){return function(){return t}}function gu(t,e,n){this.k=t,this.x=e,this.y=n}function bu(t){return t.__zoom||Cv}function _u(){t.event.stopImmediatePropagation()}function xu(){t.event.preventDefault(),t.event.stopImmediatePropagation()}function wu(){return!t.event.button}function Eu(){var t,e,n=this;return n instanceof SVGElement?(t=(n=n.ownerSVGElement||n).width.baseVal.value,e=n.height.baseVal.value):(t=n.clientWidth,e=n.clientHeight),[[0,0],[t,e]]}function Mu(){return this.__zoom||Cv}function Su(){return-t.event.deltaY*(t.event.deltaMode?120:1)/500}function ku(){return"ontouchstart"in this}function Tu(t,e,n){var r=t.invertX(e[0][0])-n[0][0],a=t.invertX(e[1][0])-n[1][0],i=t.invertY(e[0][1])-n[0][1],o=t.invertY(e[1][1])-n[1][1];return t.translate(a>r?(r+a)/2:Math.min(0,r)||Math.max(0,a),o>i?(i+o)/2:Math.min(0,i)||Math.max(0,o))}var Du=n(e),Cu=Du.right,Nu=Du.left,Au=Array.prototype,Pu=Au.slice,Iu=Au.map,Ou=Math.sqrt(50),ju=Math.sqrt(10),Ru=Math.sqrt(2),Lu=Array.prototype.slice,Fu=1,Bu=2,Hu=3,zu=4,qu=1e-6,Gu={value:function(){}};k.prototype=S.prototype={constructor:k,on:function(t,e){var n,r=this._,a=function(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}(t+"",r),i=-1,o=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<o;)if(n=(t=a[i]).type)r[n]=T(r[n],t.name,e);else if(null==e)for(n in r)r[n]=T(r[n],t.name,null);return this}for(;++i<o;)if((n=(t=a[i]).type)&&(n=function(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new k(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var Uu="http://www.w3.org/1999/xhtml",Vu={svg:"http://www.w3.org/2000/svg",xhtml:Uu,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Yu=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var Wu=document.documentElement;if(!Wu.matches){var $u=Wu.webkitMatchesSelector||Wu.msMatchesSelector||Wu.mozMatchesSelector||Wu.oMatchesSelector;Yu=function(t){return function(){return $u.call(this,t)}}}}var Xu=Yu;j.prototype={constructor:j,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Zu="$";G.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Qu={};t.event=null,"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Qu={mouseenter:"mouseover",mouseleave:"mouseout"}));var Ju=[null];ot.prototype=st.prototype={constructor:ot,select:function(t){"function"!=typeof t&&(t=A(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o,s=e[a],l=s.length,u=r[a]=new Array(l),c=0;c<l;++c)(i=s[c])&&(o=t.call(i,i.__data__,c,s))&&("__data__"in i&&(o.__data__=i.__data__),u[c]=o);return new ot(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=I(t));for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,s=e[i],l=s.length,u=0;u<l;++u)(o=s[u])&&(r.push(t.call(o,o.__data__,u,s)),a.push(o));return new ot(r,a)},filter:function(t){"function"!=typeof t&&(t=Xu(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],s=o.length,l=r[a]=[],u=0;u<s;++u)(i=o[u])&&t.call(i,i.__data__,u,o)&&l.push(i);return new ot(r,this._parents)},data:function(t,e){if(!t)return p=new Array(this.size()),u=-1,this.each((function(t){p[++u]=t})),p;var n=e?L:R,r=this._parents,a=this._groups;"function"!=typeof t&&(t=function(t){return function(){return t}}(t));for(var i=a.length,o=new Array(i),s=new Array(i),l=new Array(i),u=0;u<i;++u){var c=r[u],h=a[u],f=h.length,p=t.call(c,c&&c.__data__,u,r),d=p.length,m=s[u]=new Array(d),y=o[u]=new Array(d);n(c,h,m,y,l[u]=new Array(f),p,e);for(var v,g,b=0,_=0;b<d;++b)if(v=m[b]){for(b>=_&&(_=b+1);!(g=y[_])&&++_<d;);v._next=g||null}}return(o=new ot(o,r))._enter=s,o._exit=l,o},enter:function(){return new ot(this._enter||this._groups.map(O),this._parents)},exit:function(){return new ot(this._exit||this._groups.map(O),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),s=0;s<i;++s)for(var l,u=e[s],c=n[s],h=u.length,f=o[s]=new Array(h),p=0;p<h;++p)(l=u[p]||c[p])&&(f[p]=l);for(;s<r;++s)o[s]=e[s];return new ot(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&o!==r.nextSibling&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=F);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,s=n[i],l=s.length,u=a[i]=new Array(l),c=0;c<l;++c)(o=s[c])&&(u[c]=o);u.sort(e)}return new ot(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,s=i.length;o<s;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=D(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof e?n.local?function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}:function(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}:n.local?function(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}:function(t,e){return function(){this.setAttribute(t,e)}})(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof e?function(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}:function(t,e,n){return function(){this.style.setProperty(t,e,n)}})(t,e,null==n?"":n)):H(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?function(t){return function(){delete this[t]}}:"function"==typeof e?function(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}:function(t,e){return function(){this[t]=e}})(t,e)):this.node()[t]},classed:function(t,e){var n=z(t+"");if(arguments.length<2){for(var r=q(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?function(t,e){return function(){(e.apply(this,arguments)?U:V)(this,t)}}:e?function(t){return function(){U(this,t)}}:function(t){return function(){V(this,t)}})(n,e))},text:function(t){return arguments.length?this.each(null==t?Y:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?W:("function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each($)},lower:function(){return this.each(X)},append:function(t){var e="function"==typeof t?t:C(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:C(t),r=null==e?Z:"function"==typeof e?e:A(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Q)},clone:function(t){return this.select(t?K:J)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),o=i.length;if(!(arguments.length<2)){for(s=e?rt:nt,null==n&&(n=!1),r=0;r<o;++r)this.each(s(i[r],e,n));return this}var s=this.node().__on;if(s)for(var l,u=0,c=s.length;u<c;++u)for(r=0,l=s[u];r<o;++r)if((a=i[r]).type===l.type&&a.name===l.name)return l.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return it(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return it(this,t,e)}})(t,e))}};var Ku=0;ct.prototype=ut.prototype={constructor:ct,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}},_t.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var tc="\\s*([+-]?\\d+)\\s*",ec="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",nc="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",rc=/^#([0-9a-f]{3})$/,ac=/^#([0-9a-f]{6})$/,ic=new RegExp("^rgb\\("+[tc,tc,tc]+"\\)$"),oc=new RegExp("^rgb\\("+[nc,nc,nc]+"\\)$"),sc=new RegExp("^rgba\\("+[tc,tc,tc,ec]+"\\)$"),lc=new RegExp("^rgba\\("+[nc,nc,nc,ec]+"\\)$"),uc=new RegExp("^hsl\\("+[ec,nc,nc]+"\\)$"),cc=new RegExp("^hsla\\("+[ec,nc,nc,ec]+"\\)$"),hc={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};St(Tt,Dt,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),St(It,Pt,kt(Tt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new It(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new It(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),St(Rt,jt,kt(Tt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Rt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Rt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new It(Lt(t>=240?t-240:t+120,a,r),Lt(t,a,r),Lt(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var fc=Math.PI/180,pc=180/Math.PI,dc=.95047,mc=1,yc=1.08883,vc=4/29,gc=6/29,bc=3*gc*gc,_c=gc*gc*gc;St(Ht,Bt,kt(Tt,{brighter:function(t){return new Ht(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ht(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return t=mc*qt(t),new It(Gt(3.2404542*(e=dc*qt(e))-1.5371385*t-.4985314*(n=yc*qt(n))),Gt(-.969266*e+1.8760108*t+.041556*n),Gt(.0556434*e-.2040259*t+1.0572252*n),this.opacity)}})),St(Yt,Vt,kt(Tt,{brighter:function(t){return new Yt(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Yt(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Ft(this).rgb()}}));var xc=-.29227,wc=-.90649,Ec=1.97294,Mc=Ec*wc,Sc=1.78277*Ec,kc=1.78277*xc- -.14861*wc;St($t,Wt,kt(Tt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new $t(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new $t(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*fc,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),a=Math.sin(t);return new It(255*(e+n*(-.14861*r+1.78277*a)),255*(e+n*(xc*r+wc*a)),255*(e+n*(Ec*r)),this.opacity)}}));var Tc,Dc,Cc,Nc,Ac,Pc,Ic=function t(e){function n(t,e){var n=r((t=Pt(t)).r,(e=Pt(e)).r),a=r(t.g,e.g),i=r(t.b,e.b),o=ee(t.opacity,e.opacity);return function(e){return t.r=n(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}var r=function(t){return 1==(t=+t)?ee:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Jt(isNaN(e)?n:e)}}(e);return n.gamma=t,n}(1),Oc=ne(Zt),jc=ne(Qt),Rc=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Lc=new RegExp(Rc.source,"g"),Fc=180/Math.PI,Bc={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Hc=he((function(t){return"none"===t?Bc:(Tc||(Tc=document.createElement("DIV"),Dc=document.documentElement,Cc=document.defaultView),Tc.style.transform=t,t=Cc.getComputedStyle(Dc.appendChild(Tc),null).getPropertyValue("transform"),Dc.removeChild(Tc),ce(+(t=t.slice(7,-1).split(","))[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),zc=he((function(t){return null==t?Bc:(Nc||(Nc=document.createElementNS("http://www.w3.org/2000/svg","g")),Nc.setAttribute("transform",t),(t=Nc.transform.baseVal.consolidate())?ce((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Bc)}),", ",")",")"),qc=Math.SQRT2,Gc=2,Uc=4,Vc=1e-12,Yc=de(te),Wc=de(ee),$c=me(te),Xc=me(ee),Zc=ye(te),Qc=ye(ee),Jc=0,Kc=0,th=0,eh=1e3,nh=0,rh=0,ah=0,ih="object"==typeof performance&&performance.now?performance:Date,oh="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};be.prototype=_e.prototype={constructor:be,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?ve():+n)+(null==e?0:+e),this._next||Pc===this||(Pc?Pc._next=this:Ac=this,Pc=this),this._call=t,this._time=n,Me()},stop:function(){this._call&&(this._call=null,this._time=1/0,Me())}};var sh=S("start","end","interrupt"),lh=[],uh=0,ch=1,hh=2,fh=3,ph=4,dh=5,mh=6,yh=st.prototype.constructor,vh=0,gh=st.prototype;Ie.prototype=Oe.prototype={constructor:Ie,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=A(t));for(var r=this._groups,a=r.length,i=new Array(a),o=0;o<a;++o)for(var s,l,u=r[o],c=u.length,h=i[o]=new Array(c),f=0;f<c;++f)(s=u[f])&&(l=t.call(s,s.__data__,f,u))&&("__data__"in s&&(l.__data__=s.__data__),h[f]=l,ke(h[f],e,n,f,h,Ce(s,n)));return new Ie(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=I(t));for(var r=this._groups,a=r.length,i=[],o=[],s=0;s<a;++s)for(var l,u=r[s],c=u.length,h=0;h<c;++h)if(l=u[h]){for(var f,p=t.call(l,l.__data__,h,u),d=Ce(l,n),m=0,y=p.length;m<y;++m)(f=p[m])&&ke(f,e,n,m,p,d);i.push(p),o.push(l)}return new Ie(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=Xu(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],s=o.length,l=r[a]=[],u=0;u<s;++u)(i=o[u])&&t.call(i,i.__data__,u,o)&&l.push(i);return new Ie(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),s=0;s<i;++s)for(var l,u=e[s],c=n[s],h=u.length,f=o[s]=new Array(h),p=0;p<h;++p)(l=u[p]||c[p])&&(f[p]=l);for(;s<r;++s)o[s]=e[s];return new Ie(o,this._parents,this._name,this._id)},selection:function(){return new yh(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=je(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,s=r[i],l=s.length,u=0;u<l;++u)if(o=s[u]){var c=Ce(o,e);ke(o,t,n,u,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Ie(r,this._parents,t,n)},call:gh.call,nodes:gh.nodes,node:gh.node,size:gh.size,empty:gh.empty,each:gh.each,on:function(t,e){var n=this._id;return arguments.length<2?Ce(this.node(),n).on.on(t):this.each(function(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Te:De;return function(){var o=i(this,t),s=o.on;s!==r&&(a=(r=s).copy()).on(e,n),o.on=a}}(n,t,e))},attr:function(t,e){var n=D(t),r="transform"===n?zc:Pe;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var r,a,i;return function(){var o,s=n(this);if(null!=s)return(o=this.getAttributeNS(t.space,t.local))===s?null:o===r&&s===a?i:i=e(r=o,a=s);this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var r,a,i;return function(){var o,s=n(this);if(null!=s)return(o=this.getAttribute(t))===s?null:o===r&&s===a?i:i=e(r=o,a=s);this.removeAttribute(t)}})(n,r,Ae(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var r,a;return function(){var i=this.getAttributeNS(t.space,t.local);return i===n?null:i===r?a:a=e(r=i,n)}}:function(t,e,n){var r,a;return function(){var i=this.getAttribute(t);return i===n?null:i===r?a:a=e(r=i,n)}})(n,r,e+""))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=D(t);return this.tween(n,(r.local?function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttributeNS(t.space,t.local,r(e))}}return n._value=e,n}:function(t,e){function n(){var n=this,r=e.apply(n,arguments);return r&&function(e){n.setAttribute(t,r(e))}}return n._value=e,n})(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Hc:Pe;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=H(this,t),o=(this.style.removeProperty(t),H(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof e?function(t,e,n){var r,a,i;return function(){var o=H(this,t),s=n(this);return null==s&&(this.style.removeProperty(t),s=H(this,t)),o===s?null:o===r&&s===a?i:i=e(r=o,a=s)}}(t,r,Ae(this,"style."+t,e)):function(t,e,n){var r,a;return function(){var i=H(this,t);return i===n?null:i===r?a:a=e(r=i,n)}}(t,r,e+""),n)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){function r(){var r=this,a=e.apply(r,arguments);return a&&function(e){r.style.setProperty(t,a(e),n)}}return r._value=e,r}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Ae(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=Ce(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?function(t,e){var n,r;return function(){var a=De(this,t),i=a.tween;if(i!==n)for(var o=0,s=(r=n=i).length;o<s;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}:function(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=De(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var s={name:e,value:n},l=0,u=a.length;l<u;++l)if(a[l].name===e){a[l]=s;break}l===u&&a.push(s)}i.tween=a}})(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){Te(this,t).delay=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){Te(this,t).delay=e}})(e,t)):Ce(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?function(t,e){return function(){De(this,t).duration=+e.apply(this,arguments)}}:function(t,e){return e=+e,function(){De(this,t).duration=e}})(e,t)):Ce(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){De(this,t).ease=e}}(e,t)):Ce(this.node(),e).ease}};var bh=function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n}(3),_h=function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),xh=function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),wh=Math.PI,Eh=wh/2,Mh=4/11,Sh=6/11,kh=8/11,Th=.75,Dh=9/11,Ch=10/11,Nh=.9375,Ah=21/22,Ph=63/64,Ih=1/Mh/Mh,Oh=function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n}(1.70158),jh=function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),Rh=function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158),Lh=2*Math.PI,Fh=function t(e,n){function r(t){return e*Math.pow(2,10*--t)*Math.sin((a-t)/n)}var a=Math.asin(1/(e=Math.max(1,e)))*(n/=Lh);return r.amplitude=function(e){return t(e,n*Lh)},r.period=function(n){return t(e,n)},r}(1,.3),Bh=function t(e,n){function r(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+a)/n)}var a=Math.asin(1/(e=Math.max(1,e)))*(n/=Lh);return r.amplitude=function(e){return t(e,n*Lh)},r.period=function(n){return t(e,n)},r}(1,.3),Hh=function t(e,n){function r(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((a-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((a+t)/n))/2}var a=Math.asin(1/(e=Math.max(1,e)))*(n/=Lh);return r.amplitude=function(e){return t(e,n*Lh)},r.period=function(n){return t(e,n)},r}(1,.3),zh={time:null,delay:0,duration:250,ease:Le};st.prototype.interrupt=function(t){return this.each((function(){Ne(this,t)}))},st.prototype.transition=function(t){var e,n;t instanceof Ie?(e=t._id,t=t._name):(e=je(),(n=zh).time=ve(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,s=r[i],l=s.length,u=0;u<l;++u)(o=s[u])&&ke(o,t,e,u,s,n||qe(o,e));return new Ie(r,this._parents,t,e)};var qh=[null],Gh={name:"drag"},Uh={name:"space"},Vh={name:"handle"},Yh={name:"center"},Wh={name:"x",handles:["e","w"].map(Ye),input:function(t,e){return t&&[[t[0],e[0][1]],[t[1],e[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},$h={name:"y",handles:["n","s"].map(Ye),input:function(t,e){return t&&[[e[0][0],t[0]],[e[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},Xh={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(Ye),input:function(t){return t},output:function(t){return t}},Zh={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Qh={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Jh={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},Kh={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},tf={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1},ef=Math.cos,nf=Math.sin,rf=Math.PI,af=rf/2,of=2*rf,sf=Math.max,lf=Array.prototype.slice,uf=Math.PI,cf=2*uf,hf=cf-1e-6;Ke.prototype=tn.prototype={constructor:Ke,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,s=n-t,l=r-e,u=i-t,c=o-e,h=u*u+c*c;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(c*s-l*u)>1e-6&&a){var f=n-i,p=r-o,d=s*s+l*l,m=f*f+p*p,y=Math.sqrt(d),v=Math.sqrt(h),g=a*Math.tan((uf-Math.acos((d+h-m)/(2*y*v)))/2),b=g/v,_=g/y;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*u)+","+(e+b*c)),this._+="A"+a+","+a+",0,0,"+ +(c*f>u*p)+","+(this._x1=t+_*s)+","+(this._y1=e+_*l)}else this._+="L"+(this._x1=t)+","+(this._y1=e)},arc:function(t,e,n,r,a,i){t=+t,e=+e;var o=(n=+n)*Math.cos(r),s=n*Math.sin(r),l=t+o,u=e+s,c=1^i,h=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+l+","+u:(Math.abs(this._x1-l)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+l+","+u),n&&(h<0&&(h=h%cf+cf),h>hf?this._+="A"+n+","+n+",0,1,"+c+","+(t-o)+","+(e-s)+"A"+n+","+n+",0,1,"+c+","+(this._x1=l)+","+(this._y1=u):h>1e-6&&(this._+="A"+n+","+n+",0,"+ +(h>=uf)+","+c+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}},sn.prototype=ln.prototype={constructor:sn,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var ff=ln.prototype;pn.prototype=dn.prototype={constructor:pn,has:ff.has,add:function(t){return this["$"+(t+="")]=t,this},remove:ff.remove,clear:ff.clear,values:ff.keys,size:ff.size,empty:ff.empty,each:ff.each};var pf={},df={},mf=34,yf=10,vf=13,gf=yn(","),bf=gf.parse,_f=gf.parseRows,xf=gf.format,wf=gf.formatRows,Ef=yn("\t"),Mf=Ef.parse,Sf=Ef.parseRows,kf=Ef.format,Tf=Ef.formatRows,Df=En.prototype=Mn.prototype;Df.copy=function(){var t,e,n=new Mn(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return n;if(!r.length)return n._root=Sn(r),n;for(t=[{source:r,target:n._root=new Array(4)}];r=t.pop();)for(var a=0;a<4;++a)(e=r.source[a])&&(e.length?t.push({source:e,target:r.target[a]=new Array(4)}):r.target[a]=Sn(e));return n},Df.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return bn(this.cover(e,n),e,n,t)},Df.addAll=function(t){var e,n,r,a,i=t.length,o=new Array(i),s=new Array(i),l=1/0,u=1/0,c=-1/0,h=-1/0;for(n=0;n<i;++n)isNaN(r=+this._x.call(null,e=t[n]))||isNaN(a=+this._y.call(null,e))||(o[n]=r,s[n]=a,r<l&&(l=r),r>c&&(c=r),a<u&&(u=a),a>h&&(h=a));for(c<l&&(l=this._x0,c=this._x1),h<u&&(u=this._y0,h=this._y1),this.cover(l,u).cover(c,h),n=0;n<i;++n)bn(this,o[n],s[n],t[n]);return this},Df.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,r=this._y0,a=this._x1,i=this._y1;if(isNaN(n))a=(n=Math.floor(t))+1,i=(r=Math.floor(e))+1;else{if(!(n>t||t>a||r>e||e>i))return this;var o,s,l=a-n,u=this._root;switch(s=(e<(r+i)/2)<<1|t<(n+a)/2){case 0:do{(o=new Array(4))[s]=u,u=o}while(i=r+(l*=2),t>(a=n+l)||e>i);break;case 1:do{(o=new Array(4))[s]=u,u=o}while(i=r+(l*=2),(n=a-l)>t||e>i);break;case 2:do{(o=new Array(4))[s]=u,u=o}while(r=i-(l*=2),t>(a=n+l)||r>e);break;case 3:do{(o=new Array(4))[s]=u,u=o}while(r=i-(l*=2),(n=a-l)>t||r>e)}this._root&&this._root.length&&(this._root=u)}return this._x0=n,this._y0=r,this._x1=a,this._y1=i,this},Df.data=function(){var t=[];return this.visit((function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)})),t},Df.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Df.find=function(t,e,n){var r,a,i,o,s,l,u,c=this._x0,h=this._y0,f=this._x1,p=this._y1,d=[],m=this._root;for(m&&d.push(new _n(m,c,h,f,p)),null==n?n=1/0:(c=t-n,h=e-n,f=t+n,p=e+n,n*=n);l=d.pop();)if(!(!(m=l.node)||(a=l.x0)>f||(i=l.y0)>p||(o=l.x1)<c||(s=l.y1)<h))if(m.length){var y=(a+o)/2,v=(i+s)/2;d.push(new _n(m[3],y,v,o,s),new _n(m[2],a,v,y,s),new _n(m[1],y,i,o,v),new _n(m[0],a,i,y,v)),(u=(e>=v)<<1|t>=y)&&(l=d[d.length-1],d[d.length-1]=d[d.length-1-u],d[d.length-1-u]=l)}else{var g=t-+this._x.call(null,m.data),b=e-+this._y.call(null,m.data),_=g*g+b*b;if(_<n){var x=Math.sqrt(n=_);c=t-x,h=e-x,f=t+x,p=e+x,r=m.data}}return r},Df.remove=function(t){if(isNaN(i=+this._x.call(null,t))||isNaN(o=+this._y.call(null,t)))return this;var e,n,r,a,i,o,s,l,u,c,h,f,p=this._root,d=this._x0,m=this._y0,y=this._x1,v=this._y1;if(!p)return this;if(p.length)for(;;){if((u=i>=(s=(d+y)/2))?d=s:y=s,(c=o>=(l=(m+v)/2))?m=l:v=l,e=p,!(p=p[h=c<<1|u]))return this;if(!p.length)break;(e[h+1&3]||e[h+2&3]||e[h+3&3])&&(n=e,f=h)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(a=p.next)&&delete p.next,r?(a?r.next=a:delete r.next,this):e?(a?e[h]=a:delete e[h],(p=e[0]||e[1]||e[2]||e[3])&&p===(e[3]||e[2]||e[1]||e[0])&&!p.length&&(n?n[f]=p:this._root=p),this):(this._root=a,this)},Df.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},Df.root=function(){return this._root},Df.size=function(){var t=0;return this.visit((function(e){if(!e.length)do{++t}while(e=e.next)})),t},Df.visit=function(t){var e,n,r,a,i,o,s=[],l=this._root;for(l&&s.push(new _n(l,this._x0,this._y0,this._x1,this._y1));e=s.pop();)if(!t(l=e.node,r=e.x0,a=e.y0,i=e.x1,o=e.y1)&&l.length){var u=(r+i)/2,c=(a+o)/2;(n=l[3])&&s.push(new _n(n,u,c,i,o)),(n=l[2])&&s.push(new _n(n,r,c,u,o)),(n=l[1])&&s.push(new _n(n,u,a,i,c)),(n=l[0])&&s.push(new _n(n,r,a,u,c))}return this},Df.visitAfter=function(t){var e,n=[],r=[];for(this._root&&n.push(new _n(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var a=e.node;if(a.length){var i,o=e.x0,s=e.y0,l=e.x1,u=e.y1,c=(o+l)/2,h=(s+u)/2;(i=a[0])&&n.push(new _n(i,o,s,c,h)),(i=a[1])&&n.push(new _n(i,c,s,l,h)),(i=a[2])&&n.push(new _n(i,o,h,c,u)),(i=a[3])&&n.push(new _n(i,c,h,l,u))}r.push(e)}for(;e=r.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},Df.x=function(t){return arguments.length?(this._x=t,this):this._x},Df.y=function(t){return arguments.length?(this._y=t,this):this._y};var Cf,Nf=Math.PI*(3-Math.sqrt(5)),Af={"":function(t,e){t:for(var n,r=(t=t.toPrecision(e)).length,a=1,i=-1;a<r;++a)switch(t[a]){case".":i=n=a;break;case"0":0===i&&(i=a),n=a;break;case"e":break t;default:i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t},"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return On(100*t,e)},r:On,s:function(t,e){var n=Pn(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(Cf=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+Pn(t,Math.max(0,e+i-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Pf=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;jn.prototype=Rn.prototype,Rn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var If,Of=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Bn({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Un.prototype={constructor:Un,reset:function(){this.s=this.t=0},add:function(t){Vn(fp,t,this.t),Vn(this,fp.s,this.s),this.s?this.t+=fp.t:this.s=fp.t},valueOf:function(){return this.s}};var jf,Rf,Lf,Ff,Bf,Hf,zf,qf,Gf,Uf,Vf,Yf,Wf,$f,Xf,Zf,Qf,Jf,Kf,tp,ep,np,rp,ap,ip,op,sp,lp,up,cp,hp,fp=new Un,pp=1e-6,dp=Math.PI,mp=dp/2,yp=dp/4,vp=2*dp,gp=180/dp,bp=dp/180,_p=Math.abs,xp=Math.atan,wp=Math.atan2,Ep=Math.cos,Mp=Math.ceil,Sp=Math.exp,kp=Math.log,Tp=Math.pow,Dp=Math.sin,Cp=Math.sign||function(t){return t>0?1:t<0?-1:0},Np=Math.sqrt,Ap=Math.tan,Pp={Feature:function(t,e){Zn(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,a=n.length;++r<a;)Zn(n[r].geometry,e)}},Ip={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){Qn(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)Qn(n[r],e,0)},Polygon:function(t,e){Jn(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)Jn(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,a=n.length;++r<a;)Zn(n[r],e)}},Op=Gn(),jp=Gn(),Rp={point:Xn,lineStart:Xn,lineEnd:Xn,polygonStart:function(){Op.reset(),Rp.lineStart=tr,Rp.lineEnd=er},polygonEnd:function(){var t=+Op;jp.add(t<0?vp+t:t),this.lineStart=this.lineEnd=this.point=Xn},sphere:function(){jp.add(vp)}},Lp=Gn(),Fp={point:hr,lineStart:pr,lineEnd:dr,polygonStart:function(){Fp.point=mr,Fp.lineStart=yr,Fp.lineEnd=vr,Lp.reset(),Rp.polygonStart()},polygonEnd:function(){Rp.polygonEnd(),Fp.point=hr,Fp.lineStart=pr,Fp.lineEnd=dr,Op<0?(Hf=-(qf=180),zf=-(Gf=90)):Lp>pp?Gf=90:Lp<-pp&&(zf=-90),Xf[0]=Hf,Xf[1]=qf}},Bp={sphere:Xn,point:xr,lineStart:Er,lineEnd:kr,polygonStart:function(){Bp.lineStart=Tr,Bp.lineEnd=Dr},polygonEnd:function(){Bp.lineStart=Er,Bp.lineEnd=kr}};Ir.invert=Ir;var Hp,zp,qp,Gp,Up,Vp,Yp,Wp,$p,Xp,Zp,Qp=Gn(),Jp=Wr((function(){return!0}),(function(t){var e,n=NaN,r=NaN,a=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(i,o){var s=i>0?dp:-dp,l=_p(i-n);_p(l-dp)<pp?(t.point(n,r=(r+o)/2>0?mp:-mp),t.point(a,r),t.lineEnd(),t.lineStart(),t.point(s,r),t.point(i,r),e=0):a!==s&&l>=dp&&(_p(n-a)<pp&&(n-=a*pp),_p(i-s)<pp&&(i-=s*pp),r=function(t,e,n,r){var a,i,o=Dp(t-n);return _p(o)>pp?xp((Dp(e)*(i=Ep(r))*Dp(n)-Dp(r)*(a=Ep(e))*Dp(t))/(a*i*o)):(e+r)/2}(n,r,i,o),t.point(a,r),t.lineEnd(),t.lineStart(),t.point(s,r),e=0),t.point(n=i,r=o),a=s},lineEnd:function(){t.lineEnd(),n=r=NaN},clean:function(){return 2-e}}}),(function(t,e,n,r){var a;if(null==t)a=n*mp,r.point(-dp,a),r.point(0,a),r.point(dp,a),r.point(dp,0),r.point(dp,-a),r.point(0,-a),r.point(-dp,-a),r.point(-dp,0),r.point(-dp,a);else if(_p(t[0]-e[0])>pp){var i=t[0]<e[0]?dp:-dp;a=n*i/2,r.point(-i,a),r.point(0,a),r.point(i,a)}else r.point(e[0],e[1])}),[-dp,-mp]),Kp=1e9,td=-Kp,ed=Gn(),nd={sphere:Xn,point:Xn,lineStart:function(){nd.point=Kr,nd.lineEnd=Jr},lineEnd:Xn,polygonStart:Xn,polygonEnd:Xn},rd=[null,null],ad={type:"LineString",coordinates:rd},id={Feature:function(t,e){return ra(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,a=n.length;++r<a;)if(ra(n[r].geometry,e))return!0;return!1}},od={Sphere:function(){return!0},Point:function(t,e){return aa(t.coordinates,e)},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)if(aa(n[r],e))return!0;return!1},LineString:function(t,e){return ia(t.coordinates,e)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)if(ia(n[r],e))return!0;return!1},Polygon:function(t,e){return oa(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,a=n.length;++r<a;)if(oa(n[r],e))return!0;return!1},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,a=n.length;++r<a;)if(ra(n[r],e))return!0;return!1}},sd=Gn(),ld=Gn(),ud={point:Xn,lineStart:Xn,lineEnd:Xn,polygonStart:function(){ud.lineStart=pa,ud.lineEnd=ya},polygonEnd:function(){ud.lineStart=ud.lineEnd=ud.point=Xn,sd.add(_p(ld)),ld.reset()},result:function(){var t=sd/2;return sd.reset(),t}},cd=1/0,hd=cd,fd=-cd,pd=fd,dd={point:function(t,e){t<cd&&(cd=t),t>fd&&(fd=t),e<hd&&(hd=e),e>pd&&(pd=e)},lineStart:Xn,lineEnd:Xn,polygonStart:Xn,polygonEnd:Xn,result:function(){var t=[[cd,hd],[fd,pd]];return fd=pd=-(hd=cd=1/0),t}},md=0,yd=0,vd=0,gd=0,bd=0,_d=0,xd=0,wd=0,Ed=0,Md={point:va,lineStart:ga,lineEnd:xa,polygonStart:function(){Md.lineStart=wa,Md.lineEnd=Ea},polygonEnd:function(){Md.point=va,Md.lineStart=ga,Md.lineEnd=xa},result:function(){var t=Ed?[xd/Ed,wd/Ed]:_d?[gd/_d,bd/_d]:vd?[md/vd,yd/vd]:[NaN,NaN];return md=yd=vd=gd=bd=_d=xd=wd=Ed=0,t}};ka.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,vp)}},result:Xn};var Sd,kd,Td,Dd,Cd,Nd=Gn(),Ad={point:Xn,lineStart:function(){Ad.point=Ta},lineEnd:function(){Sd&&Da(kd,Td),Ad.point=Xn},polygonStart:function(){Sd=!0},polygonEnd:function(){Sd=null},result:function(){var t=+Nd;return Nd.reset(),t}};Ca.prototype={_radius:4.5,_circle:Na(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=Na(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}},Pa.prototype={constructor:Pa,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Pd=16,Id=Ep(30*bp),Od=Aa({point:function(t,e){this.stream.point(t*bp,e*bp)}}),jd=Va((function(t){return Np(2/(1+t))}));jd.invert=Ya((function(t){return 2*Wn(t/2)}));var Rd=Va((function(t){return(t=Yn(t))&&t/Dp(t)}));Rd.invert=Ya((function(t){return t})),Wa.invert=function(t,e){return[t,2*xp(Sp(e))-mp]},Qa.invert=Qa,Ka.invert=Ya(xp),ei.invert=function(t,e){var n,r=e,a=25;do{var i=r*r,o=i*i;r-=n=(r*(1.007226+i*(.015085+o*(.028874*i-.044475-.005916*o)))-e)/(1.007226+i*(.045255+o*(.259866*i-.311325-.005916*11*o)))}while(_p(n)>pp&&--a>0);return[t/(.8707+(i=r*r)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),r]},ni.invert=Ya(Wn),ri.invert=Ya((function(t){return 2*xp(t)})),ai.invert=function(t,e){return[-e,2*xp(Sp(t))-mp]},pi.prototype=ui.prototype={constructor:pi,count:function(){return this.eachAfter(li)},each:function(t){var e,n,r,a,i=this,o=[i];do{for(e=o.reverse(),o=[];i=e.pop();)if(t(i),n=i.children)for(r=0,a=n.length;r<a;++r)o.push(n[r])}while(o.length);return this},eachAfter:function(t){for(var e,n,r,a=this,i=[a],o=[];a=i.pop();)if(o.push(a),e=a.children)for(n=0,r=e.length;n<r;++n)i.push(e[n]);for(;a=o.pop();)t(a);return this},eachBefore:function(t){for(var e,n,r=this,a=[r];r=a.pop();)if(t(r),e=r.children)for(n=e.length-1;n>=0;--n)a.push(e[n]);return this},sum:function(t){return this.eachAfter((function(e){for(var n=+t(e.data)||0,r=e.children,a=r&&r.length;--a>=0;)n+=r[a].value;e.value=n}))},sort:function(t){return this.eachBefore((function(e){e.children&&e.children.sort(t)}))},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),r=e.ancestors(),a=null;for(t=n.pop(),e=r.pop();t===e;)a=t,t=n.pop(),e=r.pop();return a}(e,t),r=[e];e!==n;)e=e.parent,r.push(e);for(var a=r.length;t!==n;)r.splice(a,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each((function(e){t.push(e)})),t},leaves:function(){var t=[];return this.eachBefore((function(e){e.children||t.push(e)})),t},links:function(){var t=this,e=[];return t.each((function(n){n!==t&&e.push({source:n.parent,target:n})})),e},copy:function(){return ui(this).eachBefore(hi)}};var Ld=Array.prototype.slice,Fd={depth:-1},Bd={};zi.prototype=Object.create(pi.prototype);var Hd=(1+Math.sqrt(5))/2,zd=function t(e){function n(t,n,r,a,i){Gi(e,t,n,r,a,i)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(Hd),qd=function t(e){function n(t,n,r,a,i){if((o=t._squarify)&&o.ratio===e)for(var o,s,l,u,c,h=-1,f=o.length,p=t.value;++h<f;){for(l=(s=o[h]).children,u=s.value=0,c=l.length;u<c;++u)s.value+=l[u].value;s.dice?Ii(s,n,r,a,r+=(i-r)*s.value/p):qi(s,n,r,n+=(a-n)*s.value/p,i),p-=s.value}else t._squarify=o=Gi(e,t,n,r,a,i),o.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(Hd),Gd=[].slice,Ud={};Wi.prototype=Qi.prototype={constructor:Wi,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var e=Gd.call(arguments,1);return e.push(t),++this._waiting,this._tasks.push(e),$i(this),this},abort:function(){return null==this._error&&Xi(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(e,n){t.apply(null,[e].concat(n))},Zi(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,Zi(this),this}};var Vd=function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(Ji),Yd=function t(e){function n(t,n){var r,a;return t=null==t?0:+t,n=null==n?1:+n,function(){var i;if(null!=r)i=r,r=null;else do{r=2*e()-1,i=2*e()-1,a=r*r+i*i}while(!a||a>1);return t+n*i*Math.sqrt(-2*Math.log(a)/a)}}return n.source=t,n}(Ji),Wd=function t(e){function n(){var t=Yd.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(Ji),$d=function t(e){function n(t){return function(){for(var n=0,r=0;r<t;++r)n+=e();return n}}return n.source=t,n}(Ji),Xd=function t(e){function n(t){var n=$d.source(e)(t);return function(){return n()/t}}return n.source=t,n}(Ji),Zd=function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(Ji),Qd=to("text/html",(function(t){return document.createRange().createContextualFragment(t.responseText)})),Jd=to("application/json",(function(t){return JSON.parse(t.responseText)})),Kd=to("text/plain",(function(t){return t.responseText})),tm=to("application/xml",(function(t){var e=t.responseXML;if(!e)throw new Error("parse error");return e})),em=eo("text/csv",bf),nm=eo("text/tab-separated-values",Mf),rm=Array.prototype,am=rm.map,im=rm.slice,om={name:"implicit"},sm=[0,1],lm=new Date,um=new Date,cm=wo((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));cm.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?wo((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):cm:null};var hm=cm.range,fm=6e4,pm=6048e5,dm=wo((function(t){t.setTime(1e3*Math.floor(t/1e3))}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),mm=dm.range,ym=wo((function(t){t.setTime(Math.floor(t/fm)*fm)}),(function(t,e){t.setTime(+t+e*fm)}),(function(t,e){return(e-t)/fm}),(function(t){return t.getMinutes()})),vm=ym.range,gm=wo((function(t){var e=t.getTimezoneOffset()*fm%36e5;e<0&&(e+=36e5),t.setTime(36e5*Math.floor((+t-e)/36e5)+e)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()})),bm=gm.range,_m=wo((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*fm)/864e5}),(function(t){return t.getDate()-1})),xm=_m.range,wm=Eo(0),Em=Eo(1),Mm=Eo(2),Sm=Eo(3),km=Eo(4),Tm=Eo(5),Dm=Eo(6),Cm=wm.range,Nm=Em.range,Am=Mm.range,Pm=Sm.range,Im=km.range,Om=Tm.range,jm=Dm.range,Rm=wo((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),Lm=Rm.range,Fm=wo((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));Fm.every=function(t){return isFinite(t=Math.floor(t))&&t>0?wo((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var Bm=Fm.range,Hm=wo((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+e*fm)}),(function(t,e){return(e-t)/fm}),(function(t){return t.getUTCMinutes()})),zm=Hm.range,qm=wo((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()})),Gm=qm.range,Um=wo((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1})),Vm=Um.range,Ym=Mo(0),Wm=Mo(1),$m=Mo(2),Xm=Mo(3),Zm=Mo(4),Qm=Mo(5),Jm=Mo(6),Km=Ym.range,ty=Wm.range,ey=$m.range,ny=Xm.range,ry=Zm.range,ay=Qm.range,iy=Jm.range,oy=wo((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),sy=oy.range,ly=wo((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));ly.every=function(t){return isFinite(t=Math.floor(t))&&t>0?wo((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var uy,cy=ly.range,hy={"-":"",_:" ",0:"0"},fy=/^\s*\d+/,py=/^%/,dy=/[\\^$*+?|[\]().{}]/g;js({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var my="%Y-%m-%dT%H:%M:%S.%LZ",yy=Date.prototype.toISOString?function(t){return t.toISOString()}:t.utcFormat(my),vy=+new Date("2000-01-01T00:00:00.000Z")?function(t){var e=new Date(t);return isNaN(e)?null:e}:t.utcParse(my),gy=1e3,by=60*gy,_y=60*by,xy=24*_y,wy=7*xy,Ey=30*xy,My=365*xy,Sy=Bs("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),ky=Bs("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),Ty=Bs("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),Dy=Bs("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),Cy=Qc(Wt(300,.5,0),Wt(-240,.5,1)),Ny=Qc(Wt(-100,.75,.35),Wt(80,1.5,.8)),Ay=Qc(Wt(260,.75,.35),Wt(80,1.5,.8)),Py=Wt(),Iy=Hs(Bs("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Oy=Hs(Bs("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),jy=Hs(Bs("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ry=Hs(Bs("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Ly=Math.abs,Fy=Math.atan2,By=Math.cos,Hy=Math.max,zy=Math.min,qy=Math.sin,Gy=Math.sqrt,Uy=1e-12,Vy=Math.PI,Yy=Vy/2,Wy=2*Vy;Xs.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var $y=al(Zs);rl.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};var Xy=Array.prototype.slice,Zy={draw:function(t,e){var n=Math.sqrt(e/Vy);t.moveTo(n,0),t.arc(0,0,n,0,Wy)}},Qy={draw:function(t,e){var n=Math.sqrt(e/5)/2;t.moveTo(-3*n,-n),t.lineTo(-n,-n),t.lineTo(-n,-3*n),t.lineTo(n,-3*n),t.lineTo(n,-n),t.lineTo(3*n,-n),t.lineTo(3*n,n),t.lineTo(n,n),t.lineTo(n,3*n),t.lineTo(-n,3*n),t.lineTo(-n,n),t.lineTo(-3*n,n),t.closePath()}},Jy=Math.sqrt(1/3),Ky=2*Jy,tv={draw:function(t,e){var n=Math.sqrt(e/Ky),r=n*Jy;t.moveTo(0,-n),t.lineTo(r,0),t.lineTo(0,n),t.lineTo(-r,0),t.closePath()}},ev=Math.sin(Vy/10)/Math.sin(7*Vy/10),nv=Math.sin(Wy/10)*ev,rv=-Math.cos(Wy/10)*ev,av={draw:function(t,e){var n=Math.sqrt(.8908130915292852*e),r=nv*n,a=rv*n;t.moveTo(0,-n),t.lineTo(r,a);for(var i=1;i<5;++i){var o=Wy*i/5,s=Math.cos(o),l=Math.sin(o);t.lineTo(l*n,-s*n),t.lineTo(s*r-l*a,l*r+s*a)}t.closePath()}},iv={draw:function(t,e){var n=Math.sqrt(e),r=-n/2;t.rect(r,r,n,n)}},ov=Math.sqrt(3),sv={draw:function(t,e){var n=-Math.sqrt(e/(3*ov));t.moveTo(0,2*n),t.lineTo(-ov*n,-n),t.lineTo(ov*n,-n),t.closePath()}},lv=Math.sqrt(3)/2,uv=1/Math.sqrt(12),cv=3*(uv/2+1),hv={draw:function(t,e){var n=Math.sqrt(e/cv),r=n/2,a=n*uv,i=r,o=n*uv+n,s=-i,l=o;t.moveTo(r,a),t.lineTo(i,o),t.lineTo(s,l),t.lineTo(-.5*r-lv*a,lv*r+-.5*a),t.lineTo(-.5*i-lv*o,lv*i+-.5*o),t.lineTo(-.5*s-lv*l,lv*s+-.5*l),t.lineTo(-.5*r+lv*a,-.5*a-lv*r),t.lineTo(-.5*i+lv*o,-.5*o-lv*i),t.lineTo(-.5*s+lv*l,-.5*l-lv*s),t.closePath()}},fv=[Zy,Qy,tv,iv,av,sv,hv];vl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:yl(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:yl(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},gl.prototype={areaStart:ml,areaEnd:ml,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:yl(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},bl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,r):this._context.moveTo(n,r);break;case 3:this._point=4;default:yl(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},_l.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var r,a=t[0],i=e[0],o=t[n]-a,s=e[n]-i,l=-1;++l<=n;)r=l/n,this._basis.point(this._beta*t[l]+(1-this._beta)*(a+r*o),this._beta*e[l]+(1-this._beta)*(i+r*s));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};var pv=function t(e){function n(t){return 1===e?new vl(t):new _l(t,e)}return n.beta=function(e){return t(+e)},n}(.85);wl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:xl(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:xl(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var dv=function t(e){function n(t){return new wl(t,e)}return n.tension=function(e){return t(+e)},n}(0);El.prototype={areaStart:ml,areaEnd:ml,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:xl(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var mv=function t(e){function n(t){return new El(t,e)}return n.tension=function(e){return t(+e)},n}(0);Ml.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:xl(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var yv=function t(e){function n(t){return new Ml(t,e)}return n.tension=function(e){return t(+e)},n}(0);kl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Sl(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var vv=function t(e){function n(t){return e?new kl(t,e):new wl(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);Tl.prototype={areaStart:ml,areaEnd:ml,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Sl(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var gv=function t(e){function n(t){return e?new Tl(t,e):new El(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);Dl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Sl(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};var bv=function t(e){function n(t){return e?new Dl(t,e):new Ml(t,0)}return n.alpha=function(e){return t(+e)},n}(.5);Cl.prototype={areaStart:ml,areaEnd:ml,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}},Ol.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Il(this,this._t0,Pl(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,Il(this,Pl(this,n=Al(this,t,e)),n);break;default:Il(this,this._t0,n=Al(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(jl.prototype=Object.create(Ol.prototype)).point=function(t,e){Ol.prototype.point.call(this,e,t)},Rl.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,r,a,i){this._context.bezierCurveTo(e,t,r,n,i,a)}},Ll.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var r=Fl(t),a=Fl(e),i=0,o=1;o<n;++i,++o)this._context.bezierCurveTo(r[0][i],a[0][i],r[1][i],a[1][i],t[o],e[o]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}},Bl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}},$l.prototype={constructor:$l,insert:function(t,e){var n,r,a;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=Jl(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(r=n.U).L?(a=r.R)&&a.C?(n.C=a.C=!1,r.C=!0,t=r):(t===n.R&&(Zl(this,n),n=(t=n).U),n.C=!1,r.C=!0,Ql(this,r)):(a=r.L)&&a.C?(n.C=a.C=!1,r.C=!0,t=r):(t===n.L&&(Ql(this,n),n=(t=n).U),n.C=!1,r.C=!0,Zl(this,r)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,r,a=t.U,i=t.L,o=t.R;if(n=i?o?Jl(o):i:o,a?a.L===t?a.L=n:a.R=n:this._=n,i&&o?(r=n.C,n.C=t.C,n.L=i,i.U=n,n!==o?(a=n.U,n.U=t.U,t=n.R,a.L=t,n.R=o,o.U=n):(n.U=a,a=n,t=n.R)):(r=t.C,t=n),t&&(t.U=a),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===a.L){if((e=a.R).C&&(e.C=!1,a.C=!0,Zl(this,a),e=a.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,Ql(this,e),e=a.R),e.C=a.C,a.C=e.R.C=!1,Zl(this,a),t=this._;break}}else if((e=a.L).C&&(e.C=!1,a.C=!0,Ql(this,a),e=a.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,Zl(this,e),e=a.L),e.C=a.C,a.C=e.L.C=!1,Ql(this,a),t=this._;break}e.C=!0,t=a,a=a.U}while(!t.C);t&&(t.C=!1)}}};var _v,xv,wv,Ev,Mv,Sv=[],kv=[],Tv=1e-6,Dv=1e-12;yu.prototype={constructor:yu,polygons:function(){var t=this.edges;return this.cells.map((function(e){var n=e.halfedges.map((function(n){return iu(e,t[n])}));return n.data=e.site.data,n}))},triangles:function(){var t=[],e=this.edges;return this.cells.forEach((function(n,r){if(i=(a=n.halfedges).length)for(var a,i,o,s=n.site,l=-1,u=e[a[i-1]],c=u.left===s?u.right:u.left;++l<i;)o=c,c=(u=e[a[l]]).left===s?u.right:u.left,o&&c&&r<o.index&&r<c.index&&du(s,o,c)<0&&t.push([s.data,o.data,c.data])})),t},links:function(){return this.edges.filter((function(t){return t.right})).map((function(t){return{source:t.left.data,target:t.right.data}}))},find:function(t,e,n){for(var r,a,i=this,o=i._found||0,s=i.cells.length;!(a=i.cells[o]);)if(++o>=s)return null;var l=t-a.site[0],u=e-a.site[1],c=l*l+u*u;do{a=i.cells[r=o],o=null,a.halfedges.forEach((function(n){var r=i.edges[n],s=r.left;if(s!==a.site&&s||(s=r.right)){var l=t-s[0],u=e-s[1],h=l*l+u*u;h<c&&(c=h,o=s.index)}}))}while(null!==o);return i._found=r,null==n||c<=n*n?a.site:null}},gu.prototype={constructor:gu,scale:function(t){return 1===t?this:new gu(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new gu(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var Cv=new gu(1,0,0);bu.prototype=gu.prototype,t.version="4.13.0",t.bisect=Cu,t.bisectRight=Cu,t.bisectLeft=Nu,t.ascending=e,t.bisector=n,t.cross=function(t,e,n){var a,i,o,s,l=t.length,u=e.length,c=new Array(l*u);for(null==n&&(n=r),a=o=0;a<l;++a)for(s=t[a],i=0;i<u;++i,++o)c[o]=n(s,e[i]);return c},t.descending=function(t,e){return e<t?-1:e>t?1:e>=t?0:NaN},t.deviation=o,t.extent=s,t.histogram=function(){function t(t){var a,i,o=t.length,s=new Array(o);for(a=0;a<o;++a)s[a]=e(t[a],a,t);var l=n(s),u=l[0],h=l[1],f=r(s,u,h);Array.isArray(f)||(f=p(u,h,f),f=c(Math.ceil(u/f)*f,Math.floor(h/f)*f,f));for(var d=f.length;f[0]<=u;)f.shift(),--d;for(;f[d-1]>h;)f.pop(),--d;var m,y=new Array(d+1);for(a=0;a<=d;++a)(m=y[a]=[]).x0=a>0?f[a-1]:u,m.x1=a<d?f[a]:h;for(a=0;a<o;++a)u<=(i=s[a])&&i<=h&&y[Cu(f,i,0,d)].push(t[a]);return y}var e=u,n=s,r=d;return t.value=function(n){return arguments.length?(e="function"==typeof n?n:l(n),t):e},t.domain=function(e){return arguments.length?(n="function"==typeof e?e:l([e[0],e[1]]),t):n},t.thresholds=function(e){return arguments.length?(r="function"==typeof e?e:Array.isArray(e)?l(Pu.call(e)):l(e),t):r},t},t.thresholdFreedmanDiaconis=function(t,n,r){return t=Iu.call(t,a).sort(e),Math.ceil((r-n)/(2*(m(t,.75)-m(t,.25))*Math.pow(t.length,-1/3)))},t.thresholdScott=function(t,e,n){return Math.ceil((n-e)/(3.5*o(t)*Math.pow(t.length,-1/3)))},t.thresholdSturges=d,t.max=function(t,e){var n,r,a=t.length,i=-1;if(null==e){for(;++i<a;)if(null!=(n=t[i])&&n>=n)for(r=n;++i<a;)null!=(n=t[i])&&n>r&&(r=n)}else for(;++i<a;)if(null!=(n=e(t[i],i,t))&&n>=n)for(r=n;++i<a;)null!=(n=e(t[i],i,t))&&n>r&&(r=n);return r},t.mean=function(t,e){var n,r=t.length,i=r,o=-1,s=0;if(null==e)for(;++o<r;)isNaN(n=a(t[o]))?--i:s+=n;else for(;++o<r;)isNaN(n=a(e(t[o],o,t)))?--i:s+=n;if(i)return s/i},t.median=function(t,n){var r,i=t.length,o=-1,s=[];if(null==n)for(;++o<i;)isNaN(r=a(t[o]))||s.push(r);else for(;++o<i;)isNaN(r=a(n(t[o],o,t)))||s.push(r);return m(s.sort(e),.5)},t.merge=y,t.min=v,t.pairs=function(t,e){null==e&&(e=r);for(var n=0,a=t.length-1,i=t[0],o=new Array(a<0?0:a);n<a;)o[n]=e(i,i=t[++n]);return o},t.permute=function(t,e){for(var n=e.length,r=new Array(n);n--;)r[n]=t[e[n]];return r},t.quantile=m,t.range=c,t.scan=function(t,n){if(r=t.length){var r,a,i=0,o=0,s=t[o];for(null==n&&(n=e);++i<r;)(n(a=t[i],s)<0||0!==n(s,s))&&(s=a,o=i);return 0===n(s,s)?o:void 0}},t.shuffle=function(t,e,n){for(var r,a,i=(null==n?t.length:n)-(e=null==e?0:+e);i;)a=Math.random()*i--|0,r=t[i+e],t[i+e]=t[a+e],t[a+e]=r;return t},t.sum=function(t,e){var n,r=t.length,a=-1,i=0;if(null==e)for(;++a<r;)(n=+t[a])&&(i+=n);else for(;++a<r;)(n=+e(t[a],a,t))&&(i+=n);return i},t.ticks=h,t.tickIncrement=f,t.tickStep=p,t.transpose=g,t.variance=i,t.zip=function(){return g(arguments)},t.axisTop=function(t){return M(Fu,t)},t.axisRight=function(t){return M(Bu,t)},t.axisBottom=function(t){return M(Hu,t)},t.axisLeft=function(t){return M(zu,t)},t.brush=function(){return Qe(Xh)},t.brushX=function(){return Qe(Wh)},t.brushY=function(){return Qe($h)},t.brushSelection=function(t){var e=t.__brush;return e?e.dim.output(e.selection):null},t.chord=function(){function t(t){var i,o,s,l,u,h,f=t.length,p=[],d=c(f),m=[],y=[],v=y.groups=new Array(f),g=new Array(f*f);for(i=0,u=-1;++u<f;){for(o=0,h=-1;++h<f;)o+=t[u][h];p.push(o),m.push(c(f)),i+=o}for(n&&d.sort((function(t,e){return n(p[t],p[e])})),r&&m.forEach((function(e,n){e.sort((function(e,a){return r(t[n][e],t[n][a])}))})),l=(i=sf(0,of-e*f)/i)?e:of/f,o=0,u=-1;++u<f;){for(s=o,h=-1;++h<f;){var b=d[u],_=m[b][h],x=t[b][_],w=o,E=o+=x*i;g[_*f+b]={index:b,subindex:_,startAngle:w,endAngle:E,value:x}}v[b]={index:b,startAngle:s,endAngle:o,value:p[b]},o+=l}for(u=-1;++u<f;)for(h=u-1;++h<f;){var M=g[h*f+u],S=g[u*f+h];(M.value||S.value)&&y.push(M.value<S.value?{source:S,target:M}:{source:M,target:S})}return a?y.sort(a):y}var e=0,n=null,r=null,a=null;return t.padAngle=function(n){return arguments.length?(e=sf(0,n),t):e},t.sortGroups=function(e){return arguments.length?(n=e,t):n},t.sortSubgroups=function(e){return arguments.length?(r=e,t):r},t.sortChords=function(e){return arguments.length?(null==e?a=null:(a=function(t){return function(e,n){return t(e.source.value+e.target.value,n.source.value+n.target.value)}}(e))._=e,t):a&&a._},t},t.ribbon=function(){function t(){var t,s=lf.call(arguments),l=e.apply(this,s),u=n.apply(this,s),c=+r.apply(this,(s[0]=l,s)),h=a.apply(this,s)-af,f=i.apply(this,s)-af,p=c*ef(h),d=c*nf(h),m=+r.apply(this,(s[0]=u,s)),y=a.apply(this,s)-af,v=i.apply(this,s)-af;if(o||(o=t=tn()),o.moveTo(p,d),o.arc(0,0,c,h,f),h===y&&f===v||(o.quadraticCurveTo(0,0,m*ef(y),m*nf(y)),o.arc(0,0,m,y,v)),o.quadraticCurveTo(0,0,p,d),o.closePath(),t)return o=null,t+""||null}var e=en,n=nn,r=rn,a=an,i=on,o=null;return t.radius=function(e){return arguments.length?(r="function"==typeof e?e:Je(+e),t):r},t.startAngle=function(e){return arguments.length?(a="function"==typeof e?e:Je(+e),t):a},t.endAngle=function(e){return arguments.length?(i="function"==typeof e?e:Je(+e),t):i},t.source=function(n){return arguments.length?(e=n,t):e},t.target=function(e){return arguments.length?(n=e,t):n},t.context=function(e){return arguments.length?(o=null==e?null:e,t):o},t},t.nest=function(){function t(r,i,o,s){if(i>=a.length)return null!=e&&r.sort(e),null!=n?n(r):r;for(var l,u,c,h=-1,f=r.length,p=a[i++],d=ln(),m=o();++h<f;)(c=d.get(l=p(u=r[h])+""))?c.push(u):d.set(l,[u]);return d.each((function(e,n){s(m,n,t(e,i,o,s))})),m}var e,n,r,a=[],i=[];return r={object:function(e){return t(e,0,un,cn)},map:function(e){return t(e,0,hn,fn)},entries:function(e){return function t(e,r){if(++r>a.length)return e;var o,s=i[r-1];return null!=n&&r>=a.length?o=e.entries():(o=[],e.each((function(e,n){o.push({key:n,values:t(e,r)})}))),null!=s?o.sort((function(t,e){return s(t.key,e.key)})):o}(t(e,0,hn,fn),0)},key:function(t){return a.push(t),r},sortKeys:function(t){return i[a.length-1]=t,r},sortValues:function(t){return e=t,r},rollup:function(t){return n=t,r}}},t.set=dn,t.map=ln,t.keys=function(t){var e=[];for(var n in t)e.push(n);return e},t.values=function(t){var e=[];for(var n in t)e.push(t[n]);return e},t.entries=function(t){var e=[];for(var n in t)e.push({key:n,value:t[n]});return e},t.color=Dt,t.rgb=Pt,t.hsl=jt,t.lab=Bt,t.hcl=Vt,t.cubehelix=Wt,t.dispatch=S,t.drag=function(){function e(t){t.on("mousedown.drag",n).filter(y).on("touchstart.drag",i).on("touchmove.drag",o).on("touchend.drag touchcancel.drag",s).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function n(){if(!f&&p.apply(this,arguments)){var e=l("mouse",d.apply(this,arguments),pt,this,arguments);e&&(lt(t.event.view).on("mousemove.drag",r,!0).on("mouseup.drag",a,!0),vt(t.event.view),mt(),h=!1,u=t.event.clientX,c=t.event.clientY,e("start"))}}function r(){if(yt(),!h){var e=t.event.clientX-u,n=t.event.clientY-c;h=e*e+n*n>_}v.mouse("drag")}function a(){lt(t.event.view).on("mousemove.drag mouseup.drag",null),gt(t.event.view,h),yt(),v.mouse("end")}function i(){if(p.apply(this,arguments)){var e,n,r=t.event.changedTouches,a=d.apply(this,arguments),i=r.length;for(e=0;e<i;++e)(n=l(r[e].identifier,a,dt,this,arguments))&&(mt(),n("start"))}}function o(){var e,n,r=t.event.changedTouches,a=r.length;for(e=0;e<a;++e)(n=v[r[e].identifier])&&(yt(),n("drag"))}function s(){var e,n,r=t.event.changedTouches,a=r.length;for(f&&clearTimeout(f),f=setTimeout((function(){f=null}),500),e=0;e<a;++e)(n=v[r[e].identifier])&&(mt(),n("end"))}function l(n,r,a,i,o){var s,l,u,c=a(r,n),h=g.copy();if(at(new _t(e,"beforestart",s,n,b,c[0],c[1],0,0,h),(function(){return null!=(t.event.subject=s=m.apply(i,o))&&(l=s.x-c[0]||0,u=s.y-c[1]||0,!0)})))return function t(f){var p,d=c;switch(f){case"start":v[n]=t,p=b++;break;case"end":delete v[n],--b;case"drag":c=a(r,n),p=b}at(new _t(e,f,s,n,p,c[0]+l,c[1]+u,c[0]-d[0],c[1]-d[1],h),h.apply,h,[f,i,o])}}var u,c,h,f,p=xt,d=wt,m=Et,y=Mt,v={},g=S("start","drag","end"),b=0,_=0;return e.filter=function(t){return arguments.length?(p="function"==typeof t?t:bt(!!t),e):p},e.container=function(t){return arguments.length?(d="function"==typeof t?t:bt(t),e):d},e.subject=function(t){return arguments.length?(m="function"==typeof t?t:bt(t),e):m},e.touchable=function(t){return arguments.length?(y="function"==typeof t?t:bt(!!t),e):y},e.on=function(){var t=g.on.apply(g,arguments);return t===g?e:t},e.clickDistance=function(t){return arguments.length?(_=(t=+t)*t,e):Math.sqrt(_)},e},t.dragDisable=vt,t.dragEnable=gt,t.dsvFormat=yn,t.csvParse=bf,t.csvParseRows=_f,t.csvFormat=xf,t.csvFormatRows=wf,t.tsvParse=Mf,t.tsvParseRows=Sf,t.tsvFormat=kf,t.tsvFormatRows=Tf,t.easeLinear=function(t){return+t},t.easeQuad=Re,t.easeQuadIn=function(t){return t*t},t.easeQuadOut=function(t){return t*(2-t)},t.easeQuadInOut=Re,t.easeCubic=Le,t.easeCubicIn=function(t){return t*t*t},t.easeCubicOut=function(t){return--t*t*t+1},t.easeCubicInOut=Le,t.easePoly=xh,t.easePolyIn=bh,t.easePolyOut=_h,t.easePolyInOut=xh,t.easeSin=Fe,t.easeSinIn=function(t){return 1-Math.cos(t*Eh)},t.easeSinOut=function(t){return Math.sin(t*Eh)},t.easeSinInOut=Fe,t.easeExp=Be,t.easeExpIn=function(t){return Math.pow(2,10*t-10)},t.easeExpOut=function(t){return 1-Math.pow(2,-10*t)},t.easeExpInOut=Be,t.easeCircle=He,t.easeCircleIn=function(t){return 1-Math.sqrt(1-t*t)},t.easeCircleOut=function(t){return Math.sqrt(1- --t*t)},t.easeCircleInOut=He,t.easeBounce=ze,t.easeBounceIn=function(t){return 1-ze(1-t)},t.easeBounceOut=ze,t.easeBounceInOut=function(t){return((t*=2)<=1?1-ze(1-t):ze(t-1)+1)/2},t.easeBack=Rh,t.easeBackIn=Oh,t.easeBackOut=jh,t.easeBackInOut=Rh,t.easeElastic=Bh,t.easeElasticIn=Fh,t.easeElasticOut=Bh,t.easeElasticInOut=Hh,t.forceCenter=function(t,e){function n(){var n,a,i=r.length,o=0,s=0;for(n=0;n<i;++n)o+=(a=r[n]).x,s+=a.y;for(o=o/i-t,s=s/i-e,n=0;n<i;++n)(a=r[n]).x-=o,a.y-=s}var r;return null==t&&(t=0),null==e&&(e=0),n.initialize=function(t){r=t},n.x=function(e){return arguments.length?(t=+e,n):t},n.y=function(t){return arguments.length?(e=+t,n):e},n},t.forceCollide=function(t){function e(){for(var t,e,r,l,u,c,h,f=a.length,p=0;p<s;++p)for(e=En(a,kn,Tn).visitAfter(n),t=0;t<f;++t)r=a[t],c=i[r.index],h=c*c,l=r.x+r.vx,u=r.y+r.vy,e.visit((function(t,e,n,a,i){var s=t.data,f=t.r,p=c+f;if(!s)return e>l+p||a<l-p||n>u+p||i<u-p;if(s.index>r.index){var d=l-s.x-s.vx,m=u-s.y-s.vy,y=d*d+m*m;y<p*p&&(0===d&&(y+=(d=gn())*d),0===m&&(y+=(m=gn())*m),y=(p-(y=Math.sqrt(y)))/y*o,r.vx+=(d*=y)*(p=(f*=f)/(h+f)),r.vy+=(m*=y)*p,s.vx-=d*(p=1-p),s.vy-=m*p)}}))}function n(t){if(t.data)return t.r=i[t.data.index];for(var e=t.r=0;e<4;++e)t[e]&&t[e].r>t.r&&(t.r=t[e].r)}function r(){if(a){var e,n,r=a.length;for(i=new Array(r),e=0;e<r;++e)n=a[e],i[n.index]=+t(n,e,a)}}var a,i,o=1,s=1;return"function"!=typeof t&&(t=vn(null==t?1:+t)),e.initialize=function(t){a=t,r()},e.iterations=function(t){return arguments.length?(s=+t,e):s},e.strength=function(t){return arguments.length?(o=+t,e):o},e.radius=function(n){return arguments.length?(t="function"==typeof n?n:vn(+n),r(),e):t},e},t.forceLink=function(t){function e(e){for(var n=0,r=t.length;n<p;++n)for(var a,s,l,c,h,f,d,m=0;m<r;++m)s=(a=t[m]).source,c=(l=a.target).x+l.vx-s.x-s.vx||gn(),h=l.y+l.vy-s.y-s.vy||gn(),c*=f=((f=Math.sqrt(c*c+h*h))-o[m])/f*e*i[m],h*=f,l.vx-=c*(d=u[m]),l.vy-=h*d,s.vx+=c*(d=1-d),s.vy+=h*d}function n(){if(s){var e,n,h=s.length,f=t.length,p=ln(s,c);for(e=0,l=new Array(h);e<f;++e)(n=t[e]).index=e,"object"!=typeof n.source&&(n.source=Cn(p,n.source)),"object"!=typeof n.target&&(n.target=Cn(p,n.target)),l[n.source.index]=(l[n.source.index]||0)+1,l[n.target.index]=(l[n.target.index]||0)+1;for(e=0,u=new Array(f);e<f;++e)n=t[e],u[e]=l[n.source.index]/(l[n.source.index]+l[n.target.index]);i=new Array(f),r(),o=new Array(f),a()}}function r(){if(s)for(var e=0,n=t.length;e<n;++e)i[e]=+h(t[e],e,t)}function a(){if(s)for(var e=0,n=t.length;e<n;++e)o[e]=+f(t[e],e,t)}var i,o,s,l,u,c=Dn,h=function(t){return 1/Math.min(l[t.source.index],l[t.target.index])},f=vn(30),p=1;return null==t&&(t=[]),e.initialize=function(t){s=t,n()},e.links=function(r){return arguments.length?(t=r,n(),e):t},e.id=function(t){return arguments.length?(c=t,e):c},e.iterations=function(t){return arguments.length?(p=+t,e):p},e.strength=function(t){return arguments.length?(h="function"==typeof t?t:vn(+t),r(),e):h},e.distance=function(t){return arguments.length?(f="function"==typeof t?t:vn(+t),a(),e):f},e},t.forceManyBody=function(){function t(t){var e,s=a.length,l=En(a,Nn,An).visitAfter(n);for(o=t,e=0;e<s;++e)i=a[e],l.visit(r)}function e(){if(a){var t,e,n=a.length;for(s=new Array(n),t=0;t<n;++t)e=a[t],s[e.index]=+l(e,t,a)}}function n(t){var e,n,r,a,i,o=0,l=0;if(t.length){for(r=a=i=0;i<4;++i)(e=t[i])&&(n=Math.abs(e.value))&&(o+=e.value,l+=n,r+=n*e.x,a+=n*e.y);t.x=r/l,t.y=a/l}else{(e=t).x=e.data.x,e.y=e.data.y;do{o+=s[e.data.index]}while(e=e.next)}t.value=o}function r(t,e,n,r){if(!t.value)return!0;var a=t.x-i.x,l=t.y-i.y,f=r-e,p=a*a+l*l;if(f*f/h<p)return p<c&&(0===a&&(p+=(a=gn())*a),0===l&&(p+=(l=gn())*l),p<u&&(p=Math.sqrt(u*p)),i.vx+=a*t.value*o/p,i.vy+=l*t.value*o/p),!0;if(!(t.length||p>=c)){(t.data!==i||t.next)&&(0===a&&(p+=(a=gn())*a),0===l&&(p+=(l=gn())*l),p<u&&(p=Math.sqrt(u*p)));do{t.data!==i&&(f=s[t.data.index]*o/p,i.vx+=a*f,i.vy+=l*f)}while(t=t.next)}}var a,i,o,s,l=vn(-30),u=1,c=1/0,h=.81;return t.initialize=function(t){a=t,e()},t.strength=function(n){return arguments.length?(l="function"==typeof n?n:vn(+n),e(),t):l},t.distanceMin=function(e){return arguments.length?(u=e*e,t):Math.sqrt(u)},t.distanceMax=function(e){return arguments.length?(c=e*e,t):Math.sqrt(c)},t.theta=function(e){return arguments.length?(h=e*e,t):Math.sqrt(h)},t},t.forceRadial=function(t,e,n){function r(t){for(var r=0,a=i.length;r<a;++r){var l=i[r],u=l.x-e||1e-6,c=l.y-n||1e-6,h=Math.sqrt(u*u+c*c),f=(s[r]-h)*o[r]*t/h;l.vx+=u*f,l.vy+=c*f}}function a(){if(i){var e,n=i.length;for(o=new Array(n),s=new Array(n),e=0;e<n;++e)s[e]=+t(i[e],e,i),o[e]=isNaN(s[e])?0:+l(i[e],e,i)}}var i,o,s,l=vn(.1);return"function"!=typeof t&&(t=vn(+t)),null==e&&(e=0),null==n&&(n=0),r.initialize=function(t){i=t,a()},r.strength=function(t){return arguments.length?(l="function"==typeof t?t:vn(+t),a(),r):l},r.radius=function(e){return arguments.length?(t="function"==typeof e?e:vn(+e),a(),r):t},r.x=function(t){return arguments.length?(e=+t,r):e},r.y=function(t){return arguments.length?(n=+t,r):n},r},t.forceSimulation=function(t){function e(){n(),p.call("tick",i),o<s&&(f.stop(),p.call("end",i))}function n(){var e,n,r=t.length;for(o+=(u-o)*l,h.each((function(t){t(o)})),e=0;e<r;++e)null==(n=t[e]).fx?n.x+=n.vx*=c:(n.x=n.fx,n.vx=0),null==n.fy?n.y+=n.vy*=c:(n.y=n.fy,n.vy=0)}function r(){for(var e,n=0,r=t.length;n<r;++n){if((e=t[n]).index=n,isNaN(e.x)||isNaN(e.y)){var a=10*Math.sqrt(n),i=n*Nf;e.x=a*Math.cos(i),e.y=a*Math.sin(i)}(isNaN(e.vx)||isNaN(e.vy))&&(e.vx=e.vy=0)}}function a(e){return e.initialize&&e.initialize(t),e}var i,o=1,s=.001,l=1-Math.pow(s,1/300),u=0,c=.6,h=ln(),f=_e(e),p=S("tick","end");return null==t&&(t=[]),r(),i={tick:n,restart:function(){return f.restart(e),i},stop:function(){return f.stop(),i},nodes:function(e){return arguments.length?(t=e,r(),h.each(a),i):t},alpha:function(t){return arguments.length?(o=+t,i):o},alphaMin:function(t){return arguments.length?(s=+t,i):s},alphaDecay:function(t){return arguments.length?(l=+t,i):+l},alphaTarget:function(t){return arguments.length?(u=+t,i):u},velocityDecay:function(t){return arguments.length?(c=1-t,i):1-c},force:function(t,e){return arguments.length>1?(null==e?h.remove(t):h.set(t,a(e)),i):h.get(t)},find:function(e,n,r){var a,i,o,s,l,u=0,c=t.length;for(null==r?r=1/0:r*=r,u=0;u<c;++u)(o=(a=e-(s=t[u]).x)*a+(i=n-s.y)*i)<r&&(l=s,r=o);return l},on:function(t,e){return arguments.length>1?(p.on(t,e),i):p.on(t)}}},t.forceX=function(t){function e(t){for(var e,n=0,o=r.length;n<o;++n)(e=r[n]).vx+=(i[n]-e.x)*a[n]*t}function n(){if(r){var e,n=r.length;for(a=new Array(n),i=new Array(n),e=0;e<n;++e)a[e]=isNaN(i[e]=+t(r[e],e,r))?0:+o(r[e],e,r)}}var r,a,i,o=vn(.1);return"function"!=typeof t&&(t=vn(null==t?0:+t)),e.initialize=function(t){r=t,n()},e.strength=function(t){return arguments.length?(o="function"==typeof t?t:vn(+t),n(),e):o},e.x=function(r){return arguments.length?(t="function"==typeof r?r:vn(+r),n(),e):t},e},t.forceY=function(t){function e(t){for(var e,n=0,o=r.length;n<o;++n)(e=r[n]).vy+=(i[n]-e.y)*a[n]*t}function n(){if(r){var e,n=r.length;for(a=new Array(n),i=new Array(n),e=0;e<n;++e)a[e]=isNaN(i[e]=+t(r[e],e,r))?0:+o(r[e],e,r)}}var r,a,i,o=vn(.1);return"function"!=typeof t&&(t=vn(null==t?0:+t)),e.initialize=function(t){r=t,n()},e.strength=function(t){return arguments.length?(o="function"==typeof t?t:vn(+t),n(),e):o},e.y=function(r){return arguments.length?(t="function"==typeof r?r:vn(+r),n(),e):t},e},t.formatDefaultLocale=Bn,t.formatLocale=Fn,t.formatSpecifier=jn,t.precisionFixed=Hn,t.precisionPrefix=zn,t.precisionRound=qn,t.geoArea=function(t){return jp.reset(),Kn(t,Rp),2*jp},t.geoBounds=function(t){var e,n,r,a,i,o,s;if(Gf=qf=-(Hf=zf=1/0),$f=[],Kn(t,Fp),n=$f.length){for($f.sort(br),e=1,i=[r=$f[0]];e<n;++e)_r(r,(a=$f[e])[0])||_r(r,a[1])?(gr(r[0],a[1])>gr(r[0],r[1])&&(r[1]=a[1]),gr(a[0],r[1])>gr(r[0],r[1])&&(r[0]=a[0])):i.push(r=a);for(o=-1/0,e=0,r=i[n=i.length-1];e<=n;r=a,++e)a=i[e],(s=gr(r[1],a[0]))>o&&(o=s,Hf=a[0],qf=r[1])}return $f=Xf=null,Hf===1/0||zf===1/0?[[NaN,NaN],[NaN,NaN]]:[[Hf,zf],[qf,Gf]]},t.geoCentroid=function(t){Zf=Qf=Jf=Kf=tp=ep=np=rp=ap=ip=op=0,Kn(t,Bp);var e=ap,n=ip,r=op,a=e*e+n*n+r*r;return a<1e-12&&(e=ep,n=np,r=rp,Qf<pp&&(e=Jf,n=Kf,r=tp),(a=e*e+n*n+r*r)<1e-12)?[NaN,NaN]:[wp(n,e)*gp,Wn(r/Np(a))*gp]},t.geoCircle=function(){function t(){var t=r.apply(this,arguments),s=a.apply(this,arguments)*bp,l=i.apply(this,arguments)*bp;return e=[],n=Or(-t[0]*bp,-t[1]*bp,0).invert,Br(o,s,l,1),t={type:"Polygon",coordinates:[e]},e=n=null,t}var e,n,r=Ar([0,0]),a=Ar(90),i=Ar(6),o={point:function(t,r){e.push(t=n(t,r)),t[0]*=gp,t[1]*=gp}};return t.center=function(e){return arguments.length?(r="function"==typeof e?e:Ar([+e[0],+e[1]]),t):r},t.radius=function(e){return arguments.length?(a="function"==typeof e?e:Ar(+e),t):a},t.precision=function(e){return arguments.length?(i="function"==typeof e?e:Ar(+e),t):i},t},t.geoClipAntimeridian=Jp,t.geoClipCircle=Zr,t.geoClipExtent=function(){var t,e,n,r=0,a=0,i=960,o=500;return n={stream:function(n){return t&&e===n?t:t=Qr(r,a,i,o)(e=n)},extent:function(s){return arguments.length?(r=+s[0][0],a=+s[0][1],i=+s[1][0],o=+s[1][1],t=e=null,n):[[r,a],[i,o]]}}},t.geoClipRectangle=Qr,t.geoContains=function(t,e){return(t&&id.hasOwnProperty(t.type)?id[t.type]:ra)(t,e)},t.geoDistance=na,t.geoGraticule=ha,t.geoGraticule10=function(){return ha()()},t.geoInterpolate=function(t,e){var n=t[0]*bp,r=t[1]*bp,a=e[0]*bp,i=e[1]*bp,o=Ep(r),s=Dp(r),l=Ep(i),u=Dp(i),c=o*Ep(n),h=o*Dp(n),f=l*Ep(a),p=l*Dp(a),d=2*Wn(Np($n(i-r)+o*l*$n(a-n))),m=Dp(d),y=d?function(t){var e=Dp(t*=d)/m,n=Dp(d-t)/m,r=n*c+e*f,a=n*h+e*p,i=n*s+e*u;return[wp(a,r)*gp,wp(i,Np(r*r+a*a))*gp]}:function(){return[n*gp,r*gp]};return y.distance=d,y},t.geoLength=ea,t.geoPath=function(t,e){function n(t){return t&&("function"==typeof i&&a.pointRadius(+i.apply(this,arguments)),Kn(t,r(a))),a.result()}var r,a,i=4.5;return n.area=function(t){return Kn(t,r(ud)),ud.result()},n.measure=function(t){return Kn(t,r(Ad)),Ad.result()},n.bounds=function(t){return Kn(t,r(dd)),dd.result()},n.centroid=function(t){return Kn(t,r(Md)),Md.result()},n.projection=function(e){return arguments.length?(r=null==e?(t=null,fa):(t=e).stream,n):t},n.context=function(t){return arguments.length?(a=null==t?(e=null,new Ca):new ka(e=t),"function"!=typeof i&&a.pointRadius(i),n):e},n.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(a.pointRadius(+t),+t),n):i},n.projection(t).context(e)},t.geoAlbers=Ua,t.geoAlbersUsa=function(){function t(t){var e=t[0],n=t[1];return s=null,a.point(e,n),s||(i.point(e,n),s)||(o.point(e,n),s)}function e(){return n=r=null,t}var n,r,a,i,o,s,l=Ua(),u=Ga().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Ga().rotate([157,0]).center([-3,19.9]).parallels([8,18]),h={point:function(t,e){s=[t,e]}};return t.invert=function(t){var e=l.scale(),n=l.translate(),r=(t[0]-n[0])/e,a=(t[1]-n[1])/e;return(a>=.12&&a<.234&&r>=-.425&&r<-.214?u:a>=.166&&a<.234&&r>=-.214&&r<-.115?c:l).invert(t)},t.stream=function(t){return n&&r===t?n:n=function(t){var e=t.length;return{point:function(n,r){for(var a=-1;++a<e;)t[a].point(n,r)},sphere:function(){for(var n=-1;++n<e;)t[n].sphere()},lineStart:function(){for(var n=-1;++n<e;)t[n].lineStart()},lineEnd:function(){for(var n=-1;++n<e;)t[n].lineEnd()},polygonStart:function(){for(var n=-1;++n<e;)t[n].polygonStart()},polygonEnd:function(){for(var n=-1;++n<e;)t[n].polygonEnd()}}}([l.stream(r=t),u.stream(t),c.stream(t)])},t.precision=function(t){return arguments.length?(l.precision(t),u.precision(t),c.precision(t),e()):l.precision()},t.scale=function(e){return arguments.length?(l.scale(e),u.scale(.35*e),c.scale(e),t.translate(l.translate())):l.scale()},t.translate=function(t){if(!arguments.length)return l.translate();var n=l.scale(),r=+t[0],s=+t[1];return a=l.translate(t).clipExtent([[r-.455*n,s-.238*n],[r+.455*n,s+.238*n]]).stream(h),i=u.translate([r-.307*n,s+.201*n]).clipExtent([[r-.425*n+pp,s+.12*n+pp],[r-.214*n-pp,s+.234*n-pp]]).stream(h),o=c.translate([r-.205*n,s+.212*n]).clipExtent([[r-.214*n+pp,s+.166*n+pp],[r-.115*n-pp,s+.234*n-pp]]).stream(h),e()},t.fitExtent=function(e,n){return Oa(t,e,n)},t.fitSize=function(e,n){return ja(t,e,n)},t.fitWidth=function(e,n){return Ra(t,e,n)},t.fitHeight=function(e,n){return La(t,e,n)},t.scale(1070)},t.geoAzimuthalEqualArea=function(){return Ba(jd).scale(124.75).clipAngle(179.999)},t.geoAzimuthalEqualAreaRaw=jd,t.geoAzimuthalEquidistant=function(){return Ba(Rd).scale(79.4188).clipAngle(179.999)},t.geoAzimuthalEquidistantRaw=Rd,t.geoConicConformal=function(){return za(Za).scale(109.5).parallels([30,30])},t.geoConicConformalRaw=Za,t.geoConicEqualArea=Ga,t.geoConicEqualAreaRaw=qa,t.geoConicEquidistant=function(){return za(Ja).scale(131.154).center([0,13.9389])},t.geoConicEquidistantRaw=Ja,t.geoEquirectangular=function(){return Ba(Qa).scale(152.63)},t.geoEquirectangularRaw=Qa,t.geoGnomonic=function(){return Ba(Ka).scale(144.049).clipAngle(60)},t.geoGnomonicRaw=Ka,t.geoIdentity=function(){function t(){return a=i=null,o}var e,n,r,a,i,o,s=1,l=0,u=0,c=1,h=1,f=fa,p=null,d=fa;return o={stream:function(t){return a&&i===t?a:a=f(d(i=t))},postclip:function(a){return arguments.length?(d=a,p=e=n=r=null,t()):d},clipExtent:function(a){return arguments.length?(d=null==a?(p=e=n=r=null,fa):Qr(p=+a[0][0],e=+a[0][1],n=+a[1][0],r=+a[1][1]),t()):null==p?null:[[p,e],[n,r]]},scale:function(e){return arguments.length?(f=ti((s=+e)*c,s*h,l,u),t()):s},translate:function(e){return arguments.length?(f=ti(s*c,s*h,l=+e[0],u=+e[1]),t()):[l,u]},reflectX:function(e){return arguments.length?(f=ti(s*(c=e?-1:1),s*h,l,u),t()):c<0},reflectY:function(e){return arguments.length?(f=ti(s*c,s*(h=e?-1:1),l,u),t()):h<0},fitExtent:function(t,e){return Oa(o,t,e)},fitSize:function(t,e){return ja(o,t,e)},fitWidth:function(t,e){return Ra(o,t,e)},fitHeight:function(t,e){return La(o,t,e)}}},t.geoProjection=Ba,t.geoProjectionMutator=Ha,t.geoMercator=function(){return $a(Wa).scale(961/vp)},t.geoMercatorRaw=Wa,t.geoNaturalEarth1=function(){return Ba(ei).scale(175.295)},t.geoNaturalEarth1Raw=ei,t.geoOrthographic=function(){return Ba(ni).scale(249.5).clipAngle(90+pp)},t.geoOrthographicRaw=ni,t.geoStereographic=function(){return Ba(ri).scale(250).clipAngle(142)},t.geoStereographicRaw=ri,t.geoTransverseMercator=function(){var t=$a(ai),e=t.center,n=t.rotate;return t.center=function(t){return arguments.length?e([-t[1],t[0]]):[(t=e())[1],-t[0]]},t.rotate=function(t){return arguments.length?n([t[0],t[1],t.length>2?t[2]+90:90]):[(t=n())[0],t[1],t[2]-90]},n([0,0,90]).scale(159.155)},t.geoTransverseMercatorRaw=ai,t.geoRotation=Fr,t.geoStream=Kn,t.geoTransform=function(t){return{stream:Aa(t)}},t.cluster=function(){function t(t){var i,o=0;t.eachAfter((function(t){var n=t.children;n?(t.x=function(t){return t.reduce(oi,0)/t.length}(n),t.y=function(t){return 1+t.reduce(si,0)}(n)):(t.x=i?o+=e(t,i):0,t.y=0,i=t)}));var s=function(t){for(var e;e=t.children;)t=e[0];return t}(t),l=function(t){for(var e;e=t.children;)t=e[e.length-1];return t}(t),u=s.x-e(s,l)/2,c=l.x+e(l,s)/2;return t.eachAfter(a?function(e){e.x=(e.x-t.x)*n,e.y=(t.y-e.y)*r}:function(e){e.x=(e.x-u)/(c-u)*n,e.y=(1-(t.y?e.y/t.y:1))*r})}var e=ii,n=1,r=1,a=!1;return t.separation=function(n){return arguments.length?(e=n,t):e},t.size=function(e){return arguments.length?(a=!1,n=+e[0],r=+e[1],t):a?null:[n,r]},t.nodeSize=function(e){return arguments.length?(a=!0,n=+e[0],r=+e[1],t):a?[n,r]:null},t},t.hierarchy=ui,t.pack=function(){function t(t){return t.x=n/2,t.y=r/2,e?t.eachBefore(Ci(e)).eachAfter(Ni(a,.5)).eachBefore(Ai(1)):t.eachBefore(Ci(Di)).eachAfter(Ni(ki,1)).eachAfter(Ni(a,t.r/Math.min(n,r))).eachBefore(Ai(Math.min(n,r)/(2*t.r))),t}var e=null,n=1,r=1,a=ki;return t.radius=function(n){return arguments.length?(e=function(t){return null==t?null:Si(t)}(n),t):e},t.size=function(e){return arguments.length?(n=+e[0],r=+e[1],t):[n,r]},t.padding=function(e){return arguments.length?(a="function"==typeof e?e:Ti(+e),t):a},t},t.packSiblings=function(t){return Mi(t),t},t.packEnclose=di,t.partition=function(){function t(t){var i=t.height+1;return t.x0=t.y0=r,t.x1=e,t.y1=n/i,t.eachBefore(function(t,e){return function(n){n.children&&Ii(n,n.x0,t*(n.depth+1)/e,n.x1,t*(n.depth+2)/e);var a=n.x0,i=n.y0,o=n.x1-r,s=n.y1-r;o<a&&(a=o=(a+o)/2),s<i&&(i=s=(i+s)/2),n.x0=a,n.y0=i,n.x1=o,n.y1=s}}(n,i)),a&&t.eachBefore(Pi),t}var e=1,n=1,r=0,a=!1;return t.round=function(e){return arguments.length?(a=!!e,t):a},t.size=function(r){return arguments.length?(e=+r[0],n=+r[1],t):[e,n]},t.padding=function(e){return arguments.length?(r=+e,t):r},t},t.stratify=function(){function t(t){var r,a,i,o,s,l,u,c=t.length,h=new Array(c),f={};for(a=0;a<c;++a)r=t[a],s=h[a]=new pi(r),null!=(l=e(r,a,t))&&(l+="")&&(f[u="$"+(s.id=l)]=u in f?Bd:s);for(a=0;a<c;++a)if(s=h[a],null!=(l=n(t[a],a,t))&&(l+="")){if(!(o=f["$"+l]))throw new Error("missing: "+l);if(o===Bd)throw new Error("ambiguous: "+l);o.children?o.children.push(s):o.children=[s],s.parent=o}else{if(i)throw new Error("multiple roots");i=s}if(!i)throw new Error("no root");if(i.parent=Fd,i.eachBefore((function(t){t.depth=t.parent.depth+1,--c})).eachBefore(fi),i.parent=null,c>0)throw new Error("cycle");return i}var e=Oi,n=ji;return t.id=function(n){return arguments.length?(e=Si(n),t):e},t.parentId=function(e){return arguments.length?(n=Si(e),t):n},t},t.tree=function(){function t(t){var l=function(t){for(var e,n,r,a,i,o=new zi(t,0),s=[o];e=s.pop();)if(r=e._.children)for(e.children=new Array(i=r.length),a=i-1;a>=0;--a)s.push(n=e.children[a]=new zi(r[a],a)),n.parent=e;return(o.parent=new zi(null,0)).children=[o],o}(t);if(l.eachAfter(e),l.parent.m=-l.z,l.eachBefore(n),s)t.eachBefore(r);else{var u=t,c=t,h=t;t.eachBefore((function(t){t.x<u.x&&(u=t),t.x>c.x&&(c=t),t.depth>h.depth&&(h=t)}));var f=u===c?1:a(u,c)/2,p=f-u.x,d=i/(c.x+f+p),m=o/(h.depth||1);t.eachBefore((function(t){t.x=(t.x+p)*d,t.y=t.depth*m}))}return t}function e(t){var e=t.children,n=t.parent.children,r=t.i?n[t.i-1]:null;if(e){!function(t){for(var e,n=0,r=0,a=t.children,i=a.length;--i>=0;)(e=a[i]).z+=n,e.m+=n,n+=e.s+(r+=e.c)}(t);var i=(e[0].z+e[e.length-1].z)/2;r?(t.z=r.z+a(t._,r._),t.m=t.z-i):t.z=i}else r&&(t.z=r.z+a(t._,r._));t.parent.A=function(t,e,n){if(e){for(var r,i=t,o=t,s=e,l=i.parent.children[0],u=i.m,c=o.m,h=s.m,f=l.m;s=Fi(s),i=Li(i),s&&i;)l=Li(l),(o=Fi(o)).a=t,(r=s.z+h-i.z-u+a(s._,i._))>0&&(Bi(Hi(s,t,n),t,r),u+=r,c+=r),h+=s.m,u+=i.m,f+=l.m,c+=o.m;s&&!Fi(o)&&(o.t=s,o.m+=h-c),i&&!Li(l)&&(l.t=i,l.m+=u-f,n=t)}return n}(t,r,t.parent.A||n[0])}function n(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function r(t){t.x*=i,t.y=t.depth*o}var a=Ri,i=1,o=1,s=null;return t.separation=function(e){return arguments.length?(a=e,t):a},t.size=function(e){return arguments.length?(s=!1,i=+e[0],o=+e[1],t):s?null:[i,o]},t.nodeSize=function(e){return arguments.length?(s=!0,i=+e[0],o=+e[1],t):s?[i,o]:null},t},t.treemap=function(){function t(t){return t.x0=t.y0=0,t.x1=a,t.y1=i,t.eachBefore(e),o=[0],r&&t.eachBefore(Pi),t}function e(t){var e=o[t.depth],r=t.x0+e,a=t.y0+e,i=t.x1-e,f=t.y1-e;i<r&&(r=i=(r+i)/2),f<a&&(a=f=(a+f)/2),t.x0=r,t.y0=a,t.x1=i,t.y1=f,t.children&&(e=o[t.depth+1]=s(t)/2,r+=h(t)-e,a+=l(t)-e,(i-=u(t)-e)<r&&(r=i=(r+i)/2),(f-=c(t)-e)<a&&(a=f=(a+f)/2),n(t,r,a,i,f))}var n=zd,r=!1,a=1,i=1,o=[0],s=ki,l=ki,u=ki,c=ki,h=ki;return t.round=function(e){return arguments.length?(r=!!e,t):r},t.size=function(e){return arguments.length?(a=+e[0],i=+e[1],t):[a,i]},t.tile=function(e){return arguments.length?(n=Si(e),t):n},t.padding=function(e){return arguments.length?t.paddingInner(e).paddingOuter(e):t.paddingInner()},t.paddingInner=function(e){return arguments.length?(s="function"==typeof e?e:Ti(+e),t):s},t.paddingOuter=function(e){return arguments.length?t.paddingTop(e).paddingRight(e).paddingBottom(e).paddingLeft(e):t.paddingTop()},t.paddingTop=function(e){return arguments.length?(l="function"==typeof e?e:Ti(+e),t):l},t.paddingRight=function(e){return arguments.length?(u="function"==typeof e?e:Ti(+e),t):u},t.paddingBottom=function(e){return arguments.length?(c="function"==typeof e?e:Ti(+e),t):c},t.paddingLeft=function(e){return arguments.length?(h="function"==typeof e?e:Ti(+e),t):h},t},t.treemapBinary=function(t,e,n,r,a){var i,o,s=t.children,l=s.length,u=new Array(l+1);for(u[0]=o=i=0;i<l;++i)u[i+1]=o+=s[i].value;!function t(e,n,r,a,i,o,l){if(e>=n-1){var c=s[e];return c.x0=a,c.y0=i,c.x1=o,void(c.y1=l)}for(var h=u[e],f=r/2+h,p=e+1,d=n-1;p<d;){var m=p+d>>>1;u[m]<f?p=m+1:d=m}f-u[p-1]<u[p]-f&&e+1<p&&--p;var y=u[p]-h,v=r-y;if(o-a>l-i){var g=(a*v+o*y)/r;t(e,p,y,a,i,g,l),t(p,n,v,g,i,o,l)}else{var b=(i*v+l*y)/r;t(e,p,y,a,i,o,b),t(p,n,v,a,b,o,l)}}(0,l,t.value,e,n,r,a)},t.treemapDice=Ii,t.treemapSlice=qi,t.treemapSliceDice=function(t,e,n,r,a){(1&t.depth?qi:Ii)(t,e,n,r,a)},t.treemapSquarify=zd,t.treemapResquarify=qd,t.interpolate=le,t.interpolateArray=re,t.interpolateBasis=Zt,t.interpolateBasisClosed=Qt,t.interpolateDate=ae,t.interpolateNumber=ie,t.interpolateObject=oe,t.interpolateRound=ue,t.interpolateString=se,t.interpolateTransformCss=Hc,t.interpolateTransformSvg=zc,t.interpolateZoom=pe,t.interpolateRgb=Ic,t.interpolateRgbBasis=Oc,t.interpolateRgbBasisClosed=jc,t.interpolateHsl=Yc,t.interpolateHslLong=Wc,t.interpolateLab=function(t,e){var n=ee((t=Bt(t)).l,(e=Bt(e)).l),r=ee(t.a,e.a),a=ee(t.b,e.b),i=ee(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=a(e),t.opacity=i(e),t+""}},t.interpolateHcl=$c,t.interpolateHclLong=Xc,t.interpolateCubehelix=Zc,t.interpolateCubehelixLong=Qc,t.quantize=function(t,e){for(var n=new Array(e),r=0;r<e;++r)n[r]=t(r/(e-1));return n},t.path=tn,t.polygonArea=function(t){for(var e,n=-1,r=t.length,a=t[r-1],i=0;++n<r;)e=a,a=t[n],i+=e[1]*a[0]-e[0]*a[1];return i/2},t.polygonCentroid=function(t){for(var e,n,r=-1,a=t.length,i=0,o=0,s=t[a-1],l=0;++r<a;)e=s,s=t[r],l+=n=e[0]*s[1]-s[0]*e[1],i+=(e[0]+s[0])*n,o+=(e[1]+s[1])*n;return[i/(l*=3),o/l]},t.polygonHull=function(t){if((n=t.length)<3)return null;var e,n,r=new Array(n),a=new Array(n);for(e=0;e<n;++e)r[e]=[+t[e][0],+t[e][1],e];for(r.sort(Vi),e=0;e<n;++e)a[e]=[r[e][0],-r[e][1]];var i=Yi(r),o=Yi(a),s=o[0]===i[0],l=o[o.length-1]===i[i.length-1],u=[];for(e=i.length-1;e>=0;--e)u.push(t[r[i[e]][2]]);for(e=+s;e<o.length-l;++e)u.push(t[r[o[e]][2]]);return u},t.polygonContains=function(t,e){for(var n,r,a=t.length,i=t[a-1],o=e[0],s=e[1],l=i[0],u=i[1],c=!1,h=0;h<a;++h)n=(i=t[h])[0],(r=i[1])>s!=u>s&&o<(l-n)*(s-r)/(u-r)+n&&(c=!c),l=n,u=r;return c},t.polygonLength=function(t){for(var e,n,r=-1,a=t.length,i=t[a-1],o=i[0],s=i[1],l=0;++r<a;)e=o,n=s,e-=o=(i=t[r])[0],n-=s=i[1],l+=Math.sqrt(e*e+n*n);return l},t.quadtree=En,t.queue=Qi,t.randomUniform=Vd,t.randomNormal=Yd,t.randomLogNormal=Wd,t.randomBates=Xd,t.randomIrwinHall=$d,t.randomExponential=Zd,t.request=Ki,t.html=Qd,t.json=Jd,t.text=Kd,t.xml=tm,t.csv=em,t.tsv=nm,t.scaleBand=ro,t.scalePoint=function(){return function t(e){var n=e.copy;return e.padding=e.paddingOuter,delete e.paddingInner,delete e.paddingOuter,e.copy=function(){return t(n())},e}(ro().paddingInner(1))},t.scaleIdentity=function t(){function e(t){return+t}var n=[0,1];return e.invert=e,e.domain=e.range=function(t){return arguments.length?(n=am.call(t,io),e):n.slice()},e.copy=function(){return t().domain(n)},ho(e)},t.scaleLinear=function t(){var e=co(oo,ie);return e.copy=function(){return uo(e,t())},ho(e)},t.scaleLog=function e(){function n(){return o=go(i),s=vo(i),a()[0]<0&&(o=bo(o),s=bo(s)),r}var r=co(po,mo).domain([1,10]),a=r.domain,i=10,o=go(10),s=vo(10);return r.base=function(t){return arguments.length?(i=+t,n()):i},r.domain=function(t){return arguments.length?(a(t),n()):a()},r.ticks=function(t){var e,n=a(),r=n[0],l=n[n.length-1];(e=l<r)&&(p=r,r=l,l=p);var u,c,f,p=o(r),d=o(l),m=null==t?10:+t,y=[];if(!(i%1)&&d-p<m){if(p=Math.round(p)-1,d=Math.round(d)+1,r>0){for(;p<d;++p)for(c=1,u=s(p);c<i;++c)if(!((f=u*c)<r)){if(f>l)break;y.push(f)}}else for(;p<d;++p)for(c=i-1,u=s(p);c>=1;--c)if(!((f=u*c)<r)){if(f>l)break;y.push(f)}}else y=h(p,d,Math.min(d-p,m)).map(s);return e?y.reverse():y},r.tickFormat=function(e,n){if(null==n&&(n=10===i?".0e":","),"function"!=typeof n&&(n=t.format(n)),e===1/0)return n;null==e&&(e=10);var a=Math.max(1,i*e/r.ticks().length);return function(t){var e=t/s(Math.round(o(t)));return e*i<i-.5&&(e*=i),e<=a?n(t):""}},r.nice=function(){return a(fo(a(),{floor:function(t){return s(Math.floor(o(t)))},ceil:function(t){return s(Math.ceil(o(t)))}}))},r.copy=function(){return uo(r,e().base(i))},r},t.scaleOrdinal=no,t.scaleImplicit=om,t.scalePow=xo,t.scaleSqrt=function(){return xo().exponent(.5)},t.scaleQuantile=function t(){function n(){var t=0,e=Math.max(1,i.length);for(o=new Array(e-1);++t<e;)o[t-1]=m(a,t/e);return r}function r(t){if(!isNaN(t=+t))return i[Cu(o,t)]}var a=[],i=[],o=[];return r.invertExtent=function(t){var e=i.indexOf(t);return e<0?[NaN,NaN]:[e>0?o[e-1]:a[0],e<o.length?o[e]:a[a.length-1]]},r.domain=function(t){if(!arguments.length)return a.slice();a=[];for(var r,i=0,o=t.length;i<o;++i)null==(r=t[i])||isNaN(r=+r)||a.push(r);return a.sort(e),n()},r.range=function(t){return arguments.length?(i=im.call(t),n()):i.slice()},r.quantiles=function(){return o.slice()},r.copy=function(){return t().domain(a).range(i)},r},t.scaleQuantize=function t(){function e(t){if(t<=t)return s[Cu(o,t,0,i)]}function n(){var t=-1;for(o=new Array(i);++t<i;)o[t]=((t+1)*a-(t-i)*r)/(i+1);return e}var r=0,a=1,i=1,o=[.5],s=[0,1];return e.domain=function(t){return arguments.length?(r=+t[0],a=+t[1],n()):[r,a]},e.range=function(t){return arguments.length?(i=(s=im.call(t)).length-1,n()):s.slice()},e.invertExtent=function(t){var e=s.indexOf(t);return e<0?[NaN,NaN]:e<1?[r,o[0]]:e>=i?[o[i-1],a]:[o[e-1],o[e]]},e.copy=function(){return t().domain([r,a]).range(s)},ho(e)},t.scaleThreshold=function t(){function e(t){if(t<=t)return r[Cu(n,t,0,a)]}var n=[.5],r=[0,1],a=1;return e.domain=function(t){return arguments.length?(n=im.call(t),a=Math.min(n.length,r.length-1),e):n.slice()},e.range=function(t){return arguments.length?(r=im.call(t),a=Math.min(n.length,r.length-1),e):r.slice()},e.invertExtent=function(t){var e=r.indexOf(t);return[n[e-1],n[e]]},e.copy=function(){return t().domain(n).range(r)},e},t.scaleTime=function(){return Fs(Fm,Rm,wm,_m,gm,ym,dm,cm,t.timeFormat).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},t.scaleUtc=function(){return Fs(ly,oy,Ym,Um,qm,Hm,dm,cm,t.utcFormat).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])},t.schemeCategory10=Sy,t.schemeCategory20b=ky,t.schemeCategory20c=Ty,t.schemeCategory20=Dy,t.interpolateCubehelixDefault=Cy,t.interpolateRainbow=function(t){(t<0||t>1)&&(t-=Math.floor(t));var e=Math.abs(t-.5);return Py.h=360*t-100,Py.s=1.5-1.5*e,Py.l=.8-.9*e,Py+""},t.interpolateWarm=Ny,t.interpolateCool=Ay,t.interpolateViridis=Iy,t.interpolateMagma=Oy,t.interpolateInferno=jy,t.interpolatePlasma=Ry,t.scaleSequential=function t(e){function n(t){var n=(t-r)/(a-r);return e(i?Math.max(0,Math.min(1,n)):n)}var r=0,a=1,i=!1;return n.domain=function(t){return arguments.length?(r=+t[0],a=+t[1],n):[r,a]},n.clamp=function(t){return arguments.length?(i=!!t,n):i},n.interpolator=function(t){return arguments.length?(e=t,n):e},n.copy=function(){return t(e).domain([r,a]).clamp(i)},ho(n)},t.create=function(t){return lt(C(t).call(document.documentElement))},t.creator=C,t.local=ut,t.matcher=Xu,t.mouse=pt,t.namespace=D,t.namespaces=Vu,t.clientPoint=ft,t.select=lt,t.selectAll=function(t){return"string"==typeof t?new ot([document.querySelectorAll(t)],[document.documentElement]):new ot([null==t?[]:t],Ju)},t.selection=st,t.selector=A,t.selectorAll=I,t.style=H,t.touch=dt,t.touches=function(t,e){null==e&&(e=ht().touches);for(var n=0,r=e?e.length:0,a=new Array(r);n<r;++n)a[n]=ft(t,e[n]);return a},t.window=B,t.customEvent=at,t.arc=function(){function t(){var t,u,c=+e.apply(this,arguments),h=+n.apply(this,arguments),f=i.apply(this,arguments)-Yy,p=o.apply(this,arguments)-Yy,d=Ly(p-f),m=p>f;if(l||(l=t=tn()),h<c&&(u=h,h=c,c=u),h>Uy)if(d>Wy-Uy)l.moveTo(h*By(f),h*qy(f)),l.arc(0,0,h,f,p,!m),c>Uy&&(l.moveTo(c*By(p),c*qy(p)),l.arc(0,0,c,p,f,m));else{var y,v,g=f,b=p,_=f,x=p,w=d,E=d,M=s.apply(this,arguments)/2,S=M>Uy&&(a?+a.apply(this,arguments):Gy(c*c+h*h)),k=zy(Ly(h-c)/2,+r.apply(this,arguments)),T=k,D=k;if(S>Uy){var C=qs(S/c*qy(M)),N=qs(S/h*qy(M));(w-=2*C)>Uy?(_+=C*=m?1:-1,x-=C):(w=0,_=x=(f+p)/2),(E-=2*N)>Uy?(g+=N*=m?1:-1,b-=N):(E=0,g=b=(f+p)/2)}var A=h*By(g),P=h*qy(g),I=c*By(x),O=c*qy(x);if(k>Uy){var j=h*By(b),R=h*qy(b),L=c*By(_),F=c*qy(_);if(d<Vy){var B=w>Uy?function(t,e,n,r,a,i,o,s){var l=n-t,u=r-e,c=o-a,h=s-i,f=(c*(e-i)-h*(t-a))/(h*l-c*u);return[t+f*l,e+f*u]}(A,P,L,F,j,R,I,O):[I,O],H=A-B[0],z=P-B[1],q=j-B[0],G=R-B[1],U=1/qy(function(t){return t>1?0:t<-1?Vy:Math.acos(t)}((H*q+z*G)/(Gy(H*H+z*z)*Gy(q*q+G*G)))/2),V=Gy(B[0]*B[0]+B[1]*B[1]);T=zy(k,(c-V)/(U-1)),D=zy(k,(h-V)/(U+1))}}E>Uy?D>Uy?(y=$s(L,F,A,P,h,D,m),v=$s(j,R,I,O,h,D,m),l.moveTo(y.cx+y.x01,y.cy+y.y01),D<k?l.arc(y.cx,y.cy,D,Fy(y.y01,y.x01),Fy(v.y01,v.x01),!m):(l.arc(y.cx,y.cy,D,Fy(y.y01,y.x01),Fy(y.y11,y.x11),!m),l.arc(0,0,h,Fy(y.cy+y.y11,y.cx+y.x11),Fy(v.cy+v.y11,v.cx+v.x11),!m),l.arc(v.cx,v.cy,D,Fy(v.y11,v.x11),Fy(v.y01,v.x01),!m))):(l.moveTo(A,P),l.arc(0,0,h,g,b,!m)):l.moveTo(A,P),c>Uy&&w>Uy?T>Uy?(y=$s(I,O,j,R,c,-T,m),v=$s(A,P,L,F,c,-T,m),l.lineTo(y.cx+y.x01,y.cy+y.y01),T<k?l.arc(y.cx,y.cy,T,Fy(y.y01,y.x01),Fy(v.y01,v.x01),!m):(l.arc(y.cx,y.cy,T,Fy(y.y01,y.x01),Fy(y.y11,y.x11),!m),l.arc(0,0,c,Fy(y.cy+y.y11,y.cx+y.x11),Fy(v.cy+v.y11,v.cx+v.x11),m),l.arc(v.cx,v.cy,T,Fy(v.y11,v.x11),Fy(v.y01,v.x01),!m))):l.arc(0,0,c,x,_,m):l.lineTo(I,O)}else l.moveTo(0,0);if(l.closePath(),t)return l=null,t+""||null}var e=Gs,n=Us,r=zs(0),a=null,i=Vs,o=Ys,s=Ws,l=null;return t.centroid=function(){var t=(+e.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-Vy/2;return[By(r)*t,qy(r)*t]},t.innerRadius=function(n){return arguments.length?(e="function"==typeof n?n:zs(+n),t):e},t.outerRadius=function(e){return arguments.length?(n="function"==typeof e?e:zs(+e),t):n},t.cornerRadius=function(e){return arguments.length?(r="function"==typeof e?e:zs(+e),t):r},t.padRadius=function(e){return arguments.length?(a=null==e?null:"function"==typeof e?e:zs(+e),t):a},t.startAngle=function(e){return arguments.length?(i="function"==typeof e?e:zs(+e),t):i},t.endAngle=function(e){return arguments.length?(o="function"==typeof e?e:zs(+e),t):o},t.padAngle=function(e){return arguments.length?(s="function"==typeof e?e:zs(+e),t):s},t.context=function(e){return arguments.length?(l=null==e?null:e,t):l},t},t.area=tl,t.line=Ks,t.pie=function(){function t(t){var s,l,u,c,h,f=t.length,p=0,d=new Array(f),m=new Array(f),y=+a.apply(this,arguments),v=Math.min(Wy,Math.max(-Wy,i.apply(this,arguments)-y)),g=Math.min(Math.abs(v)/f,o.apply(this,arguments)),b=g*(v<0?-1:1);for(s=0;s<f;++s)(h=m[d[s]=s]=+e(t[s],s,t))>0&&(p+=h);for(null!=n?d.sort((function(t,e){return n(m[t],m[e])})):null!=r&&d.sort((function(e,n){return r(t[e],t[n])})),s=0,u=p?(v-f*b)/p:0;s<f;++s,y=c)l=d[s],c=y+((h=m[l])>0?h*u:0)+b,m[l]={data:t[l],index:s,value:h,startAngle:y,endAngle:c,padAngle:g};return m}var e=nl,n=el,r=null,a=zs(0),i=zs(Wy),o=zs(0);return t.value=function(n){return arguments.length?(e="function"==typeof n?n:zs(+n),t):e},t.sortValues=function(e){return arguments.length?(n=e,r=null,t):n},t.sort=function(e){return arguments.length?(r=e,n=null,t):r},t.startAngle=function(e){return arguments.length?(a="function"==typeof e?e:zs(+e),t):a},t.endAngle=function(e){return arguments.length?(i="function"==typeof e?e:zs(+e),t):i},t.padAngle=function(e){return arguments.length?(o="function"==typeof e?e:zs(+e),t):o},t},t.areaRadial=sl,t.radialArea=sl,t.lineRadial=ol,t.radialLine=ol,t.pointRadial=ll,t.linkHorizontal=function(){return hl(fl)},t.linkVertical=function(){return hl(pl)},t.linkRadial=function(){var t=hl(dl);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t},t.symbol=function(){function t(){var t;if(r||(r=t=tn()),e.apply(this,arguments).draw(r,+n.apply(this,arguments)),t)return r=null,t+""||null}var e=zs(Zy),n=zs(64),r=null;return t.type=function(n){return arguments.length?(e="function"==typeof n?n:zs(n),t):e},t.size=function(e){return arguments.length?(n="function"==typeof e?e:zs(+e),t):n},t.context=function(e){return arguments.length?(r=null==e?null:e,t):r},t},t.symbols=fv,t.symbolCircle=Zy,t.symbolCross=Qy,t.symbolDiamond=tv,t.symbolSquare=iv,t.symbolStar=av,t.symbolTriangle=sv,t.symbolWye=hv,t.curveBasisClosed=function(t){return new gl(t)},t.curveBasisOpen=function(t){return new bl(t)},t.curveBasis=function(t){return new vl(t)},t.curveBundle=pv,t.curveCardinalClosed=mv,t.curveCardinalOpen=yv,t.curveCardinal=dv,t.curveCatmullRomClosed=gv,t.curveCatmullRomOpen=bv,t.curveCatmullRom=vv,t.curveLinearClosed=function(t){return new Cl(t)},t.curveLinear=Zs,t.curveMonotoneX=function(t){return new Ol(t)},t.curveMonotoneY=function(t){return new jl(t)},t.curveNatural=function(t){return new Ll(t)},t.curveStep=function(t){return new Bl(t,.5)},t.curveStepAfter=function(t){return new Bl(t,1)},t.curveStepBefore=function(t){return new Bl(t,0)},t.stack=function(){function t(t){var i,o,s=e.apply(this,arguments),l=t.length,u=s.length,c=new Array(u);for(i=0;i<u;++i){for(var h,f=s[i],p=c[i]=new Array(l),d=0;d<l;++d)p[d]=h=[0,+a(t[d],f,d,t)],h.data=t[d];p.key=f}for(i=0,o=n(c);i<u;++i)c[o[i]].index=i;return r(c,o),c}var e=zs([]),n=zl,r=Hl,a=ql;return t.keys=function(n){return arguments.length?(e="function"==typeof n?n:zs(Xy.call(n)),t):e},t.value=function(e){return arguments.length?(a="function"==typeof e?e:zs(+e),t):a},t.order=function(e){return arguments.length?(n=null==e?zl:"function"==typeof e?e:zs(Xy.call(e)),t):n},t.offset=function(e){return arguments.length?(r=null==e?Hl:e,t):r},t},t.stackOffsetExpand=function(t,e){if((r=t.length)>0){for(var n,r,a,i=0,o=t[0].length;i<o;++i){for(a=n=0;n<r;++n)a+=t[n][i][1]||0;if(a)for(n=0;n<r;++n)t[n][i][1]/=a}Hl(t,e)}},t.stackOffsetDiverging=function(t,e){if((s=t.length)>1)for(var n,r,a,i,o,s,l=0,u=t[e[0]].length;l<u;++l)for(i=o=0,n=0;n<s;++n)(a=(r=t[e[n]][l])[1]-r[0])>=0?(r[0]=i,r[1]=i+=a):a<0?(r[1]=o,r[0]=o+=a):r[0]=i},t.stackOffsetNone=Hl,t.stackOffsetSilhouette=function(t,e){if((n=t.length)>0){for(var n,r=0,a=t[e[0]],i=a.length;r<i;++r){for(var o=0,s=0;o<n;++o)s+=t[o][r][1]||0;a[r][1]+=a[r][0]=-s/2}Hl(t,e)}},t.stackOffsetWiggle=function(t,e){if((a=t.length)>0&&(r=(n=t[e[0]]).length)>0){for(var n,r,a,i=0,o=1;o<r;++o){for(var s=0,l=0,u=0;s<a;++s){for(var c=t[e[s]],h=c[o][1]||0,f=(h-(c[o-1][1]||0))/2,p=0;p<s;++p){var d=t[e[p]];f+=(d[o][1]||0)-(d[o-1][1]||0)}l+=h,u+=f*h}n[o-1][1]+=n[o-1][0]=i,l&&(i-=u/l)}n[o-1][1]+=n[o-1][0]=i,Hl(t,e)}},t.stackOrderAscending=Gl,t.stackOrderDescending=function(t){return Gl(t).reverse()},t.stackOrderInsideOut=function(t){var e,n,r=t.length,a=t.map(Ul),i=zl(t).sort((function(t,e){return a[e]-a[t]})),o=0,s=0,l=[],u=[];for(e=0;e<r;++e)n=i[e],o<s?(o+=a[n],l.push(n)):(s+=a[n],u.push(n));return u.reverse().concat(l)},t.stackOrderNone=zl,t.stackOrderReverse=function(t){return zl(t).reverse()},t.timeInterval=wo,t.timeMillisecond=cm,t.timeMilliseconds=hm,t.utcMillisecond=cm,t.utcMilliseconds=hm,t.timeSecond=dm,t.timeSeconds=mm,t.utcSecond=dm,t.utcSeconds=mm,t.timeMinute=ym,t.timeMinutes=vm,t.timeHour=gm,t.timeHours=bm,t.timeDay=_m,t.timeDays=xm,t.timeWeek=wm,t.timeWeeks=Cm,t.timeSunday=wm,t.timeSundays=Cm,t.timeMonday=Em,t.timeMondays=Nm,t.timeTuesday=Mm,t.timeTuesdays=Am,t.timeWednesday=Sm,t.timeWednesdays=Pm,t.timeThursday=km,t.timeThursdays=Im,t.timeFriday=Tm,t.timeFridays=Om,t.timeSaturday=Dm,t.timeSaturdays=jm,t.timeMonth=Rm,t.timeMonths=Lm,t.timeYear=Fm,t.timeYears=Bm,t.utcMinute=Hm,t.utcMinutes=zm,t.utcHour=qm,t.utcHours=Gm,t.utcDay=Um,t.utcDays=Vm,t.utcWeek=Ym,t.utcWeeks=Km,t.utcSunday=Ym,t.utcSundays=Km,t.utcMonday=Wm,t.utcMondays=ty,t.utcTuesday=$m,t.utcTuesdays=ey,t.utcWednesday=Xm,t.utcWednesdays=ny,t.utcThursday=Zm,t.utcThursdays=ry,t.utcFriday=Qm,t.utcFridays=ay,t.utcSaturday=Jm,t.utcSaturdays=iy,t.utcMonth=oy,t.utcMonths=sy,t.utcYear=ly,t.utcYears=cy,t.timeFormatDefaultLocale=js,t.timeFormatLocale=Do,t.isoFormat=yy,t.isoParse=vy,t.now=ve,t.timer=_e,t.timerFlush=xe,t.timeout=Se,t.interval=function(t,e,n){var r=new be,a=e;return null==e?(r.restart(t,e,n),r):(e=+e,n=null==n?ve():+n,r.restart((function i(o){o+=a,r.restart(i,a+=e,n),t(o)}),e,n),r)},t.transition=Oe,t.active=function(t,e){var n,r,a=t.__transition;if(a)for(r in e=null==e?null:e+"",a)if((n=a[r]).state>ch&&n.name===e)return new Ie([[t]],qh,e,+r);return null},t.interrupt=Ne,t.voronoi=function(){function t(t){return new yu(t.map((function(r,a){var i=[Math.round(e(r,a,t)/Tv)*Tv,Math.round(n(r,a,t)/Tv)*Tv];return i.index=a,i.data=r,i})),r)}var e=Yl,n=Wl,r=null;return t.polygons=function(e){return t(e).polygons()},t.links=function(e){return t(e).links()},t.triangles=function(e){return t(e).triangles()},t.x=function(n){return arguments.length?(e="function"==typeof n?n:Vl(+n),t):e},t.y=function(e){return arguments.length?(n="function"==typeof e?e:Vl(+e),t):n},t.extent=function(e){return arguments.length?(r=null==e?null:[[+e[0][0],+e[0][1]],[+e[1][0],+e[1][1]]],t):r&&[[r[0][0],r[0][1]],[r[1][0],r[1][1]]]},t.size=function(e){return arguments.length?(r=null==e?null:[[0,0],[+e[0],+e[1]]],t):r&&[r[1][0]-r[0][0],r[1][1]-r[0][1]]},t},t.zoom=function(){function e(t){t.property("__zoom",Mu).on("wheel.zoom",l).on("mousedown.zoom",u).on("dblclick.zoom",c).filter(_).on("touchstart.zoom",h).on("touchmove.zoom",f).on("touchend.zoom touchcancel.zoom",p).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function n(t,e){return(e=Math.max(x[0],Math.min(x[1],e)))===t.k?t:new gu(e,t.x,t.y)}function r(t,e,n){var r=e[0]-n[0]*t.k,a=e[1]-n[1]*t.k;return r===t.x&&a===t.y?t:new gu(t.k,r,a)}function a(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function i(t,e,n){t.on("start.zoom",(function(){o(this,arguments).start()})).on("interrupt.zoom end.zoom",(function(){o(this,arguments).end()})).tween("zoom",(function(){var t=arguments,r=o(this,t),i=v.apply(this,t),s=n||a(i),l=Math.max(i[1][0]-i[0][0],i[1][1]-i[0][1]),u=this.__zoom,c="function"==typeof e?e.apply(this,t):e,h=M(u.invert(s).concat(l/u.k),c.invert(s).concat(l/c.k));return function(t){if(1===t)t=c;else{var e=h(t),n=l/e[2];t=new gu(n,s[0]-e[0]*n,s[1]-e[1]*n)}r.zoom(null,t)}}))}function o(t,e){for(var n,r=0,a=k.length;r<a;++r)if((n=k[r]).that===t)return n;return new s(t,e)}function s(t,e){this.that=t,this.args=e,this.index=-1,this.active=0,this.extent=v.apply(t,e)}function l(){if(y.apply(this,arguments)){var t=o(this,arguments),e=this.__zoom,a=Math.max(x[0],Math.min(x[1],e.k*Math.pow(2,b.apply(this,arguments)))),i=pt(this);if(t.wheel)t.mouse[0][0]===i[0]&&t.mouse[0][1]===i[1]||(t.mouse[1]=e.invert(t.mouse[0]=i)),clearTimeout(t.wheel);else{if(e.k===a)return;t.mouse=[i,e.invert(i)],Ne(this),t.start()}xu(),t.wheel=setTimeout((function(){t.wheel=null,t.end()}),C),t.zoom("mouse",g(r(n(e,a),t.mouse[0],t.mouse[1]),t.extent,w))}}function u(){if(!m&&y.apply(this,arguments)){var e=o(this,arguments),n=lt(t.event.view).on("mousemove.zoom",(function(){if(xu(),!e.moved){var n=t.event.clientX-i,a=t.event.clientY-s;e.moved=n*n+a*a>N}e.zoom("mouse",g(r(e.that.__zoom,e.mouse[0]=pt(e.that),e.mouse[1]),e.extent,w))}),!0).on("mouseup.zoom",(function(){n.on("mousemove.zoom mouseup.zoom",null),gt(t.event.view,e.moved),xu(),e.end()}),!0),a=pt(this),i=t.event.clientX,s=t.event.clientY;vt(t.event.view),_u(),e.mouse=[a,this.__zoom.invert(a)],Ne(this),e.start()}}function c(){if(y.apply(this,arguments)){var a=this.__zoom,o=pt(this),s=a.invert(o),l=a.k*(t.event.shiftKey?.5:2),u=g(r(n(a,l),o,s),v.apply(this,arguments),w);xu(),E>0?lt(this).transition().duration(E).call(i,u,o):lt(this).call(e.transform,u)}}function h(){if(y.apply(this,arguments)){var e,n,r,a,i=o(this,arguments),s=t.event.changedTouches,l=s.length;for(_u(),n=0;n<l;++n)a=[a=dt(this,s,(r=s[n]).identifier),this.__zoom.invert(a),r.identifier],i.touch0?i.touch1||(i.touch1=a):(i.touch0=a,e=!0);if(d&&(d=clearTimeout(d),!i.touch1))return i.end(),void((a=lt(this).on("dblclick.zoom"))&&a.apply(this,arguments));e&&(d=setTimeout((function(){d=null}),D),Ne(this),i.start())}}function f(){var e,a,i,s,l=o(this,arguments),u=t.event.changedTouches,c=u.length;for(xu(),d&&(d=clearTimeout(d)),e=0;e<c;++e)i=dt(this,u,(a=u[e]).identifier),l.touch0&&l.touch0[2]===a.identifier?l.touch0[0]=i:l.touch1&&l.touch1[2]===a.identifier&&(l.touch1[0]=i);if(a=l.that.__zoom,l.touch1){var h=l.touch0[0],f=l.touch0[1],p=l.touch1[0],m=l.touch1[1],y=(y=p[0]-h[0])*y+(y=p[1]-h[1])*y,v=(v=m[0]-f[0])*v+(v=m[1]-f[1])*v;a=n(a,Math.sqrt(y/v)),i=[(h[0]+p[0])/2,(h[1]+p[1])/2],s=[(f[0]+m[0])/2,(f[1]+m[1])/2]}else{if(!l.touch0)return;i=l.touch0[0],s=l.touch0[1]}l.zoom("touch",g(r(a,i,s),l.extent,w))}function p(){var e,n,r=o(this,arguments),a=t.event.changedTouches,i=a.length;for(_u(),m&&clearTimeout(m),m=setTimeout((function(){m=null}),D),e=0;e<i;++e)n=a[e],r.touch0&&r.touch0[2]===n.identifier?delete r.touch0:r.touch1&&r.touch1[2]===n.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}var d,m,y=wu,v=Eu,g=Tu,b=Su,_=ku,x=[0,1/0],w=[[-1/0,-1/0],[1/0,1/0]],E=250,M=pe,k=[],T=S("start","zoom","end"),D=500,C=150,N=0;return e.transform=function(t,e){var n=t.selection?t.selection():t;n.property("__zoom",Mu),t!==n?i(t,e):n.interrupt().each((function(){o(this,arguments).start().zoom(null,"function"==typeof e?e.apply(this,arguments):e).end()}))},e.scaleBy=function(t,n){e.scaleTo(t,(function(){return this.__zoom.k*("function"==typeof n?n.apply(this,arguments):n)}))},e.scaleTo=function(t,i){e.transform(t,(function(){var t=v.apply(this,arguments),e=this.__zoom,o=a(t),s=e.invert(o),l="function"==typeof i?i.apply(this,arguments):i;return g(r(n(e,l),o,s),t,w)}))},e.translateBy=function(t,n,r){e.transform(t,(function(){return g(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof r?r.apply(this,arguments):r),v.apply(this,arguments),w)}))},e.translateTo=function(t,n,r){e.transform(t,(function(){var t=v.apply(this,arguments),e=this.__zoom,i=a(t);return g(Cv.translate(i[0],i[1]).scale(e.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof r?-r.apply(this,arguments):-r),t,w)}))},s.prototype={start:function(){return 1==++this.active&&(this.index=k.push(this)-1,this.emit("start")),this},zoom:function(t,e){return this.mouse&&"mouse"!==t&&(this.mouse[1]=e.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=e.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=e.invert(this.touch1[0])),this.that.__zoom=e,this.emit("zoom"),this},end:function(){return 0==--this.active&&(k.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){at(new function(t,e,n){this.target=t,this.type=e,this.transform=n}(e,t,this.that.__zoom),T.apply,T,[t,this.that,this.args])}},e.wheelDelta=function(t){return arguments.length?(b="function"==typeof t?t:vu(+t),e):b},e.filter=function(t){return arguments.length?(y="function"==typeof t?t:vu(!!t),e):y},e.touchable=function(t){return arguments.length?(_="function"==typeof t?t:vu(!!t),e):_},e.extent=function(t){return arguments.length?(v="function"==typeof t?t:vu([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),e):v},e.scaleExtent=function(t){return arguments.length?(x[0]=+t[0],x[1]=+t[1],e):[x[0],x[1]]},e.translateExtent=function(t){return arguments.length?(w[0][0]=+t[0][0],w[1][0]=+t[1][0],w[0][1]=+t[0][1],w[1][1]=+t[1][1],e):[[w[0][0],w[0][1]],[w[1][0],w[1][1]]]},e.constrain=function(t){return arguments.length?(g=t,e):g},e.duration=function(t){return arguments.length?(E=+t,e):E},e.interpolate=function(t){return arguments.length?(M=t,e):M},e.on=function(){var t=T.on.apply(T,arguments);return t===T?e:t},e.clickDistance=function(t){return arguments.length?(N=(t=+t)*t,e):Math.sqrt(N)},e},t.zoomTransform=bu,t.zoomIdentity=Cv,Object.defineProperty(t,"__esModule",{value:!0})}(e)},function(t,e,n){"use strict";e.decode=e.parse=n(23),e.encode=e.stringify=n(24)},function(t,e,n){"use strict";e.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},i=h(n(11)),o=h(n(13)),s=n(14),l=n(12),u=h(n(17)),c=n(18);function h(t){return t&&t.__esModule?t:{default:t}}var f=function(){try{return window.history.state||{}}catch(t){return{}}};e.default=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,o.default)(c.canUseDOM,"Browser history needs a DOM");var e=window.history,n=(0,c.supportsHistory)(),h=!(0,c.supportsPopStateOnHashChange)(),p=t.forceRefresh,d=void 0!==p&&p,m=t.getUserConfirmation,y=void 0===m?c.getConfirmation:m,v=t.keyLength,g=void 0===v?6:v,b=t.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(t.basename)):"",_=function(t){var e=t||{},n=e.key,r=e.state,a=window.location,o=a.pathname+a.search+a.hash;return(0,i.default)(!b||(0,l.hasBasename)(o,b),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+o+'" to begin with "'+b+'".'),b&&(o=(0,l.stripBasename)(o,b)),(0,s.createLocation)(o,r,n)},x=function(){return Math.random().toString(36).substr(2,g)},w=(0,u.default)(),E=function(t){a(q,t),q.length=e.length,w.notifyListeners(q.location,q.action)},M=function(t){(0,c.isExtraneousPopstateEvent)(t)||T(_(t.state))},S=function(){T(_(f()))},k=!1,T=function(t){if(k)k=!1,E();else{w.confirmTransitionTo(t,"POP",y,(function(e){e?E({action:"POP",location:t}):D(t)}))}},D=function(t){var e=q.location,n=N.indexOf(e.key);-1===n&&(n=0);var r=N.indexOf(t.key);-1===r&&(r=0);var a=n-r;a&&(k=!0,O(a))},C=_(f()),N=[C.key],A=function(t){return b+(0,l.createPath)(t)},P=function(t,a){(0,i.default)(!("object"===(void 0===t?"undefined":r(t))&&void 0!==t.state&&void 0!==a),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(t,a,x(),q.location);w.confirmTransitionTo(o,"PUSH",y,(function(t){if(t){var r=A(o),a=o.key,s=o.state;if(n)if(e.pushState({key:a,state:s},null,r),d)window.location.href=r;else{var l=N.indexOf(q.location.key),u=N.slice(0,-1===l?0:l+1);u.push(o.key),N=u,E({action:"PUSH",location:o})}else(0,i.default)(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}}))},I=function(t,a){(0,i.default)(!("object"===(void 0===t?"undefined":r(t))&&void 0!==t.state&&void 0!==a),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(t,a,x(),q.location);w.confirmTransitionTo(o,"REPLACE",y,(function(t){if(t){var r=A(o),a=o.key,s=o.state;if(n)if(e.replaceState({key:a,state:s},null,r),d)window.location.replace(r);else{var l=N.indexOf(q.location.key);-1!==l&&(N[l]=o.key),E({action:"REPLACE",location:o})}else(0,i.default)(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}}))},O=function(t){e.go(t)},j=function(){return O(-1)},R=function(){return O(1)},L=0,F=function(t){1===(L+=t)?((0,c.addEventListener)(window,"popstate",M),h&&(0,c.addEventListener)(window,"hashchange",S)):0===L&&((0,c.removeEventListener)(window,"popstate",M),h&&(0,c.removeEventListener)(window,"hashchange",S))},B=!1,H=function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=w.setPrompt(t);return B||(F(1),B=!0),function(){return B&&(B=!1,F(-1)),e()}},z=function(t){var e=w.appendListener(t);return F(1),function(){F(-1),e()}},q={length:e.length,action:"POP",location:C,createHref:A,push:P,replace:I,go:O,goBack:j,goForward:R,block:H,listen:z};return q}},function(t,e){t.exports=L},function(t,e){t.exports=ReactRouterDOM},function(t,e){t.exports=ReactDOM},function(t,e,n){"use strict";n.r(e);var r=484813681109536e-20,a=Math.PI/2,i=.017453292519943295,o=57.29577951308232,s=Math.PI/4,l=2*Math.PI,u=3.14159265359,c={greenwich:0,lisbon:-9.131906111111,paris:2.337229166667,bogota:-74.080916666667,madrid:-3.687938888889,rome:12.452333333333,bern:7.439583333333,jakarta:106.807719444444,ferro:-17.666666666667,brussels:4.367975,stockholm:18.058277777778,athens:23.7163375,oslo:10.722916666667},h={ft:{to_meter:.3048},"us-ft":{to_meter:1200/3937}},f=/[\s_\-\/\(\)]/g;function p(t,e){if(t[e])return t[e];for(var n,r=Object.keys(t),a=e.toLowerCase().replace(f,""),i=-1;++i<r.length;)if((n=r[i]).toLowerCase().replace(f,"")===a)return t[n]}var d=function(t){var e,n,r,a={},o=t.split("+").map((function(t){return t.trim()})).filter((function(t){return t})).reduce((function(t,e){var n=e.split("=");return n.push(!0),t[n[0].toLowerCase()]=n[1],t}),{}),s={proj:"projName",datum:"datumCode",rf:function(t){a.rf=parseFloat(t)},lat_0:function(t){a.lat0=t*i},lat_1:function(t){a.lat1=t*i},lat_2:function(t){a.lat2=t*i},lat_ts:function(t){a.lat_ts=t*i},lon_0:function(t){a.long0=t*i},lon_1:function(t){a.long1=t*i},lon_2:function(t){a.long2=t*i},alpha:function(t){a.alpha=parseFloat(t)*i},lonc:function(t){a.longc=t*i},x_0:function(t){a.x0=parseFloat(t)},y_0:function(t){a.y0=parseFloat(t)},k_0:function(t){a.k0=parseFloat(t)},k:function(t){a.k0=parseFloat(t)},a:function(t){a.a=parseFloat(t)},b:function(t){a.b=parseFloat(t)},r_a:function(){a.R_A=!0},zone:function(t){a.zone=parseInt(t,10)},south:function(){a.utmSouth=!0},towgs84:function(t){a.datum_params=t.split(",").map((function(t){return parseFloat(t)}))},to_meter:function(t){a.to_meter=parseFloat(t)},units:function(t){a.units=t;var e=p(h,t);e&&(a.to_meter=e.to_meter)},from_greenwich:function(t){a.from_greenwich=t*i},pm:function(t){var e=p(c,t);a.from_greenwich=(e||parseFloat(t))*i},nadgrids:function(t){"@null"===t?a.datumCode="none":a.nadgrids=t},axis:function(t){3===t.length&&-1!=="ewnsud".indexOf(t.substr(0,1))&&-1!=="ewnsud".indexOf(t.substr(1,1))&&-1!=="ewnsud".indexOf(t.substr(2,1))&&(a.axis=t)}};for(e in o)n=o[e],e in s?"function"==typeof(r=s[e])?r(n):a[r]=n:a[e]=n;return"string"==typeof a.datumCode&&"WGS84"!==a.datumCode&&(a.datumCode=a.datumCode.toLowerCase()),a},m=function(t){return new x(t).output()},y=/\s/,v=/[A-Za-z]/,g=/[A-Za-z84]/,b=/[,\]]/,_=/[\d\.E\-\+]/;function x(t){if("string"!=typeof t)throw new Error("not a string");this.text=t.trim(),this.level=0,this.place=0,this.root=null,this.stack=[],this.currentObject=null,this.state=1}function w(t,e,n){Array.isArray(e)&&(n.unshift(e),e=null);var r=e?{}:t,a=n.reduce((function(t,e){return E(e,t),t}),r);e&&(t[e]=a)}function E(t,e){if(Array.isArray(t)){var n=t.shift();if("PARAMETER"===n&&(n=t.shift()),1===t.length)return Array.isArray(t[0])?(e[n]={},void E(t[0],e[n])):void(e[n]=t[0]);if(t.length)if("TOWGS84"!==n){if("AXIS"===n)return n in e||(e[n]=[]),void e[n].push(t);var r;switch(Array.isArray(n)||(e[n]={}),n){case"UNIT":case"PRIMEM":case"VERT_DATUM":return e[n]={name:t[0].toLowerCase(),convert:t[1]},void(3===t.length&&E(t[2],e[n]));case"SPHEROID":case"ELLIPSOID":return e[n]={name:t[0],a:t[1],rf:t[2]},void(4===t.length&&E(t[3],e[n]));case"PROJECTEDCRS":case"PROJCRS":case"GEOGCS":case"GEOCCS":case"PROJCS":case"LOCAL_CS":case"GEODCRS":case"GEODETICCRS":case"GEODETICDATUM":case"EDATUM":case"ENGINEERINGDATUM":case"VERT_CS":case"VERTCRS":case"VERTICALCRS":case"COMPD_CS":case"COMPOUNDCRS":case"ENGINEERINGCRS":case"ENGCRS":case"FITTED_CS":case"LOCAL_DATUM":case"DATUM":return t[0]=["name",t[0]],void w(e,n,t);default:for(r=-1;++r<t.length;)if(!Array.isArray(t[r]))return E(t,e[n]);return w(e,n,t)}}else e[n]=t;else e[n]=!0}else e[t]=!0}x.prototype.readCharicter=function(){var t=this.text[this.place++];if(4!==this.state)for(;y.test(t);){if(this.place>=this.text.length)return;t=this.text[this.place++]}switch(this.state){case 1:return this.neutral(t);case 2:return this.keyword(t);case 4:return this.quoted(t);case 5:return this.afterquote(t);case 3:return this.number(t);case-1:return}},x.prototype.afterquote=function(t){if('"'===t)return this.word+='"',void(this.state=4);if(b.test(t))return this.word=this.word.trim(),void this.afterItem(t);throw new Error("havn't handled \""+t+'" in afterquote yet, index '+this.place)},x.prototype.afterItem=function(t){return","===t?(null!==this.word&&this.currentObject.push(this.word),this.word=null,void(this.state=1)):"]"===t?(this.level--,null!==this.word&&(this.currentObject.push(this.word),this.word=null),this.state=1,this.currentObject=this.stack.pop(),void(this.currentObject||(this.state=-1))):void 0},x.prototype.number=function(t){if(!_.test(t)){if(b.test(t))return this.word=parseFloat(this.word),void this.afterItem(t);throw new Error("havn't handled \""+t+'" in number yet, index '+this.place)}this.word+=t},x.prototype.quoted=function(t){'"'!==t?this.word+=t:this.state=5},x.prototype.keyword=function(t){if(g.test(t))this.word+=t;else{if("["===t){var e=[];return e.push(this.word),this.level++,null===this.root?this.root=e:this.currentObject.push(e),this.stack.push(this.currentObject),this.currentObject=e,void(this.state=1)}if(!b.test(t))throw new Error("havn't handled \""+t+'" in keyword yet, index '+this.place);this.afterItem(t)}},x.prototype.neutral=function(t){if(v.test(t))return this.word=t,void(this.state=2);if('"'===t)return this.word="",void(this.state=4);if(_.test(t))return this.word=t,void(this.state=3);if(!b.test(t))throw new Error("havn't handled \""+t+'" in neutral yet, index '+this.place);this.afterItem(t)},x.prototype.output=function(){for(;this.place<this.text.length;)this.readCharicter();if(-1===this.state)return this.root;throw new Error('unable to parse string "'+this.text+'". State is '+this.state)};function M(t){return.017453292519943295*t}var S=function(t){var e=m(t),n=e.shift(),r=e.shift();e.unshift(["name",r]),e.unshift(["type",n]);var a={};return E(e,a),function(t){if("GEOGCS"===t.type?t.projName="longlat":"LOCAL_CS"===t.type?(t.projName="identity",t.local=!0):"object"==typeof t.PROJECTION?t.projName=Object.keys(t.PROJECTION)[0]:t.projName=t.PROJECTION,t.AXIS){for(var e="",n=0,r=t.AXIS.length;n<r;++n){var a=t.AXIS[n][0].toLowerCase();-1!==a.indexOf("north")?e+="n":-1!==a.indexOf("south")?e+="s":-1!==a.indexOf("east")?e+="e":-1!==a.indexOf("west")&&(e+="w")}2===e.length&&(e+="u"),3===e.length&&(t.axis=e)}t.UNIT&&(t.units=t.UNIT.name.toLowerCase(),"metre"===t.units&&(t.units="meter"),t.UNIT.convert&&("GEOGCS"===t.type?t.DATUM&&t.DATUM.SPHEROID&&(t.to_meter=t.UNIT.convert*t.DATUM.SPHEROID.a):t.to_meter=t.UNIT.convert));var i=t.GEOGCS;function o(e){return e*(t.to_meter||1)}"GEOGCS"===t.type&&(i=t),i&&(i.DATUM?t.datumCode=i.DATUM.name.toLowerCase():t.datumCode=i.name.toLowerCase(),"d_"===t.datumCode.slice(0,2)&&(t.datumCode=t.datumCode.slice(2)),"new_zealand_geodetic_datum_1949"!==t.datumCode&&"new_zealand_1949"!==t.datumCode||(t.datumCode="nzgd49"),"wgs_1984"!==t.datumCode&&"world_geodetic_system_1984"!==t.datumCode||("Mercator_Auxiliary_Sphere"===t.PROJECTION&&(t.sphere=!0),t.datumCode="wgs84"),"_ferro"===t.datumCode.slice(-6)&&(t.datumCode=t.datumCode.slice(0,-6)),"_jakarta"===t.datumCode.slice(-8)&&(t.datumCode=t.datumCode.slice(0,-8)),~t.datumCode.indexOf("belge")&&(t.datumCode="rnb72"),i.DATUM&&i.DATUM.SPHEROID&&(t.ellps=i.DATUM.SPHEROID.name.replace("_19","").replace(/[Cc]larke\_18/,"clrk"),"international"===t.ellps.toLowerCase().slice(0,13)&&(t.ellps="intl"),t.a=i.DATUM.SPHEROID.a,t.rf=parseFloat(i.DATUM.SPHEROID.rf,10)),i.DATUM&&i.DATUM.TOWGS84&&(t.datum_params=i.DATUM.TOWGS84),~t.datumCode.indexOf("osgb_1936")&&(t.datumCode="osgb36"),~t.datumCode.indexOf("osni_1952")&&(t.datumCode="osni52"),(~t.datumCode.indexOf("tm65")||~t.datumCode.indexOf("geodetic_datum_of_1965"))&&(t.datumCode="ire65"),"ch1903+"===t.datumCode&&(t.datumCode="ch1903"),~t.datumCode.indexOf("israel")&&(t.datumCode="isr93")),t.b&&!isFinite(t.b)&&(t.b=t.a),[["standard_parallel_1","Standard_Parallel_1"],["standard_parallel_2","Standard_Parallel_2"],["false_easting","False_Easting"],["false_northing","False_Northing"],["central_meridian","Central_Meridian"],["latitude_of_origin","Latitude_Of_Origin"],["latitude_of_origin","Central_Parallel"],["scale_factor","Scale_Factor"],["k0","scale_factor"],["latitude_of_center","Latitude_Of_Center"],["latitude_of_center","Latitude_of_center"],["lat0","latitude_of_center",M],["longitude_of_center","Longitude_Of_Center"],["longitude_of_center","Longitude_of_center"],["longc","longitude_of_center",M],["x0","false_easting",o],["y0","false_northing",o],["long0","central_meridian",M],["lat0","latitude_of_origin",M],["lat0","standard_parallel_1",M],["lat1","standard_parallel_1",M],["lat2","standard_parallel_2",M],["azimuth","Azimuth"],["alpha","azimuth",M],["srsCode","name"]].forEach((function(e){return n=t,a=(r=e)[0],i=r[1],void(!(a in n)&&i in n&&(n[a]=n[i],3===r.length&&(n[a]=r[2](n[a]))));var n,r,a,i})),t.long0||!t.longc||"Albers_Conic_Equal_Area"!==t.projName&&"Lambert_Azimuthal_Equal_Area"!==t.projName||(t.long0=t.longc),t.lat_ts||!t.lat1||"Stereographic_South_Pole"!==t.projName&&"Polar Stereographic (variant B)"!==t.projName||(t.lat0=M(t.lat1>0?90:-90),t.lat_ts=t.lat1)}(a),a};function k(t){var e=this;if(2===arguments.length){var n=arguments[1];"string"==typeof n?"+"===n.charAt(0)?k[t]=d(arguments[1]):k[t]=S(arguments[1]):k[t]=n}else if(1===arguments.length){if(Array.isArray(t))return t.map((function(t){Array.isArray(t)?k.apply(e,t):k(t)}));if("string"==typeof t){if(t in k)return k[t]}else"EPSG"in t?k["EPSG:"+t.EPSG]=t:"ESRI"in t?k["ESRI:"+t.ESRI]=t:"IAU2000"in t?k["IAU2000:"+t.IAU2000]=t:console.log(t);return}}!function(t){t("EPSG:4326","+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees"),t("EPSG:4269","+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees"),t("EPSG:3857","+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs"),t.WGS84=t["EPSG:4326"],t["EPSG:3785"]=t["EPSG:3857"],t.GOOGLE=t["EPSG:3857"],t["EPSG:900913"]=t["EPSG:3857"],t["EPSG:102113"]=t["EPSG:3857"]}(k);var T=k;var D=["PROJECTEDCRS","PROJCRS","GEOGCS","GEOCCS","PROJCS","LOCAL_CS","GEODCRS","GEODETICCRS","GEODETICDATUM","ENGCRS","ENGINEERINGCRS"];var C=["3857","900913","3785","102113"];var N=function(t){if(!function(t){return"string"==typeof t}(t))return t;if(function(t){return t in T}(t))return T[t];if(function(t){return D.some((function(e){return t.indexOf(e)>-1}))}(t)){var e=S(t);if(function(t){var e=p(t,"authority");if(e){var n=p(e,"epsg");return n&&C.indexOf(n)>-1}}(e))return T["EPSG:3857"];var n=function(t){var e=p(t,"extension");if(e)return p(e,"proj4")}(e);return n?d(n):e}return function(t){return"+"===t[0]}(t)?d(t):void 0},A=function(t,e){var n,r;if(t=t||{},!e)return t;for(r in e)void 0!==(n=e[r])&&(t[r]=n);return t},P=function(t,e,n){var r=t*e;return n/Math.sqrt(1-r*r)},I=function(t){return t<0?-1:1},O=function(t){return Math.abs(t)<=u?t:t-I(t)*l},j=function(t,e,n){var r=t*n,i=.5*t;return r=Math.pow((1-r)/(1+r),i),Math.tan(.5*(a-e))/r},R=function(t,e){for(var n,r,i=.5*t,o=a-2*Math.atan(e),s=0;s<=15;s++)if(n=t*Math.sin(o),o+=r=a-2*Math.atan(e*Math.pow((1-n)/(1+n),i))-o,Math.abs(r)<=1e-10)return o;return-9999};function L(t){return t}var F=[{init:function(){var t=this.b/this.a;this.es=1-t*t,"x0"in this||(this.x0=0),"y0"in this||(this.y0=0),this.e=Math.sqrt(this.es),this.lat_ts?this.sphere?this.k0=Math.cos(this.lat_ts):this.k0=P(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)):this.k0||(this.k?this.k0=this.k:this.k0=1)},forward:function(t){var e,n,r=t.x,i=t.y;if(i*o>90&&i*o<-90&&r*o>180&&r*o<-180)return null;if(Math.abs(Math.abs(i)-a)<=1e-10)return null;if(this.sphere)e=this.x0+this.a*this.k0*O(r-this.long0),n=this.y0+this.a*this.k0*Math.log(Math.tan(s+.5*i));else{var l=Math.sin(i),u=j(this.e,i,l);e=this.x0+this.a*this.k0*O(r-this.long0),n=this.y0-this.a*this.k0*Math.log(u)}return t.x=e,t.y=n,t},inverse:function(t){var e,n,r=t.x-this.x0,i=t.y-this.y0;if(this.sphere)n=a-2*Math.atan(Math.exp(-i/(this.a*this.k0)));else{var o=Math.exp(-i/(this.a*this.k0));if(-9999===(n=R(this.e,o)))return null}return e=O(this.long0+r/(this.a*this.k0)),t.x=e,t.y=n,t},names:["Mercator","Popular Visualisation Pseudo Mercator","Mercator_1SP","Mercator_Auxiliary_Sphere","merc"]},{init:function(){},forward:L,inverse:L,names:["longlat","identity"]}],B={},H=[];function z(t,e){var n=H.length;return t.names?(H[n]=t,t.names.forEach((function(t){B[t.toLowerCase()]=n})),this):(console.log(e),!0)}var q={start:function(){F.forEach(z)},add:z,get:function(t){if(!t)return!1;var e=t.toLowerCase();return void 0!==B[e]&&H[B[e]]?H[B[e]]:void 0}},G={MERIT:{a:6378137,rf:298.257,ellipseName:"MERIT 1983"},SGS85:{a:6378136,rf:298.257,ellipseName:"Soviet Geodetic System 85"},GRS80:{a:6378137,rf:298.257222101,ellipseName:"GRS 1980(IUGG, 1980)"},IAU76:{a:6378140,rf:298.257,ellipseName:"IAU 1976"},airy:{a:6377563.396,b:6356256.91,ellipseName:"Airy 1830"},APL4:{a:6378137,rf:298.25,ellipseName:"Appl. Physics. 1965"},NWL9D:{a:6378145,rf:298.25,ellipseName:"Naval Weapons Lab., 1965"},mod_airy:{a:6377340.189,b:6356034.446,ellipseName:"Modified Airy"},andrae:{a:6377104.43,rf:300,ellipseName:"Andrae 1876 (Den., Iclnd.)"},aust_SA:{a:6378160,rf:298.25,ellipseName:"Australian Natl & S. Amer. 1969"},GRS67:{a:6378160,rf:298.247167427,ellipseName:"GRS 67(IUGG 1967)"},bessel:{a:6377397.155,rf:299.1528128,ellipseName:"Bessel 1841"},bess_nam:{a:6377483.865,rf:299.1528128,ellipseName:"Bessel 1841 (Namibia)"},clrk66:{a:6378206.4,b:6356583.8,ellipseName:"Clarke 1866"},clrk80:{a:6378249.145,rf:293.4663,ellipseName:"Clarke 1880 mod."},clrk58:{a:6378293.645208759,rf:294.2606763692654,ellipseName:"Clarke 1858"},CPM:{a:6375738.7,rf:334.29,ellipseName:"Comm. des Poids et Mesures 1799"},delmbr:{a:6376428,rf:311.5,ellipseName:"Delambre 1810 (Belgium)"},engelis:{a:6378136.05,rf:298.2566,ellipseName:"Engelis 1985"},evrst30:{a:6377276.345,rf:300.8017,ellipseName:"Everest 1830"},evrst48:{a:6377304.063,rf:300.8017,ellipseName:"Everest 1948"},evrst56:{a:6377301.243,rf:300.8017,ellipseName:"Everest 1956"},evrst69:{a:6377295.664,rf:300.8017,ellipseName:"Everest 1969"},evrstSS:{a:6377298.556,rf:300.8017,ellipseName:"Everest (Sabah & Sarawak)"},fschr60:{a:6378166,rf:298.3,ellipseName:"Fischer (Mercury Datum) 1960"},fschr60m:{a:6378155,rf:298.3,ellipseName:"Fischer 1960"},fschr68:{a:6378150,rf:298.3,ellipseName:"Fischer 1968"},helmert:{a:6378200,rf:298.3,ellipseName:"Helmert 1906"},hough:{a:6378270,rf:297,ellipseName:"Hough"},intl:{a:6378388,rf:297,ellipseName:"International 1909 (Hayford)"},kaula:{a:6378163,rf:298.24,ellipseName:"Kaula 1961"},lerch:{a:6378139,rf:298.257,ellipseName:"Lerch 1979"},mprts:{a:6397300,rf:191,ellipseName:"Maupertius 1738"},new_intl:{a:6378157.5,b:6356772.2,ellipseName:"New International 1967"},plessis:{a:6376523,rf:6355863,ellipseName:"Plessis 1817 (France)"},krass:{a:6378245,rf:298.3,ellipseName:"Krassovsky, 1942"},SEasia:{a:6378155,b:6356773.3205,ellipseName:"Southeast Asia"},walbeck:{a:6376896,b:6355834.8467,ellipseName:"Walbeck"},WGS60:{a:6378165,rf:298.3,ellipseName:"WGS 60"},WGS66:{a:6378145,rf:298.25,ellipseName:"WGS 66"},WGS7:{a:6378135,rf:298.26,ellipseName:"WGS 72"}},U=G.WGS84={a:6378137,rf:298.257223563,ellipseName:"WGS 84"};G.sphere={a:6370997,b:6370997,ellipseName:"Normal Sphere (r=6370997)"};var V={};V.wgs84={towgs84:"0,0,0",ellipse:"WGS84",datumName:"WGS84"},V.ch1903={towgs84:"674.374,15.056,405.346",ellipse:"bessel",datumName:"swiss"},V.ggrs87={towgs84:"-199.87,74.79,246.62",ellipse:"GRS80",datumName:"Greek_Geodetic_Reference_System_1987"},V.nad83={towgs84:"0,0,0",ellipse:"GRS80",datumName:"North_American_Datum_1983"},V.nad27={nadgrids:"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat",ellipse:"clrk66",datumName:"North_American_Datum_1927"},V.potsdam={towgs84:"606.0,23.0,413.0",ellipse:"bessel",datumName:"Potsdam Rauenberg 1950 DHDN"},V.carthage={towgs84:"-263.0,6.0,431.0",ellipse:"clark80",datumName:"Carthage 1934 Tunisia"},V.hermannskogel={towgs84:"653.0,-212.0,449.0",ellipse:"bessel",datumName:"Hermannskogel"},V.osni52={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"airy",datumName:"Irish National"},V.ire65={towgs84:"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15",ellipse:"mod_airy",datumName:"Ireland 1965"},V.rassadiran={towgs84:"-133.63,-157.5,-158.62",ellipse:"intl",datumName:"Rassadiran"},V.nzgd49={towgs84:"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993",ellipse:"intl",datumName:"New Zealand Geodetic Datum 1949"},V.osgb36={towgs84:"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894",ellipse:"airy",datumName:"Airy 1830"},V.s_jtsk={towgs84:"589,76,480",ellipse:"bessel",datumName:"S-JTSK (Ferro)"},V.beduaram={towgs84:"-106,-87,188",ellipse:"clrk80",datumName:"Beduaram"},V.gunung_segara={towgs84:"-403,684,41",ellipse:"bessel",datumName:"Gunung Segara Jakarta"},V.rnb72={towgs84:"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1",ellipse:"intl",datumName:"Reseau National Belge 1972"};var Y=function(t,e,n,a,i,o){var s={};return s.datum_type=void 0===t||"none"===t?5:4,e&&(s.datum_params=e.map(parseFloat),0===s.datum_params[0]&&0===s.datum_params[1]&&0===s.datum_params[2]||(s.datum_type=1),s.datum_params.length>3&&(0===s.datum_params[3]&&0===s.datum_params[4]&&0===s.datum_params[5]&&0===s.datum_params[6]||(s.datum_type=2,s.datum_params[3]*=r,s.datum_params[4]*=r,s.datum_params[5]*=r,s.datum_params[6]=s.datum_params[6]/1e6+1))),s.a=n,s.b=a,s.es=i,s.ep2=o,s};function W(t,e){if(!(this instanceof W))return new W(t);e=e||function(t){if(t)throw t};var n=N(t);if("object"==typeof n){var r=W.projections.get(n.projName);if(r){if(n.datumCode&&"none"!==n.datumCode){var a=p(V,n.datumCode);a&&(n.datum_params=a.towgs84?a.towgs84.split(","):null,n.ellps=a.ellipse,n.datumName=a.datumName?a.datumName:n.datumCode)}n.k0=n.k0||1,n.axis=n.axis||"enu",n.ellps=n.ellps||"wgs84";var i,o,s,l,u,c,h,f=function(t,e,n,r,a){if(!t){var i=p(G,r);i||(i=U),t=i.a,e=i.b,n=i.rf}return n&&!e&&(e=(1-1/n)*t),(0===n||Math.abs(t-e)<1e-10)&&(a=!0,e=t),{a:t,b:e,rf:n,sphere:a}}(n.a,n.b,n.rf,n.ellps,n.sphere),d=(i=f.a,o=f.b,f.rf,s=n.R_A,c=((l=i*i)-(u=o*o))/l,h=0,s?(l=(i*=1-c*(.16666666666666666+c*(.04722222222222222+.022156084656084655*c)))*i,c=0):h=Math.sqrt(c),{es:c,e:h,ep2:(l-u)/u}),m=n.datum||Y(n.datumCode,n.datum_params,f.a,f.b,d.es,d.ep2);A(this,n),A(this,r),this.a=f.a,this.b=f.b,this.rf=f.rf,this.sphere=f.sphere,this.es=d.es,this.e=d.e,this.ep2=d.ep2,this.datum=m,this.init(),e(null,this)}else e(t)}else e(t)}W.projections=q,W.projections.start();var $=W;function X(t,e,n){var r,i,o,s,l=t.x,u=t.y,c=t.z?t.z:0;if(u<-a&&u>-1.001*a)u=-a;else if(u>a&&u<1.001*a)u=a;else{if(u<-a)return{x:-1/0,y:-1/0,z:t.z};if(u>a)return{x:1/0,y:1/0,z:t.z}}return l>Math.PI&&(l-=2*Math.PI),i=Math.sin(u),s=Math.cos(u),o=i*i,{x:((r=n/Math.sqrt(1-e*o))+c)*s*Math.cos(l),y:(r+c)*s*Math.sin(l),z:(r*(1-e)+c)*i}}function Z(t,e,n,r){var i,o,s,l,u,c,h,f,p,d,m,y,v,g,b,_=t.x,x=t.y,w=t.z?t.z:0;if(i=Math.sqrt(_*_+x*x),o=Math.sqrt(_*_+x*x+w*w),i/n<1e-12){if(g=0,o/n<1e-12)return a,b=-r,{x:t.x,y:t.y,z:t.z}}else g=Math.atan2(x,_);s=w/o,f=(l=i/o)*(1-e)*(u=1/Math.sqrt(1-e*(2-e)*l*l)),p=s*u,v=0;do{v++,c=e*(h=n/Math.sqrt(1-e*p*p))/(h+(b=i*f+w*p-h*(1-e*p*p))),y=(m=s*(u=1/Math.sqrt(1-c*(2-c)*l*l)))*f-(d=l*(1-c)*u)*p,f=d,p=m}while(y*y>1e-24&&v<30);return{x:g,y:Math.atan(m/Math.abs(d)),z:b}}function Q(t){return 1===t||2===t}var J=function(t,e,n){return function(t,e){return t.datum_type===e.datum_type&&(!(t.a!==e.a||Math.abs(t.es-e.es)>5e-11)&&(1===t.datum_type?t.datum_params[0]===e.datum_params[0]&&t.datum_params[1]===e.datum_params[1]&&t.datum_params[2]===e.datum_params[2]:2!==t.datum_type||t.datum_params[0]===e.datum_params[0]&&t.datum_params[1]===e.datum_params[1]&&t.datum_params[2]===e.datum_params[2]&&t.datum_params[3]===e.datum_params[3]&&t.datum_params[4]===e.datum_params[4]&&t.datum_params[5]===e.datum_params[5]&&t.datum_params[6]===e.datum_params[6]))}(t,e)||5===t.datum_type||5===e.datum_type?n:t.es!==e.es||t.a!==e.a||Q(t.datum_type)||Q(e.datum_type)?(n=X(n,t.es,t.a),Q(t.datum_type)&&(n=function(t,e,n){if(1===e)return{x:t.x+n[0],y:t.y+n[1],z:t.z+n[2]};if(2===e){var r=n[0],a=n[1],i=n[2],o=n[3],s=n[4],l=n[5],u=n[6];return{x:u*(t.x-l*t.y+s*t.z)+r,y:u*(l*t.x+t.y-o*t.z)+a,z:u*(-s*t.x+o*t.y+t.z)+i}}}(n,t.datum_type,t.datum_params)),Q(e.datum_type)&&(n=function(t,e,n){if(1===e)return{x:t.x-n[0],y:t.y-n[1],z:t.z-n[2]};if(2===e){var r=n[0],a=n[1],i=n[2],o=n[3],s=n[4],l=n[5],u=n[6],c=(t.x-r)/u,h=(t.y-a)/u,f=(t.z-i)/u;return{x:c+l*h-s*f,y:-l*c+h+o*f,z:s*c-o*h+f}}}(n,e.datum_type,e.datum_params)),Z(n,e.es,e.a,e.b)):n},K=function(t,e,n){var r,a,i,o=n.x,s=n.y,l=n.z||0,u={};for(i=0;i<3;i++)if(!e||2!==i||void 0!==n.z)switch(0===i?(r=o,a=-1!=="ew".indexOf(t.axis[i])?"x":"y"):1===i?(r=s,a=-1!=="ns".indexOf(t.axis[i])?"y":"x"):(r=l,a="z"),t.axis[i]){case"e":u[a]=r;break;case"w":u[a]=-r;break;case"n":u[a]=r;break;case"s":u[a]=-r;break;case"u":void 0!==n[a]&&(u.z=r);break;case"d":void 0!==n[a]&&(u.z=-r);break;default:return null}return u},tt=function(t){var e={x:t[0],y:t[1]};return t.length>2&&(e.z=t[2]),t.length>3&&(e.m=t[3]),e};function et(t){if("function"==typeof Number.isFinite){if(Number.isFinite(t))return;throw new TypeError("coordinates must be finite numbers")}if("number"!=typeof t||t!=t||!isFinite(t))throw new TypeError("coordinates must be finite numbers")}function nt(t,e,n){var r;if(Array.isArray(n)&&(n=tt(n)),function(t){et(t.x),et(t.y)}(n),t.datum&&e.datum&&function(t,e){return(1===t.datum.datum_type||2===t.datum.datum_type)&&"WGS84"!==e.datumCode||(1===e.datum.datum_type||2===e.datum.datum_type)&&"WGS84"!==t.datumCode}(t,e)&&(n=nt(t,r=new $("WGS84"),n),t=r),"enu"!==t.axis&&(n=K(t,!1,n)),"longlat"===t.projName)n={x:n.x*i,y:n.y*i,z:n.z||0};else if(t.to_meter&&(n={x:n.x*t.to_meter,y:n.y*t.to_meter,z:n.z||0}),!(n=t.inverse(n)))return;return t.from_greenwich&&(n.x+=t.from_greenwich),n=J(t.datum,e.datum,n),e.from_greenwich&&(n={x:n.x-e.from_greenwich,y:n.y,z:n.z||0}),"longlat"===e.projName?n={x:n.x*o,y:n.y*o,z:n.z||0}:(n=e.forward(n),e.to_meter&&(n={x:n.x/e.to_meter,y:n.y/e.to_meter,z:n.z||0})),"enu"!==e.axis?K(e,!0,n):n}var rt=$("WGS84");function at(t,e,n){var r,a,i;return Array.isArray(n)?(r=nt(t,e,n)||{x:NaN,y:NaN},n.length>2?void 0!==t.name&&"geocent"===t.name||void 0!==e.name&&"geocent"===e.name?"number"==typeof r.z?[r.x,r.y,r.z].concat(n.splice(3)):[r.x,r.y,n[2]].concat(n.splice(3)):[r.x,r.y].concat(n.splice(2)):[r.x,r.y]):(a=nt(t,e,n),2===(i=Object.keys(n)).length||i.forEach((function(r){if(void 0!==t.name&&"geocent"===t.name||void 0!==e.name&&"geocent"===e.name){if("x"===r||"y"===r||"z"===r)return}else if("x"===r||"y"===r)return;a[r]=n[r]})),a)}function it(t){return t instanceof $?t:t.oProj?t.oProj:$(t)}var ot=function(t,e,n){t=it(t);var r,a=!1;return void 0===e?(e=t,t=rt,a=!0):(void 0!==e.x||Array.isArray(e))&&(n=e,e=t,t=rt,a=!0),e=it(e),n?at(t,e,n):(r={forward:function(n){return at(t,e,n)},inverse:function(n){return at(e,t,n)}},a&&(r.oProj=e),r)},st=73,lt=79,ut={forward:ct,inverse:function(t){var e=dt(vt(t.toUpperCase()));if(e.lat&&e.lon)return[e.lon,e.lat,e.lon,e.lat];return[e.left,e.bottom,e.right,e.top]},toPoint:ht};function ct(t,e){return e=e||5,function(t,e){var n="00000"+t.easting,r="00000"+t.northing;return t.zoneNumber+t.zoneLetter+(p=t.easting,d=t.northing,m=t.zoneNumber,y=yt(m),v=Math.floor(p/1e5),g=Math.floor(d/1e5)%20,a=v,i=g,o=y,s=o-1,l="AJSAJS".charCodeAt(s),u="AFAFAF".charCodeAt(s),c=l+a-1,h=u+i,f=!1,c>90&&(c=c-90+65-1,f=!0),(c===st||l<st&&c>st||(c>st||l<st)&&f)&&c++,(c===lt||l<lt&&c>lt||(c>lt||l<lt)&&f)&&++c===st&&c++,c>90&&(c=c-90+65-1),h>86?(h=h-86+65-1,f=!0):f=!1,(h===st||u<st&&h>st||(h>st||u<st)&&f)&&h++,(h===lt||u<lt&&h>lt||(h>lt||u<lt)&&f)&&++h===st&&h++,h>86&&(h=h-86+65-1),String.fromCharCode(c)+String.fromCharCode(h))+n.substr(n.length-5,e)+r.substr(r.length-5,e);var a,i,o,s,l,u,c,h,f;var p,d,m,y,v,g}(function(t){var e,n,r,a,i,o,s,l=t.lat,u=t.lon,c=6378137,h=ft(l),f=ft(u);s=Math.floor((u+180)/6)+1,180===u&&(s=60);l>=56&&l<64&&u>=3&&u<12&&(s=32);l>=72&&l<84&&(u>=0&&u<9?s=31:u>=9&&u<21?s=33:u>=21&&u<33?s=35:u>=33&&u<42&&(s=37));o=ft(6*(s-1)-180+3),.006739496752268451,e=c/Math.sqrt(1-.00669438*Math.sin(h)*Math.sin(h)),n=Math.tan(h)*Math.tan(h),r=.006739496752268451*Math.cos(h)*Math.cos(h),a=Math.cos(h)*(f-o),i=c*(.9983242984503243*h-.002514607064228144*Math.sin(2*h)+2639046602129982e-21*Math.sin(4*h)-3.418046101696858e-9*Math.sin(6*h));var p=.9996*e*(a+(1-n+r)*a*a*a/6+(5-18*n+n*n+72*r-.39089081163157013)*a*a*a*a*a/120)+5e5,d=.9996*(i+e*Math.tan(h)*(a*a/2+(5-n+9*r+4*r*r)*a*a*a*a/24+(61-58*n+n*n+600*r-2.2240339282485886)*a*a*a*a*a*a/720));l<0&&(d+=1e7);return{northing:Math.round(d),easting:Math.round(p),zoneNumber:s,zoneLetter:mt(l)}}({lat:t[1],lon:t[0]}),e)}function ht(t){var e=dt(vt(t.toUpperCase()));return e.lat&&e.lon?[e.lon,e.lat]:[(e.left+e.right)/2,(e.top+e.bottom)/2]}function ft(t){return t*(Math.PI/180)}function pt(t){return t/Math.PI*180}function dt(t){var e=t.northing,n=t.easting,r=t.zoneLetter,a=t.zoneNumber;if(a<0||a>60)return null;var i,o,s,l,u,c,h,f,p=6378137,d=(1-Math.sqrt(.99330562))/(1+Math.sqrt(.99330562)),m=n-5e5,y=e;r<"N"&&(y-=1e7),c=6*(a-1)-180+3,f=(h=y/.9996/6367449.145945056)+(3*d/2-27*d*d*d/32)*Math.sin(2*h)+(21*d*d/16-55*d*d*d*d/32)*Math.sin(4*h)+151*d*d*d/96*Math.sin(6*h),i=p/Math.sqrt(1-.00669438*Math.sin(f)*Math.sin(f)),o=Math.tan(f)*Math.tan(f),s=.006739496752268451*Math.cos(f)*Math.cos(f),l=.99330562*p/Math.pow(1-.00669438*Math.sin(f)*Math.sin(f),1.5),u=m/(.9996*i);var v=f-i*Math.tan(f)/l*(u*u/2-(5+3*o+10*s-4*s*s-.06065547077041606)*u*u*u*u/24+(61+90*o+298*s+45*o*o-1.6983531815716497-3*s*s)*u*u*u*u*u*u/720);v=pt(v);var g,b=(u-(1+2*o+s)*u*u*u/6+(5-2*s+28*o-3*s*s+.05391597401814761+24*o*o)*u*u*u*u*u/120)/Math.cos(f);if(b=c+pt(b),t.accuracy){var _=dt({northing:t.northing+t.accuracy,easting:t.easting+t.accuracy,zoneLetter:t.zoneLetter,zoneNumber:t.zoneNumber});g={top:_.lat,right:_.lon,bottom:v,left:b}}else g={lat:v,lon:b};return g}function mt(t){var e="Z";return 84>=t&&t>=72?e="X":72>t&&t>=64?e="W":64>t&&t>=56?e="V":56>t&&t>=48?e="U":48>t&&t>=40?e="T":40>t&&t>=32?e="S":32>t&&t>=24?e="R":24>t&&t>=16?e="Q":16>t&&t>=8?e="P":8>t&&t>=0?e="N":0>t&&t>=-8?e="M":-8>t&&t>=-16?e="L":-16>t&&t>=-24?e="K":-24>t&&t>=-32?e="J":-32>t&&t>=-40?e="H":-40>t&&t>=-48?e="G":-48>t&&t>=-56?e="F":-56>t&&t>=-64?e="E":-64>t&&t>=-72?e="D":-72>t&&t>=-80&&(e="C"),e}function yt(t){var e=t%6;return 0===e&&(e=6),e}function vt(t){if(t&&0===t.length)throw"MGRSPoint coverting from nothing";for(var e,n=t.length,r=null,a="",i=0;!/[A-Z]/.test(e=t.charAt(i));){if(i>=2)throw"MGRSPoint bad conversion from: "+t;a+=e,i++}var o=parseInt(a,10);if(0===i||i+3>n)throw"MGRSPoint bad conversion from: "+t;var s=t.charAt(i++);if(s<="A"||"B"===s||"Y"===s||s>="Z"||"I"===s||"O"===s)throw"MGRSPoint zone letter "+s+" not handled: "+t;r=t.substring(i,i+=2);for(var l=yt(o),u=function(t,e){var n="AJSAJS".charCodeAt(e-1),r=1e5,a=!1;for(;n!==t.charCodeAt(0);){if(++n===st&&n++,n===lt&&n++,n>90){if(a)throw"Bad character: "+t;n=65,a=!0}r+=1e5}return r}(r.charAt(0),l),c=function(t,e){if(t>"V")throw"MGRSPoint given invalid Northing "+t;var n="AFAFAF".charCodeAt(e-1),r=0,a=!1;for(;n!==t.charCodeAt(0);){if(++n===st&&n++,n===lt&&n++,n>86){if(a)throw"Bad character: "+t;n=65,a=!0}r+=1e5}return r}(r.charAt(1),l);c<gt(s);)c+=2e6;var h=n-i;if(h%2!=0)throw"MGRSPoint has to have an even number \nof digits after the zone letter and two 100km letters - front \nhalf for easting meters, second half for \nnorthing meters"+t;var f,p,d,m=h/2,y=0,v=0;return m>0&&(f=1e5/Math.pow(10,m),p=t.substring(i,i+m),y=parseFloat(p)*f,d=t.substring(i+m),v=parseFloat(d)*f),{easting:y+u,northing:v+c,zoneLetter:s,zoneNumber:o,accuracy:f}}function gt(t){var e;switch(t){case"C":e=11e5;break;case"D":e=2e6;break;case"E":e=28e5;break;case"F":e=37e5;break;case"G":e=46e5;break;case"H":e=55e5;break;case"J":e=64e5;break;case"K":e=73e5;break;case"L":e=82e5;break;case"M":e=91e5;break;case"N":e=0;break;case"P":e=8e5;break;case"Q":e=17e5;break;case"R":e=26e5;break;case"S":e=35e5;break;case"T":e=44e5;break;case"U":e=53e5;break;case"V":e=62e5;break;case"W":e=7e6;break;case"X":e=79e5;break;default:e=-1}if(e>=0)return e;throw"Invalid zone letter: "+t}function bt(t,e,n){if(!(this instanceof bt))return new bt(t,e,n);if(Array.isArray(t))this.x=t[0],this.y=t[1],this.z=t[2]||0;else if("object"==typeof t)this.x=t.x,this.y=t.y,this.z=t.z||0;else if("string"==typeof t&&void 0===e){var r=t.split(",");this.x=parseFloat(r[0],10),this.y=parseFloat(r[1],10),this.z=parseFloat(r[2],10)||0}else this.x=t,this.y=e,this.z=n||0;console.warn("proj4.Point will be removed in version 3, use proj4.toPoint")}bt.fromMGRS=function(t){return new bt(ht(t))},bt.prototype.toMGRS=function(t){return ct([this.x,this.y],t)};var _t=bt,xt=.01068115234375,wt=function(t){var e=[];e[0]=1-t*(.25+t*(.046875+t*(.01953125+t*xt))),e[1]=t*(.75-t*(.046875+t*(.01953125+t*xt)));var n=t*t;return e[2]=n*(.46875-t*(.013020833333333334+.007120768229166667*t)),n*=t,e[3]=n*(.3645833333333333-.005696614583333333*t),e[4]=n*t*.3076171875,e},Et=function(t,e,n,r){return n*=e,e*=e,r[0]*t-n*(r[1]+e*(r[2]+e*(r[3]+e*r[4])))},Mt=function(t,e,n){for(var r=1/(1-e),a=t,i=20;i;--i){var o=Math.sin(a),s=1-e*o*o;if(a-=s=(Et(a,o,Math.cos(a),n)-t)*(s*Math.sqrt(s))*r,Math.abs(s)<1e-10)return a}return a};var St={init:function(){this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.es&&(this.en=wt(this.es),this.ml0=Et(this.lat0,Math.sin(this.lat0),Math.cos(this.lat0),this.en))},forward:function(t){var e,n,r,a=t.x,i=t.y,o=O(a-this.long0),s=Math.sin(i),l=Math.cos(i);if(this.es){var u=l*o,c=Math.pow(u,2),h=this.ep2*Math.pow(l,2),f=Math.pow(h,2),p=Math.abs(l)>1e-10?Math.tan(i):0,d=Math.pow(p,2),m=Math.pow(d,2);e=1-this.es*Math.pow(s,2),u/=Math.sqrt(e);var y=Et(i,s,l,this.en);n=this.a*(this.k0*u*(1+c/6*(1-d+h+c/20*(5-18*d+m+14*h-58*d*h+c/42*(61+179*m-m*d-479*d)))))+this.x0,r=this.a*(this.k0*(y-this.ml0+s*o*u/2*(1+c/12*(5-d+9*h+4*f+c/30*(61+m-58*d+270*h-330*d*h+c/56*(1385+543*m-m*d-3111*d))))))+this.y0}else{var v=l*Math.sin(o);if(Math.abs(Math.abs(v)-1)<1e-10)return 93;if(n=.5*this.a*this.k0*Math.log((1+v)/(1-v))+this.x0,r=l*Math.cos(o)/Math.sqrt(1-Math.pow(v,2)),(v=Math.abs(r))>=1){if(v-1>1e-10)return 93;r=0}else r=Math.acos(r);i<0&&(r=-r),r=this.a*this.k0*(r-this.lat0)+this.y0}return t.x=n,t.y=r,t},inverse:function(t){var e,n,r,i,o=(t.x-this.x0)*(1/this.a),s=(t.y-this.y0)*(1/this.a);if(this.es)if(e=this.ml0+s/this.k0,n=Mt(e,this.es,this.en),Math.abs(n)<a){var l=Math.sin(n),u=Math.cos(n),c=Math.abs(u)>1e-10?Math.tan(n):0,h=this.ep2*Math.pow(u,2),f=Math.pow(h,2),p=Math.pow(c,2),d=Math.pow(p,2);e=1-this.es*Math.pow(l,2);var m=o*Math.sqrt(e)/this.k0,y=Math.pow(m,2);r=n-(e*=c)*y/(1-this.es)*.5*(1-y/12*(5+3*p-9*h*p+h-4*f-y/30*(61+90*p-252*h*p+45*d+46*h-y/56*(1385+3633*p+4095*d+1574*d*p)))),i=O(this.long0+m*(1-y/6*(1+2*p+h-y/20*(5+28*p+24*d+8*h*p+6*h-y/42*(61+662*p+1320*d+720*d*p))))/u)}else r=a*I(s),i=0;else{var v=Math.exp(o/this.k0),g=.5*(v-1/v),b=this.lat0+s/this.k0,_=Math.cos(b);e=Math.sqrt((1-Math.pow(_,2))/(1+Math.pow(g,2))),r=Math.asin(e),s<0&&(r=-r),i=0===g&&0===_?0:O(Math.atan2(g,_)+this.long0)}return t.x=i,t.y=r,t},names:["Transverse_Mercator","Transverse Mercator","tmerc"]},kt=function(t){var e=Math.exp(t);return e=(e-1/e)/2},Tt=function(t,e){t=Math.abs(t),e=Math.abs(e);var n=Math.max(t,e),r=Math.min(t,e)/(n||1);return n*Math.sqrt(1+Math.pow(r,2))},Dt=function(t){var e=Math.abs(t);return e=function(t){var e=1+t,n=e-1;return 0===n?t:t*Math.log(e)/n}(e*(1+e/(Tt(1,e)+1))),t<0?-e:e},Ct=function(t,e){for(var n,r=2*Math.cos(2*e),a=t.length-1,i=t[a],o=0;--a>=0;)n=r*i-o+t[a],o=i,i=n;return e+n*Math.sin(2*e)},Nt=function(t,e,n){for(var r,a,i=Math.sin(e),o=Math.cos(e),s=kt(n),l=function(t){var e=Math.exp(t);return e=(e+1/e)/2}(n),u=2*o*l,c=-2*i*s,h=t.length-1,f=t[h],p=0,d=0,m=0;--h>=0;)r=d,a=p,f=u*(d=f)-r-c*(p=m)+t[h],m=c*d-a+u*p;return[(u=i*l)*f-(c=o*s)*m,u*m+c*f]};var At={init:function(){if(void 0===this.es||this.es<=0)throw new Error("incorrect elliptical usage");this.x0=void 0!==this.x0?this.x0:0,this.y0=void 0!==this.y0?this.y0:0,this.long0=void 0!==this.long0?this.long0:0,this.lat0=void 0!==this.lat0?this.lat0:0,this.cgb=[],this.cbg=[],this.utg=[],this.gtu=[];var t=this.es/(1+Math.sqrt(1-this.es)),e=t/(2-t),n=e;this.cgb[0]=e*(2+e*(-2/3+e*(e*(116/45+e*(26/45+e*(-2854/675)))-2))),this.cbg[0]=e*(e*(2/3+e*(4/3+e*(-82/45+e*(32/45+e*(4642/4725)))))-2),n*=e,this.cgb[1]=n*(7/3+e*(e*(-227/45+e*(2704/315+e*(2323/945)))-1.6)),this.cbg[1]=n*(5/3+e*(-16/15+e*(-13/9+e*(904/315+e*(-1522/945))))),n*=e,this.cgb[2]=n*(56/15+e*(-136/35+e*(-1262/105+e*(73814/2835)))),this.cbg[2]=n*(-26/15+e*(34/21+e*(1.6+e*(-12686/2835)))),n*=e,this.cgb[3]=n*(4279/630+e*(-332/35+e*(-399572/14175))),this.cbg[3]=n*(1237/630+e*(e*(-24832/14175)-2.4)),n*=e,this.cgb[4]=n*(4174/315+e*(-144838/6237)),this.cbg[4]=n*(-734/315+e*(109598/31185)),n*=e,this.cgb[5]=n*(601676/22275),this.cbg[5]=n*(444337/155925),n=Math.pow(e,2),this.Qn=this.k0/(1+e)*(1+n*(1/4+n*(1/64+n/256))),this.utg[0]=e*(e*(2/3+e*(-37/96+e*(1/360+e*(81/512+e*(-96199/604800)))))-.5),this.gtu[0]=e*(.5+e*(-2/3+e*(5/16+e*(41/180+e*(-127/288+e*(7891/37800)))))),this.utg[1]=n*(-1/48+e*(-1/15+e*(437/1440+e*(-46/105+e*(1118711/3870720))))),this.gtu[1]=n*(13/48+e*(e*(557/1440+e*(281/630+e*(-1983433/1935360)))-.6)),n*=e,this.utg[2]=n*(-17/480+e*(37/840+e*(209/4480+e*(-5569/90720)))),this.gtu[2]=n*(61/240+e*(-103/140+e*(15061/26880+e*(167603/181440)))),n*=e,this.utg[3]=n*(-4397/161280+e*(11/504+e*(830251/7257600))),this.gtu[3]=n*(49561/161280+e*(-179/168+e*(6601661/7257600))),n*=e,this.utg[4]=n*(-4583/161280+e*(108847/3991680)),this.gtu[4]=n*(34729/80640+e*(-3418889/1995840)),n*=e,this.utg[5]=n*(-20648693/638668800),this.gtu[5]=.6650675310896665*n;var r=Ct(this.cbg,this.lat0);this.Zb=-this.Qn*(r+function(t,e){for(var n,r=2*Math.cos(e),a=t.length-1,i=t[a],o=0;--a>=0;)n=r*i-o+t[a],o=i,i=n;return Math.sin(e)*n}(this.gtu,2*r))},forward:function(t){var e=O(t.x-this.long0),n=t.y;n=Ct(this.cbg,n);var r=Math.sin(n),a=Math.cos(n),i=Math.sin(e),o=Math.cos(e);n=Math.atan2(r,o*a),e=Math.atan2(i*a,Tt(r,a*o)),e=Dt(Math.tan(e));var s,l,u=Nt(this.gtu,2*n,2*e);return n+=u[0],e+=u[1],Math.abs(e)<=2.623395162778?(s=this.a*(this.Qn*e)+this.x0,l=this.a*(this.Qn*n+this.Zb)+this.y0):(s=1/0,l=1/0),t.x=s,t.y=l,t},inverse:function(t){var e,n,r=(t.x-this.x0)*(1/this.a),a=(t.y-this.y0)*(1/this.a);if(a=(a-this.Zb)/this.Qn,r/=this.Qn,Math.abs(r)<=2.623395162778){var i=Nt(this.utg,2*a,2*r);a+=i[0],r+=i[1],r=Math.atan(kt(r));var o=Math.sin(a),s=Math.cos(a),l=Math.sin(r),u=Math.cos(r);a=Math.atan2(o*u,Tt(l,u*s)),r=Math.atan2(l,u*s),e=O(r+this.long0),n=Ct(this.cgb,a)}else e=1/0,n=1/0;return t.x=e,t.y=n,t},names:["Extended_Transverse_Mercator","Extended Transverse Mercator","etmerc"]};var Pt={init:function(){var t=function(t,e){if(void 0===t){if((t=Math.floor(30*(O(e)+Math.PI)/Math.PI)+1)<0)return 0;if(t>60)return 60}return t}(this.zone,this.long0);if(void 0===t)throw new Error("unknown utm zone");this.lat0=0,this.long0=(6*Math.abs(t)-183)*i,this.x0=5e5,this.y0=this.utmSouth?1e7:0,this.k0=.9996,At.init.apply(this),this.forward=At.forward,this.inverse=At.inverse},names:["Universal Transverse Mercator System","utm"],dependsOn:"etmerc"},It=function(t,e){return Math.pow((1-t)/(1+t),e)};var Ot={init:function(){var t=Math.sin(this.lat0),e=Math.cos(this.lat0);e*=e,this.rc=Math.sqrt(1-this.es)/(1-this.es*t*t),this.C=Math.sqrt(1+this.es*e*e/(1-this.es)),this.phic0=Math.asin(t/this.C),this.ratexp=.5*this.C*this.e,this.K=Math.tan(.5*this.phic0+s)/(Math.pow(Math.tan(.5*this.lat0+s),this.C)*It(this.e*t,this.ratexp))},forward:function(t){var e=t.x,n=t.y;return t.y=2*Math.atan(this.K*Math.pow(Math.tan(.5*n+s),this.C)*It(this.e*Math.sin(n),this.ratexp))-a,t.x=this.C*e,t},inverse:function(t){for(var e=t.x/this.C,n=t.y,r=Math.pow(Math.tan(.5*n+s)/this.K,1/this.C),i=20;i>0&&(n=2*Math.atan(r*It(this.e*Math.sin(t.y),-.5*this.e))-a,!(Math.abs(n-t.y)<1e-14));--i)t.y=n;return i?(t.x=e,t.y=n,t):null},names:["gauss"]};var jt={init:function(){Ot.init.apply(this),this.rc&&(this.sinc0=Math.sin(this.phic0),this.cosc0=Math.cos(this.phic0),this.R2=2*this.rc,this.title||(this.title="Oblique Stereographic Alternative"))},forward:function(t){var e,n,r,a;return t.x=O(t.x-this.long0),Ot.forward.apply(this,[t]),e=Math.sin(t.y),n=Math.cos(t.y),r=Math.cos(t.x),a=this.k0*this.R2/(1+this.sinc0*e+this.cosc0*n*r),t.x=a*n*Math.sin(t.x),t.y=a*(this.cosc0*e-this.sinc0*n*r),t.x=this.a*t.x+this.x0,t.y=this.a*t.y+this.y0,t},inverse:function(t){var e,n,r,a,i;if(t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,t.x/=this.k0,t.y/=this.k0,i=Math.sqrt(t.x*t.x+t.y*t.y)){var o=2*Math.atan2(i,this.R2);e=Math.sin(o),n=Math.cos(o),a=Math.asin(n*this.sinc0+t.y*e*this.cosc0/i),r=Math.atan2(t.x*e,i*this.cosc0*n-t.y*this.sinc0*e)}else a=this.phic0,r=0;return t.x=r,t.y=a,Ot.inverse.apply(this,[t]),t.x=O(t.x+this.long0),t},names:["Stereographic_North_Pole","Oblique_Stereographic","Polar_Stereographic","sterea","Oblique Stereographic Alternative","Double_Stereographic"]};var Rt={init:function(){this.coslat0=Math.cos(this.lat0),this.sinlat0=Math.sin(this.lat0),this.sphere?1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=1e-10&&(this.k0=.5*(1+I(this.lat0)*Math.sin(this.lat_ts))):(Math.abs(this.coslat0)<=1e-10&&(this.lat0>0?this.con=1:this.con=-1),this.cons=Math.sqrt(Math.pow(1+this.e,1+this.e)*Math.pow(1-this.e,1-this.e)),1===this.k0&&!isNaN(this.lat_ts)&&Math.abs(this.coslat0)<=1e-10&&(this.k0=.5*this.cons*P(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts))/j(this.e,this.con*this.lat_ts,this.con*Math.sin(this.lat_ts))),this.ms1=P(this.e,this.sinlat0,this.coslat0),this.X0=2*Math.atan(this.ssfn_(this.lat0,this.sinlat0,this.e))-a,this.cosX0=Math.cos(this.X0),this.sinX0=Math.sin(this.X0))},forward:function(t){var e,n,r,i,o,s,l=t.x,u=t.y,c=Math.sin(u),h=Math.cos(u),f=O(l-this.long0);return Math.abs(Math.abs(l-this.long0)-Math.PI)<=1e-10&&Math.abs(u+this.lat0)<=1e-10?(t.x=NaN,t.y=NaN,t):this.sphere?(e=2*this.k0/(1+this.sinlat0*c+this.coslat0*h*Math.cos(f)),t.x=this.a*e*h*Math.sin(f)+this.x0,t.y=this.a*e*(this.coslat0*c-this.sinlat0*h*Math.cos(f))+this.y0,t):(n=2*Math.atan(this.ssfn_(u,c,this.e))-a,i=Math.cos(n),r=Math.sin(n),Math.abs(this.coslat0)<=1e-10?(o=j(this.e,u*this.con,this.con*c),s=2*this.a*this.k0*o/this.cons,t.x=this.x0+s*Math.sin(l-this.long0),t.y=this.y0-this.con*s*Math.cos(l-this.long0),t):(Math.abs(this.sinlat0)<1e-10?(e=2*this.a*this.k0/(1+i*Math.cos(f)),t.y=e*r):(e=2*this.a*this.k0*this.ms1/(this.cosX0*(1+this.sinX0*r+this.cosX0*i*Math.cos(f))),t.y=e*(this.cosX0*r-this.sinX0*i*Math.cos(f))+this.y0),t.x=e*i*Math.sin(f)+this.x0,t))},inverse:function(t){var e,n,r,i,o;t.x-=this.x0,t.y-=this.y0;var s=Math.sqrt(t.x*t.x+t.y*t.y);if(this.sphere){var l=2*Math.atan(s/(2*this.a*this.k0));return e=this.long0,n=this.lat0,s<=1e-10?(t.x=e,t.y=n,t):(n=Math.asin(Math.cos(l)*this.sinlat0+t.y*Math.sin(l)*this.coslat0/s),e=Math.abs(this.coslat0)<1e-10?this.lat0>0?O(this.long0+Math.atan2(t.x,-1*t.y)):O(this.long0+Math.atan2(t.x,t.y)):O(this.long0+Math.atan2(t.x*Math.sin(l),s*this.coslat0*Math.cos(l)-t.y*this.sinlat0*Math.sin(l))),t.x=e,t.y=n,t)}if(Math.abs(this.coslat0)<=1e-10){if(s<=1e-10)return n=this.lat0,e=this.long0,t.x=e,t.y=n,t;t.x*=this.con,t.y*=this.con,r=s*this.cons/(2*this.a*this.k0),n=this.con*R(this.e,r),e=this.con*O(this.con*this.long0+Math.atan2(t.x,-1*t.y))}else i=2*Math.atan(s*this.cosX0/(2*this.a*this.k0*this.ms1)),e=this.long0,s<=1e-10?o=this.X0:(o=Math.asin(Math.cos(i)*this.sinX0+t.y*Math.sin(i)*this.cosX0/s),e=O(this.long0+Math.atan2(t.x*Math.sin(i),s*this.cosX0*Math.cos(i)-t.y*this.sinX0*Math.sin(i)))),n=-1*R(this.e,Math.tan(.5*(a+o)));return t.x=e,t.y=n,t},names:["stere","Stereographic_South_Pole","Polar Stereographic (variant B)"],ssfn_:function(t,e,n){return e*=n,Math.tan(.5*(a+t))*Math.pow((1-e)/(1+e),.5*n)}};var Lt={init:function(){var t=this.lat0;this.lambda0=this.long0;var e=Math.sin(t),n=this.a,r=1/this.rf,a=2*r-Math.pow(r,2),i=this.e=Math.sqrt(a);this.R=this.k0*n*Math.sqrt(1-a)/(1-a*Math.pow(e,2)),this.alpha=Math.sqrt(1+a/(1-a)*Math.pow(Math.cos(t),4)),this.b0=Math.asin(e/this.alpha);var o=Math.log(Math.tan(Math.PI/4+this.b0/2)),s=Math.log(Math.tan(Math.PI/4+t/2)),l=Math.log((1+i*e)/(1-i*e));this.K=o-this.alpha*s+this.alpha*i/2*l},forward:function(t){var e=Math.log(Math.tan(Math.PI/4-t.y/2)),n=this.e/2*Math.log((1+this.e*Math.sin(t.y))/(1-this.e*Math.sin(t.y))),r=-this.alpha*(e+n)+this.K,a=2*(Math.atan(Math.exp(r))-Math.PI/4),i=this.alpha*(t.x-this.lambda0),o=Math.atan(Math.sin(i)/(Math.sin(this.b0)*Math.tan(a)+Math.cos(this.b0)*Math.cos(i))),s=Math.asin(Math.cos(this.b0)*Math.sin(a)-Math.sin(this.b0)*Math.cos(a)*Math.cos(i));return t.y=this.R/2*Math.log((1+Math.sin(s))/(1-Math.sin(s)))+this.y0,t.x=this.R*o+this.x0,t},inverse:function(t){for(var e=t.x-this.x0,n=t.y-this.y0,r=e/this.R,a=2*(Math.atan(Math.exp(n/this.R))-Math.PI/4),i=Math.asin(Math.cos(this.b0)*Math.sin(a)+Math.sin(this.b0)*Math.cos(a)*Math.cos(r)),o=Math.atan(Math.sin(r)/(Math.cos(this.b0)*Math.cos(r)-Math.sin(this.b0)*Math.tan(a))),s=this.lambda0+o/this.alpha,l=0,u=i,c=-1e3,h=0;Math.abs(u-c)>1e-7;){if(++h>20)return;l=1/this.alpha*(Math.log(Math.tan(Math.PI/4+i/2))-this.K)+this.e*Math.log(Math.tan(Math.PI/4+Math.asin(this.e*Math.sin(u))/2)),c=u,u=2*Math.atan(Math.exp(l))-Math.PI/2}return t.x=s,t.y=u,t},names:["somerc"]};var Ft={init:function(){this.no_off=this.no_off||!1,this.no_rot=this.no_rot||!1,isNaN(this.k0)&&(this.k0=1);var t=Math.sin(this.lat0),e=Math.cos(this.lat0),n=this.e*t;this.bl=Math.sqrt(1+this.es/(1-this.es)*Math.pow(e,4)),this.al=this.a*this.bl*this.k0*Math.sqrt(1-this.es)/(1-n*n);var r,a,i=j(this.e,this.lat0,t),o=this.bl/e*Math.sqrt((1-this.es)/(1-n*n));if(o*o<1&&(o=1),isNaN(this.longc)){var s=j(this.e,this.lat1,Math.sin(this.lat1)),l=j(this.e,this.lat2,Math.sin(this.lat2));this.lat0>=0?this.el=(o+Math.sqrt(o*o-1))*Math.pow(i,this.bl):this.el=(o-Math.sqrt(o*o-1))*Math.pow(i,this.bl);var u=Math.pow(s,this.bl),c=Math.pow(l,this.bl);a=.5*((r=this.el/u)-1/r);var h=(this.el*this.el-c*u)/(this.el*this.el+c*u),f=(c-u)/(c+u),p=O(this.long1-this.long2);this.long0=.5*(this.long1+this.long2)-Math.atan(h*Math.tan(.5*this.bl*p)/f)/this.bl,this.long0=O(this.long0);var d=O(this.long1-this.long0);this.gamma0=Math.atan(Math.sin(this.bl*d)/a),this.alpha=Math.asin(o*Math.sin(this.gamma0))}else r=this.lat0>=0?o+Math.sqrt(o*o-1):o-Math.sqrt(o*o-1),this.el=r*Math.pow(i,this.bl),a=.5*(r-1/r),this.gamma0=Math.asin(Math.sin(this.alpha)/o),this.long0=this.longc-Math.asin(a*Math.tan(this.gamma0))/this.bl;this.no_off?this.uc=0:this.lat0>=0?this.uc=this.al/this.bl*Math.atan2(Math.sqrt(o*o-1),Math.cos(this.alpha)):this.uc=-1*this.al/this.bl*Math.atan2(Math.sqrt(o*o-1),Math.cos(this.alpha))},forward:function(t){var e,n,r,i=t.x,o=t.y,l=O(i-this.long0);if(Math.abs(Math.abs(o)-a)<=1e-10)r=o>0?-1:1,n=this.al/this.bl*Math.log(Math.tan(s+r*this.gamma0*.5)),e=-1*r*a*this.al/this.bl;else{var u=j(this.e,o,Math.sin(o)),c=this.el/Math.pow(u,this.bl),h=.5*(c-1/c),f=.5*(c+1/c),p=Math.sin(this.bl*l),d=(h*Math.sin(this.gamma0)-p*Math.cos(this.gamma0))/f;n=Math.abs(Math.abs(d)-1)<=1e-10?Number.POSITIVE_INFINITY:.5*this.al*Math.log((1-d)/(1+d))/this.bl,e=Math.abs(Math.cos(this.bl*l))<=1e-10?this.al*this.bl*l:this.al*Math.atan2(h*Math.cos(this.gamma0)+p*Math.sin(this.gamma0),Math.cos(this.bl*l))/this.bl}return this.no_rot?(t.x=this.x0+e,t.y=this.y0+n):(e-=this.uc,t.x=this.x0+n*Math.cos(this.alpha)+e*Math.sin(this.alpha),t.y=this.y0+e*Math.cos(this.alpha)-n*Math.sin(this.alpha)),t},inverse:function(t){var e,n;this.no_rot?(n=t.y-this.y0,e=t.x-this.x0):(n=(t.x-this.x0)*Math.cos(this.alpha)-(t.y-this.y0)*Math.sin(this.alpha),e=(t.y-this.y0)*Math.cos(this.alpha)+(t.x-this.x0)*Math.sin(this.alpha),e+=this.uc);var r=Math.exp(-1*this.bl*n/this.al),i=.5*(r-1/r),o=.5*(r+1/r),s=Math.sin(this.bl*e/this.al),l=(s*Math.cos(this.gamma0)+i*Math.sin(this.gamma0))/o,u=Math.pow(this.el/Math.sqrt((1+l)/(1-l)),1/this.bl);return Math.abs(l-1)<1e-10?(t.x=this.long0,t.y=a):Math.abs(l+1)<1e-10?(t.x=this.long0,t.y=-1*a):(t.y=R(this.e,u),t.x=O(this.long0-Math.atan2(i*Math.cos(this.gamma0)-s*Math.sin(this.gamma0),Math.cos(this.bl*e/this.al))/this.bl)),t},names:["Hotine_Oblique_Mercator","Hotine Oblique Mercator","Hotine_Oblique_Mercator_Azimuth_Natural_Origin","Hotine_Oblique_Mercator_Azimuth_Center","omerc"]};var Bt={init:function(){if(this.lat2||(this.lat2=this.lat1),this.k0||(this.k0=1),this.x0=this.x0||0,this.y0=this.y0||0,!(Math.abs(this.lat1+this.lat2)<1e-10)){var t=this.b/this.a;this.e=Math.sqrt(1-t*t);var e=Math.sin(this.lat1),n=Math.cos(this.lat1),r=P(this.e,e,n),a=j(this.e,this.lat1,e),i=Math.sin(this.lat2),o=Math.cos(this.lat2),s=P(this.e,i,o),l=j(this.e,this.lat2,i),u=j(this.e,this.lat0,Math.sin(this.lat0));Math.abs(this.lat1-this.lat2)>1e-10?this.ns=Math.log(r/s)/Math.log(a/l):this.ns=e,isNaN(this.ns)&&(this.ns=e),this.f0=r/(this.ns*Math.pow(a,this.ns)),this.rh=this.a*this.f0*Math.pow(u,this.ns),this.title||(this.title="Lambert Conformal Conic")}},forward:function(t){var e=t.x,n=t.y;Math.abs(2*Math.abs(n)-Math.PI)<=1e-10&&(n=I(n)*(a-2e-10));var r,i,o=Math.abs(Math.abs(n)-a);if(o>1e-10)r=j(this.e,n,Math.sin(n)),i=this.a*this.f0*Math.pow(r,this.ns);else{if((o=n*this.ns)<=0)return null;i=0}var s=this.ns*O(e-this.long0);return t.x=this.k0*(i*Math.sin(s))+this.x0,t.y=this.k0*(this.rh-i*Math.cos(s))+this.y0,t},inverse:function(t){var e,n,r,i,o,s=(t.x-this.x0)/this.k0,l=this.rh-(t.y-this.y0)/this.k0;this.ns>0?(e=Math.sqrt(s*s+l*l),n=1):(e=-Math.sqrt(s*s+l*l),n=-1);var u=0;if(0!==e&&(u=Math.atan2(n*s,n*l)),0!==e||this.ns>0){if(n=1/this.ns,r=Math.pow(e/(this.a*this.f0),n),-9999===(i=R(this.e,r)))return null}else i=-a;return o=O(u/this.ns+this.long0),t.x=o,t.y=i,t},names:["Lambert Tangential Conformal Conic Projection","Lambert_Conformal_Conic","Lambert_Conformal_Conic_2SP","lcc"]};var Ht={init:function(){this.a=6377397.155,this.es=.006674372230614,this.e=Math.sqrt(this.es),this.lat0||(this.lat0=.863937979737193),this.long0||(this.long0=.4334234309119251),this.k0||(this.k0=.9999),this.s45=.785398163397448,this.s90=2*this.s45,this.fi0=this.lat0,this.e2=this.es,this.e=Math.sqrt(this.e2),this.alfa=Math.sqrt(1+this.e2*Math.pow(Math.cos(this.fi0),4)/(1-this.e2)),this.uq=1.04216856380474,this.u0=Math.asin(Math.sin(this.fi0)/this.alfa),this.g=Math.pow((1+this.e*Math.sin(this.fi0))/(1-this.e*Math.sin(this.fi0)),this.alfa*this.e/2),this.k=Math.tan(this.u0/2+this.s45)/Math.pow(Math.tan(this.fi0/2+this.s45),this.alfa)*this.g,this.k1=this.k0,this.n0=this.a*Math.sqrt(1-this.e2)/(1-this.e2*Math.pow(Math.sin(this.fi0),2)),this.s0=1.37008346281555,this.n=Math.sin(this.s0),this.ro0=this.k1*this.n0/Math.tan(this.s0),this.ad=this.s90-this.uq},forward:function(t){var e,n,r,a,i,o,s,l=t.x,u=t.y,c=O(l-this.long0);return e=Math.pow((1+this.e*Math.sin(u))/(1-this.e*Math.sin(u)),this.alfa*this.e/2),n=2*(Math.atan(this.k*Math.pow(Math.tan(u/2+this.s45),this.alfa)/e)-this.s45),r=-c*this.alfa,a=Math.asin(Math.cos(this.ad)*Math.sin(n)+Math.sin(this.ad)*Math.cos(n)*Math.cos(r)),i=Math.asin(Math.cos(n)*Math.sin(r)/Math.cos(a)),o=this.n*i,s=this.ro0*Math.pow(Math.tan(this.s0/2+this.s45),this.n)/Math.pow(Math.tan(a/2+this.s45),this.n),t.y=s*Math.cos(o)/1,t.x=s*Math.sin(o)/1,this.czech||(t.y*=-1,t.x*=-1),t},inverse:function(t){var e,n,r,a,i,o,s,l=t.x;t.x=t.y,t.y=l,this.czech||(t.y*=-1,t.x*=-1),i=Math.sqrt(t.x*t.x+t.y*t.y),a=Math.atan2(t.y,t.x)/Math.sin(this.s0),r=2*(Math.atan(Math.pow(this.ro0/i,1/this.n)*Math.tan(this.s0/2+this.s45))-this.s45),e=Math.asin(Math.cos(this.ad)*Math.sin(r)-Math.sin(this.ad)*Math.cos(r)*Math.cos(a)),n=Math.asin(Math.cos(r)*Math.sin(a)/Math.cos(e)),t.x=this.long0-n/this.alfa,o=e,s=0;var u=0;do{t.y=2*(Math.atan(Math.pow(this.k,-1/this.alfa)*Math.pow(Math.tan(e/2+this.s45),1/this.alfa)*Math.pow((1+this.e*Math.sin(o))/(1-this.e*Math.sin(o)),this.e/2))-this.s45),Math.abs(o-t.y)<1e-10&&(s=1),o=t.y,u+=1}while(0===s&&u<15);return u>=15?null:t},names:["Krovak","krovak"]},zt=function(t,e,n,r,a){return t*a-e*Math.sin(2*a)+n*Math.sin(4*a)-r*Math.sin(6*a)},qt=function(t){return 1-.25*t*(1+t/16*(3+1.25*t))},Gt=function(t){return.375*t*(1+.25*t*(1+.46875*t))},Ut=function(t){return.05859375*t*t*(1+.75*t)},Vt=function(t){return t*t*t*(35/3072)},Yt=function(t,e,n){var r=e*n;return t/Math.sqrt(1-r*r)},Wt=function(t){return Math.abs(t)<a?t:t-I(t)*Math.PI},$t=function(t,e,n,r,a){var i,o;i=t/e;for(var s=0;s<15;s++)if(i+=o=(t-(e*i-n*Math.sin(2*i)+r*Math.sin(4*i)-a*Math.sin(6*i)))/(e-2*n*Math.cos(2*i)+4*r*Math.cos(4*i)-6*a*Math.cos(6*i)),Math.abs(o)<=1e-10)return i;return NaN};var Xt={init:function(){this.sphere||(this.e0=qt(this.es),this.e1=Gt(this.es),this.e2=Ut(this.es),this.e3=Vt(this.es),this.ml0=this.a*zt(this.e0,this.e1,this.e2,this.e3,this.lat0))},forward:function(t){var e,n,r=t.x,a=t.y;if(r=O(r-this.long0),this.sphere)e=this.a*Math.asin(Math.cos(a)*Math.sin(r)),n=this.a*(Math.atan2(Math.tan(a),Math.cos(r))-this.lat0);else{var i=Math.sin(a),o=Math.cos(a),s=Yt(this.a,this.e,i),l=Math.tan(a)*Math.tan(a),u=r*Math.cos(a),c=u*u,h=this.es*o*o/(1-this.es);e=s*u*(1-c*l*(1/6-(8-l+8*h)*c/120)),n=this.a*zt(this.e0,this.e1,this.e2,this.e3,a)-this.ml0+s*i/o*c*(.5+(5-l+6*h)*c/24)}return t.x=e+this.x0,t.y=n+this.y0,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e,n,r=t.x/this.a,i=t.y/this.a;if(this.sphere){var o=i+this.lat0;e=Math.asin(Math.sin(o)*Math.cos(r)),n=Math.atan2(Math.tan(r),Math.cos(o))}else{var s=this.ml0/this.a+i,l=$t(s,this.e0,this.e1,this.e2,this.e3);if(Math.abs(Math.abs(l)-a)<=1e-10)return t.x=this.long0,t.y=a,i<0&&(t.y*=-1),t;var u=Yt(this.a,this.e,Math.sin(l)),c=u*u*u/this.a/this.a*(1-this.es),h=Math.pow(Math.tan(l),2),f=r*this.a/u,p=f*f;e=l-u*Math.tan(l)/c*f*f*(.5-(1+3*h)*f*f/24),n=f*(1-p*(h/3+(1+3*h)*h*p/15))/Math.cos(l)}return t.x=O(n+this.long0),t.y=Wt(e),t},names:["Cassini","Cassini_Soldner","cass"]},Zt=function(t,e){var n;return t>1e-7?(1-t*t)*(e/(1-(n=t*e)*n)-.5/t*Math.log((1-n)/(1+n))):2*e};var Qt={init:function(){var t,e=Math.abs(this.lat0);if(Math.abs(e-a)<1e-10?this.mode=this.lat0<0?this.S_POLE:this.N_POLE:Math.abs(e)<1e-10?this.mode=this.EQUIT:this.mode=this.OBLIQ,this.es>0)switch(this.qp=Zt(this.e,1),this.mmf=.5/(1-this.es),this.apa=function(t){var e,n=[];return n[0]=.3333333333333333*t,e=t*t,n[0]+=.17222222222222222*e,n[1]=.06388888888888888*e,e*=t,n[0]+=.10257936507936508*e,n[1]+=.0664021164021164*e,n[2]=.016415012942191543*e,n}(this.es),this.mode){case this.N_POLE:case this.S_POLE:this.dd=1;break;case this.EQUIT:this.rq=Math.sqrt(.5*this.qp),this.dd=1/this.rq,this.xmf=1,this.ymf=.5*this.qp;break;case this.OBLIQ:this.rq=Math.sqrt(.5*this.qp),t=Math.sin(this.lat0),this.sinb1=Zt(this.e,t)/this.qp,this.cosb1=Math.sqrt(1-this.sinb1*this.sinb1),this.dd=Math.cos(this.lat0)/(Math.sqrt(1-this.es*t*t)*this.rq*this.cosb1),this.ymf=(this.xmf=this.rq)/this.dd,this.xmf*=this.dd}else this.mode===this.OBLIQ&&(this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0))},forward:function(t){var e,n,r,i,o,l,u,c,h,f,p=t.x,d=t.y;if(p=O(p-this.long0),this.sphere){if(o=Math.sin(d),f=Math.cos(d),r=Math.cos(p),this.mode===this.OBLIQ||this.mode===this.EQUIT){if((n=this.mode===this.EQUIT?1+f*r:1+this.sinph0*o+this.cosph0*f*r)<=1e-10)return null;e=(n=Math.sqrt(2/n))*f*Math.sin(p),n*=this.mode===this.EQUIT?o:this.cosph0*o-this.sinph0*f*r}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(r=-r),Math.abs(d+this.lat0)<1e-10)return null;n=s-.5*d,e=(n=2*(this.mode===this.S_POLE?Math.cos(n):Math.sin(n)))*Math.sin(p),n*=r}}else{switch(u=0,c=0,h=0,r=Math.cos(p),i=Math.sin(p),o=Math.sin(d),l=Zt(this.e,o),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(u=l/this.qp,c=Math.sqrt(1-u*u)),this.mode){case this.OBLIQ:h=1+this.sinb1*u+this.cosb1*c*r;break;case this.EQUIT:h=1+c*r;break;case this.N_POLE:h=a+d,l=this.qp-l;break;case this.S_POLE:h=d-a,l=this.qp+l}if(Math.abs(h)<1e-10)return null;switch(this.mode){case this.OBLIQ:case this.EQUIT:h=Math.sqrt(2/h),n=this.mode===this.OBLIQ?this.ymf*h*(this.cosb1*u-this.sinb1*c*r):(h=Math.sqrt(2/(1+c*r)))*u*this.ymf,e=this.xmf*h*c*i;break;case this.N_POLE:case this.S_POLE:l>=0?(e=(h=Math.sqrt(l))*i,n=r*(this.mode===this.S_POLE?h:-h)):e=n=0}}return t.x=this.a*e+this.x0,t.y=this.a*n+this.y0,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e,n,r,i,o,s,l,u,c,h,f=t.x/this.a,p=t.y/this.a;if(this.sphere){var d,m=0,y=0;if((n=.5*(d=Math.sqrt(f*f+p*p)))>1)return null;switch(n=2*Math.asin(n),this.mode!==this.OBLIQ&&this.mode!==this.EQUIT||(y=Math.sin(n),m=Math.cos(n)),this.mode){case this.EQUIT:n=Math.abs(d)<=1e-10?0:Math.asin(p*y/d),f*=y,p=m*d;break;case this.OBLIQ:n=Math.abs(d)<=1e-10?this.lat0:Math.asin(m*this.sinph0+p*y*this.cosph0/d),f*=y*this.cosph0,p=(m-Math.sin(n)*this.sinph0)*d;break;case this.N_POLE:p=-p,n=a-n;break;case this.S_POLE:n-=a}e=0!==p||this.mode!==this.EQUIT&&this.mode!==this.OBLIQ?Math.atan2(f,p):0}else{if(l=0,this.mode===this.OBLIQ||this.mode===this.EQUIT){if(f/=this.dd,p*=this.dd,(s=Math.sqrt(f*f+p*p))<1e-10)return t.x=this.long0,t.y=this.lat0,t;i=2*Math.asin(.5*s/this.rq),r=Math.cos(i),f*=i=Math.sin(i),this.mode===this.OBLIQ?(l=r*this.sinb1+p*i*this.cosb1/s,o=this.qp*l,p=s*this.cosb1*r-p*this.sinb1*i):(l=p*i/s,o=this.qp*l,p=s*r)}else if(this.mode===this.N_POLE||this.mode===this.S_POLE){if(this.mode===this.N_POLE&&(p=-p),!(o=f*f+p*p))return t.x=this.long0,t.y=this.lat0,t;l=1-o/this.qp,this.mode===this.S_POLE&&(l=-l)}e=Math.atan2(f,p),u=Math.asin(l),c=this.apa,h=u+u,n=u+c[0]*Math.sin(h)+c[1]*Math.sin(h+h)+c[2]*Math.sin(h+h+h)}return t.x=O(this.long0+e),t.y=n,t},names:["Lambert Azimuthal Equal Area","Lambert_Azimuthal_Equal_Area","laea"],S_POLE:1,N_POLE:2,EQUIT:3,OBLIQ:4},Jt=function(t){return Math.abs(t)>1&&(t=t>1?1:-1),Math.asin(t)};var Kt={init:function(){Math.abs(this.lat1+this.lat2)<1e-10||(this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e3=Math.sqrt(this.es),this.sin_po=Math.sin(this.lat1),this.cos_po=Math.cos(this.lat1),this.t1=this.sin_po,this.con=this.sin_po,this.ms1=P(this.e3,this.sin_po,this.cos_po),this.qs1=Zt(this.e3,this.sin_po,this.cos_po),this.sin_po=Math.sin(this.lat2),this.cos_po=Math.cos(this.lat2),this.t2=this.sin_po,this.ms2=P(this.e3,this.sin_po,this.cos_po),this.qs2=Zt(this.e3,this.sin_po,this.cos_po),this.sin_po=Math.sin(this.lat0),this.cos_po=Math.cos(this.lat0),this.t3=this.sin_po,this.qs0=Zt(this.e3,this.sin_po,this.cos_po),Math.abs(this.lat1-this.lat2)>1e-10?this.ns0=(this.ms1*this.ms1-this.ms2*this.ms2)/(this.qs2-this.qs1):this.ns0=this.con,this.c=this.ms1*this.ms1+this.ns0*this.qs1,this.rh=this.a*Math.sqrt(this.c-this.ns0*this.qs0)/this.ns0)},forward:function(t){var e=t.x,n=t.y;this.sin_phi=Math.sin(n),this.cos_phi=Math.cos(n);var r=Zt(this.e3,this.sin_phi,this.cos_phi),a=this.a*Math.sqrt(this.c-this.ns0*r)/this.ns0,i=this.ns0*O(e-this.long0),o=a*Math.sin(i)+this.x0,s=this.rh-a*Math.cos(i)+this.y0;return t.x=o,t.y=s,t},inverse:function(t){var e,n,r,a,i,o;return t.x-=this.x0,t.y=this.rh-t.y+this.y0,this.ns0>=0?(e=Math.sqrt(t.x*t.x+t.y*t.y),r=1):(e=-Math.sqrt(t.x*t.x+t.y*t.y),r=-1),a=0,0!==e&&(a=Math.atan2(r*t.x,r*t.y)),r=e*this.ns0/this.a,this.sphere?o=Math.asin((this.c-r*r)/(2*this.ns0)):(n=(this.c-r*r)/this.ns0,o=this.phi1z(this.e3,n)),i=O(a/this.ns0+this.long0),t.x=i,t.y=o,t},names:["Albers_Conic_Equal_Area","Albers","aea"],phi1z:function(t,e){var n,r,a,i,o=Jt(.5*e);if(t<1e-10)return o;for(var s=t*t,l=1;l<=25;l++)if(o+=i=.5*(a=1-(r=t*(n=Math.sin(o)))*r)*a/Math.cos(o)*(e/(1-s)-n/a+.5/t*Math.log((1-r)/(1+r))),Math.abs(i)<=1e-7)return o;return null}};var te={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0),this.infinity_dist=1e3*this.a,this.rc=1},forward:function(t){var e,n,r,a,i,o,s,l=t.x,u=t.y;return r=O(l-this.long0),e=Math.sin(u),n=Math.cos(u),a=Math.cos(r),1,(i=this.sin_p14*e+this.cos_p14*n*a)>0||Math.abs(i)<=1e-10?(o=this.x0+1*this.a*n*Math.sin(r)/i,s=this.y0+1*this.a*(this.cos_p14*e-this.sin_p14*n*a)/i):(o=this.x0+this.infinity_dist*n*Math.sin(r),s=this.y0+this.infinity_dist*(this.cos_p14*e-this.sin_p14*n*a)),t.x=o,t.y=s,t},inverse:function(t){var e,n,r,a,i,o;return t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,t.x/=this.k0,t.y/=this.k0,(e=Math.sqrt(t.x*t.x+t.y*t.y))?(a=Math.atan2(e,this.rc),n=Math.sin(a),r=Math.cos(a),o=Jt(r*this.sin_p14+t.y*n*this.cos_p14/e),i=Math.atan2(t.x*n,e*this.cos_p14*r-t.y*this.sin_p14*n),i=O(this.long0+i)):(o=this.phic0,i=0),t.x=i,t.y=o,t},names:["gnom"]};var ee={init:function(){this.sphere||(this.k0=P(this.e,Math.sin(this.lat_ts),Math.cos(this.lat_ts)))},forward:function(t){var e,n,r=t.x,a=t.y,i=O(r-this.long0);if(this.sphere)e=this.x0+this.a*i*Math.cos(this.lat_ts),n=this.y0+this.a*Math.sin(a)/Math.cos(this.lat_ts);else{var o=Zt(this.e,Math.sin(a));e=this.x0+this.a*this.k0*i,n=this.y0+this.a*o*.5/this.k0}return t.x=e,t.y=n,t},inverse:function(t){var e,n;return t.x-=this.x0,t.y-=this.y0,this.sphere?(e=O(this.long0+t.x/this.a/Math.cos(this.lat_ts)),n=Math.asin(t.y/this.a*Math.cos(this.lat_ts))):(n=function(t,e){var n=1-(1-t*t)/(2*t)*Math.log((1-t)/(1+t));if(Math.abs(Math.abs(e)-n)<1e-6)return e<0?-1*a:a;for(var r,i,o,s,l=Math.asin(.5*e),u=0;u<30;u++)if(i=Math.sin(l),o=Math.cos(l),s=t*i,l+=r=Math.pow(1-s*s,2)/(2*o)*(e/(1-t*t)-i/(1-s*s)+.5/t*Math.log((1-s)/(1+s))),Math.abs(r)<=1e-10)return l;return NaN}(this.e,2*t.y*this.k0/this.a),e=O(this.long0+t.x/(this.a*this.k0))),t.x=e,t.y=n,t},names:["cea"]};var ne={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Equidistant Cylindrical (Plate Carre)",this.rc=Math.cos(this.lat_ts)},forward:function(t){var e=t.x,n=t.y,r=O(e-this.long0),a=Wt(n-this.lat0);return t.x=this.x0+this.a*r*this.rc,t.y=this.y0+this.a*a,t},inverse:function(t){var e=t.x,n=t.y;return t.x=O(this.long0+(e-this.x0)/(this.a*this.rc)),t.y=Wt(this.lat0+(n-this.y0)/this.a),t},names:["Equirectangular","Equidistant_Cylindrical","eqc"]};var re={init:function(){this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=qt(this.es),this.e1=Gt(this.es),this.e2=Ut(this.es),this.e3=Vt(this.es),this.ml0=this.a*zt(this.e0,this.e1,this.e2,this.e3,this.lat0)},forward:function(t){var e,n,r,a=t.x,i=t.y,o=O(a-this.long0);if(r=o*Math.sin(i),this.sphere)Math.abs(i)<=1e-10?(e=this.a*o,n=-1*this.a*this.lat0):(e=this.a*Math.sin(r)/Math.tan(i),n=this.a*(Wt(i-this.lat0)+(1-Math.cos(r))/Math.tan(i)));else if(Math.abs(i)<=1e-10)e=this.a*o,n=-1*this.ml0;else{var s=Yt(this.a,this.e,Math.sin(i))/Math.tan(i);e=s*Math.sin(r),n=this.a*zt(this.e0,this.e1,this.e2,this.e3,i)-this.ml0+s*(1-Math.cos(r))}return t.x=e+this.x0,t.y=n+this.y0,t},inverse:function(t){var e,n,r,a,i,o,s,l,u;if(r=t.x-this.x0,a=t.y-this.y0,this.sphere)if(Math.abs(a+this.a*this.lat0)<=1e-10)e=O(r/this.a+this.long0),n=0;else{var c;for(o=this.lat0+a/this.a,s=r*r/this.a/this.a+o*o,l=o,i=20;i;--i)if(l+=u=-1*(o*(l*(c=Math.tan(l))+1)-l-.5*(l*l+s)*c)/((l-o)/c-1),Math.abs(u)<=1e-10){n=l;break}e=O(this.long0+Math.asin(r*Math.tan(l)/this.a)/Math.sin(n))}else if(Math.abs(a+this.ml0)<=1e-10)n=0,e=O(this.long0+r/this.a);else{var h,f,p,d,m;for(o=(this.ml0+a)/this.a,s=r*r/this.a/this.a+o*o,l=o,i=20;i;--i)if(m=this.e*Math.sin(l),h=Math.sqrt(1-m*m)*Math.tan(l),f=this.a*zt(this.e0,this.e1,this.e2,this.e3,l),p=this.e0-2*this.e1*Math.cos(2*l)+4*this.e2*Math.cos(4*l)-6*this.e3*Math.cos(6*l),l-=u=(o*(h*(d=f/this.a)+1)-d-.5*h*(d*d+s))/(this.es*Math.sin(2*l)*(d*d+s-2*o*d)/(4*h)+(o-d)*(h*p-2/Math.sin(2*l))-p),Math.abs(u)<=1e-10){n=l;break}h=Math.sqrt(1-this.es*Math.pow(Math.sin(n),2))*Math.tan(n),e=O(this.long0+Math.asin(r*h/this.a)/Math.sin(n))}return t.x=e,t.y=n,t},names:["Polyconic","poly"]};var ae={init:function(){this.A=[],this.A[1]=.6399175073,this.A[2]=-.1358797613,this.A[3]=.063294409,this.A[4]=-.02526853,this.A[5]=.0117879,this.A[6]=-.0055161,this.A[7]=.0026906,this.A[8]=-.001333,this.A[9]=67e-5,this.A[10]=-34e-5,this.B_re=[],this.B_im=[],this.B_re[1]=.7557853228,this.B_im[1]=0,this.B_re[2]=.249204646,this.B_im[2]=.003371507,this.B_re[3]=-.001541739,this.B_im[3]=.04105856,this.B_re[4]=-.10162907,this.B_im[4]=.01727609,this.B_re[5]=-.26623489,this.B_im[5]=-.36249218,this.B_re[6]=-.6870983,this.B_im[6]=-1.1651967,this.C_re=[],this.C_im=[],this.C_re[1]=1.3231270439,this.C_im[1]=0,this.C_re[2]=-.577245789,this.C_im[2]=-.007809598,this.C_re[3]=.508307513,this.C_im[3]=-.112208952,this.C_re[4]=-.15094762,this.C_im[4]=.18200602,this.C_re[5]=1.01418179,this.C_im[5]=1.64497696,this.C_re[6]=1.9660549,this.C_im[6]=2.5127645,this.D=[],this.D[1]=1.5627014243,this.D[2]=.5185406398,this.D[3]=-.03333098,this.D[4]=-.1052906,this.D[5]=-.0368594,this.D[6]=.007317,this.D[7]=.0122,this.D[8]=.00394,this.D[9]=-.0013},forward:function(t){var e,n=t.x,a=t.y-this.lat0,i=n-this.long0,o=a/r*1e-5,s=i,l=1,u=0;for(e=1;e<=10;e++)l*=o,u+=this.A[e]*l;var c,h=u,f=s,p=1,d=0,m=0,y=0;for(e=1;e<=6;e++)c=d*h+p*f,p=p*h-d*f,d=c,m=m+this.B_re[e]*p-this.B_im[e]*d,y=y+this.B_im[e]*p+this.B_re[e]*d;return t.x=y*this.a+this.x0,t.y=m*this.a+this.y0,t},inverse:function(t){var e,n,a=t.x,i=t.y,o=a-this.x0,s=(i-this.y0)/this.a,l=o/this.a,u=1,c=0,h=0,f=0;for(e=1;e<=6;e++)n=c*s+u*l,u=u*s-c*l,c=n,h=h+this.C_re[e]*u-this.C_im[e]*c,f=f+this.C_im[e]*u+this.C_re[e]*c;for(var p=0;p<this.iterations;p++){var d,m=h,y=f,v=s,g=l;for(e=2;e<=6;e++)d=y*h+m*f,m=m*h-y*f,y=d,v+=(e-1)*(this.B_re[e]*m-this.B_im[e]*y),g+=(e-1)*(this.B_im[e]*m+this.B_re[e]*y);m=1,y=0;var b=this.B_re[1],_=this.B_im[1];for(e=2;e<=6;e++)d=y*h+m*f,m=m*h-y*f,y=d,b+=e*(this.B_re[e]*m-this.B_im[e]*y),_+=e*(this.B_im[e]*m+this.B_re[e]*y);var x=b*b+_*_;h=(v*b+g*_)/x,f=(g*b-v*_)/x}var w=h,E=f,M=1,S=0;for(e=1;e<=9;e++)M*=w,S+=this.D[e]*M;var k=this.lat0+S*r*1e5,T=this.long0+E;return t.x=T,t.y=k,t},names:["New_Zealand_Map_Grid","nzmg"]};var ie={init:function(){},forward:function(t){var e=t.x,n=t.y,r=O(e-this.long0),a=this.x0+this.a*r,i=this.y0+this.a*Math.log(Math.tan(Math.PI/4+n/2.5))*1.25;return t.x=a,t.y=i,t},inverse:function(t){t.x-=this.x0,t.y-=this.y0;var e=O(this.long0+t.x/this.a),n=2.5*(Math.atan(Math.exp(.8*t.y/this.a))-Math.PI/4);return t.x=e,t.y=n,t},names:["Miller_Cylindrical","mill"]};var oe={init:function(){this.sphere?(this.n=1,this.m=0,this.es=0,this.C_y=Math.sqrt((this.m+1)/this.n),this.C_x=this.C_y/(this.m+1)):this.en=wt(this.es)},forward:function(t){var e,n,r=t.x,a=t.y;if(r=O(r-this.long0),this.sphere){if(this.m)for(var i=this.n*Math.sin(a),o=20;o;--o){var s=(this.m*a+Math.sin(a)-i)/(this.m+Math.cos(a));if(a-=s,Math.abs(s)<1e-10)break}else a=1!==this.n?Math.asin(this.n*Math.sin(a)):a;e=this.a*this.C_x*r*(this.m+Math.cos(a)),n=this.a*this.C_y*a}else{var l=Math.sin(a),u=Math.cos(a);n=this.a*Et(a,l,u,this.en),e=this.a*r*u/Math.sqrt(1-this.es*l*l)}return t.x=e,t.y=n,t},inverse:function(t){var e,n,r,i;return t.x-=this.x0,r=t.x/this.a,t.y-=this.y0,e=t.y/this.a,this.sphere?(e/=this.C_y,r/=this.C_x*(this.m+Math.cos(e)),this.m?e=Jt((this.m*e+Math.sin(e))/this.n):1!==this.n&&(e=Jt(Math.sin(e)/this.n)),r=O(r+this.long0),e=Wt(e)):(e=Mt(t.y/this.a,this.es,this.en),(i=Math.abs(e))<a?(i=Math.sin(e),n=this.long0+t.x*Math.sqrt(1-this.es*i*i)/(this.a*Math.cos(e)),r=O(n)):i-1e-10<a&&(r=this.long0)),t.x=r,t.y=e,t},names:["Sinusoidal","sinu"]};var se={init:function(){},forward:function(t){for(var e=t.x,n=t.y,r=O(e-this.long0),a=n,i=Math.PI*Math.sin(n);;){var o=-(a+Math.sin(a)-i)/(1+Math.cos(a));if(a+=o,Math.abs(o)<1e-10)break}a/=2,Math.PI/2-Math.abs(n)<1e-10&&(r=0);var s=.900316316158*this.a*r*Math.cos(a)+this.x0,l=1.4142135623731*this.a*Math.sin(a)+this.y0;return t.x=s,t.y=l,t},inverse:function(t){var e,n;t.x-=this.x0,t.y-=this.y0,n=t.y/(1.4142135623731*this.a),Math.abs(n)>.999999999999&&(n=.999999999999),e=Math.asin(n);var r=O(this.long0+t.x/(.900316316158*this.a*Math.cos(e)));r<-Math.PI&&(r=-Math.PI),r>Math.PI&&(r=Math.PI),n=(2*e+Math.sin(2*e))/Math.PI,Math.abs(n)>1&&(n=1);var a=Math.asin(n);return t.x=r,t.y=a,t},names:["Mollweide","moll"]};var le={init:function(){Math.abs(this.lat1+this.lat2)<1e-10||(this.lat2=this.lat2||this.lat1,this.temp=this.b/this.a,this.es=1-Math.pow(this.temp,2),this.e=Math.sqrt(this.es),this.e0=qt(this.es),this.e1=Gt(this.es),this.e2=Ut(this.es),this.e3=Vt(this.es),this.sinphi=Math.sin(this.lat1),this.cosphi=Math.cos(this.lat1),this.ms1=P(this.e,this.sinphi,this.cosphi),this.ml1=zt(this.e0,this.e1,this.e2,this.e3,this.lat1),Math.abs(this.lat1-this.lat2)<1e-10?this.ns=this.sinphi:(this.sinphi=Math.sin(this.lat2),this.cosphi=Math.cos(this.lat2),this.ms2=P(this.e,this.sinphi,this.cosphi),this.ml2=zt(this.e0,this.e1,this.e2,this.e3,this.lat2),this.ns=(this.ms1-this.ms2)/(this.ml2-this.ml1)),this.g=this.ml1+this.ms1/this.ns,this.ml0=zt(this.e0,this.e1,this.e2,this.e3,this.lat0),this.rh=this.a*(this.g-this.ml0))},forward:function(t){var e,n=t.x,r=t.y;if(this.sphere)e=this.a*(this.g-r);else{var a=zt(this.e0,this.e1,this.e2,this.e3,r);e=this.a*(this.g-a)}var i=this.ns*O(n-this.long0),o=this.x0+e*Math.sin(i),s=this.y0+this.rh-e*Math.cos(i);return t.x=o,t.y=s,t},inverse:function(t){var e,n,r,a;t.x-=this.x0,t.y=this.rh-t.y+this.y0,this.ns>=0?(n=Math.sqrt(t.x*t.x+t.y*t.y),e=1):(n=-Math.sqrt(t.x*t.x+t.y*t.y),e=-1);var i=0;if(0!==n&&(i=Math.atan2(e*t.x,e*t.y)),this.sphere)return a=O(this.long0+i/this.ns),r=Wt(this.g-n/this.a),t.x=a,t.y=r,t;var o=this.g-n/this.a;return r=$t(o,this.e0,this.e1,this.e2,this.e3),a=O(this.long0+i/this.ns),t.x=a,t.y=r,t},names:["Equidistant_Conic","eqdc"]};var ue={init:function(){this.R=this.a},forward:function(t){var e,n,r=t.x,i=t.y,o=O(r-this.long0);Math.abs(i)<=1e-10&&(e=this.x0+this.R*o,n=this.y0);var s=Jt(2*Math.abs(i/Math.PI));(Math.abs(o)<=1e-10||Math.abs(Math.abs(i)-a)<=1e-10)&&(e=this.x0,n=i>=0?this.y0+Math.PI*this.R*Math.tan(.5*s):this.y0+Math.PI*this.R*-Math.tan(.5*s));var l=.5*Math.abs(Math.PI/o-o/Math.PI),u=l*l,c=Math.sin(s),h=Math.cos(s),f=h/(c+h-1),p=f*f,d=f*(2/c-1),m=d*d,y=Math.PI*this.R*(l*(f-m)+Math.sqrt(u*(f-m)*(f-m)-(m+u)*(p-m)))/(m+u);o<0&&(y=-y),e=this.x0+y;var v=u+f;return y=Math.PI*this.R*(d*v-l*Math.sqrt((m+u)*(u+1)-v*v))/(m+u),n=i>=0?this.y0+y:this.y0-y,t.x=e,t.y=n,t},inverse:function(t){var e,n,r,a,i,o,s,l,u,c,h,f;return t.x-=this.x0,t.y-=this.y0,h=Math.PI*this.R,i=(r=t.x/h)*r+(a=t.y/h)*a,h=3*(a*a/(l=-2*(o=-Math.abs(a)*(1+i))+1+2*a*a+i*i)+(2*(s=o-2*a*a+r*r)*s*s/l/l/l-9*o*s/l/l)/27)/(u=(o-s*s/3/l)/l)/(c=2*Math.sqrt(-u/3)),Math.abs(h)>1&&(h=h>=0?1:-1),f=Math.acos(h)/3,n=t.y>=0?(-c*Math.cos(f+Math.PI/3)-s/3/l)*Math.PI:-(-c*Math.cos(f+Math.PI/3)-s/3/l)*Math.PI,e=Math.abs(r)<1e-10?this.long0:O(this.long0+Math.PI*(i-1+Math.sqrt(1+2*(r*r-a*a)+i*i))/2/r),t.x=e,t.y=n,t},names:["Van_der_Grinten_I","VanDerGrinten","vandg"]};var ce={init:function(){this.sin_p12=Math.sin(this.lat0),this.cos_p12=Math.cos(this.lat0)},forward:function(t){var e,n,r,i,o,s,l,u,c,h,f,p,d,m,y,v,g,b,_,x,w,E,M=t.x,S=t.y,k=Math.sin(t.y),T=Math.cos(t.y),D=O(M-this.long0);return this.sphere?Math.abs(this.sin_p12-1)<=1e-10?(t.x=this.x0+this.a*(a-S)*Math.sin(D),t.y=this.y0-this.a*(a-S)*Math.cos(D),t):Math.abs(this.sin_p12+1)<=1e-10?(t.x=this.x0+this.a*(a+S)*Math.sin(D),t.y=this.y0+this.a*(a+S)*Math.cos(D),t):(b=this.sin_p12*k+this.cos_p12*T*Math.cos(D),g=(v=Math.acos(b))?v/Math.sin(v):1,t.x=this.x0+this.a*g*T*Math.sin(D),t.y=this.y0+this.a*g*(this.cos_p12*k-this.sin_p12*T*Math.cos(D)),t):(e=qt(this.es),n=Gt(this.es),r=Ut(this.es),i=Vt(this.es),Math.abs(this.sin_p12-1)<=1e-10?(o=this.a*zt(e,n,r,i,a),s=this.a*zt(e,n,r,i,S),t.x=this.x0+(o-s)*Math.sin(D),t.y=this.y0-(o-s)*Math.cos(D),t):Math.abs(this.sin_p12+1)<=1e-10?(o=this.a*zt(e,n,r,i,a),s=this.a*zt(e,n,r,i,S),t.x=this.x0+(o+s)*Math.sin(D),t.y=this.y0+(o+s)*Math.cos(D),t):(l=k/T,u=Yt(this.a,this.e,this.sin_p12),c=Yt(this.a,this.e,k),h=Math.atan((1-this.es)*l+this.es*u*this.sin_p12/(c*T)),_=0===(f=Math.atan2(Math.sin(D),this.cos_p12*Math.tan(h)-this.sin_p12*Math.cos(D)))?Math.asin(this.cos_p12*Math.sin(h)-this.sin_p12*Math.cos(h)):Math.abs(Math.abs(f)-Math.PI)<=1e-10?-Math.asin(this.cos_p12*Math.sin(h)-this.sin_p12*Math.cos(h)):Math.asin(Math.sin(D)*Math.cos(h)/Math.sin(f)),p=this.e*this.sin_p12/Math.sqrt(1-this.es),v=u*_*(1-(x=_*_)*(y=(d=this.e*this.cos_p12*Math.cos(f)/Math.sqrt(1-this.es))*d)*(1-y)/6+(w=x*_)/8*(m=p*d)*(1-2*y)+(E=w*_)/120*(y*(4-7*y)-3*p*p*(1-7*y))-E*_/48*m),t.x=this.x0+v*Math.sin(f),t.y=this.y0+v*Math.cos(f),t))},inverse:function(t){var e,n,r,i,o,s,l,u,c,h,f,p,d,m,y,v,g,b,_,x,w,E,M;if(t.x-=this.x0,t.y-=this.y0,this.sphere){if((e=Math.sqrt(t.x*t.x+t.y*t.y))>2*a*this.a)return;return n=e/this.a,r=Math.sin(n),i=Math.cos(n),o=this.long0,Math.abs(e)<=1e-10?s=this.lat0:(s=Jt(i*this.sin_p12+t.y*r*this.cos_p12/e),l=Math.abs(this.lat0)-a,o=Math.abs(l)<=1e-10?this.lat0>=0?O(this.long0+Math.atan2(t.x,-t.y)):O(this.long0-Math.atan2(-t.x,t.y)):O(this.long0+Math.atan2(t.x*r,e*this.cos_p12*i-t.y*this.sin_p12*r))),t.x=o,t.y=s,t}return u=qt(this.es),c=Gt(this.es),h=Ut(this.es),f=Vt(this.es),Math.abs(this.sin_p12-1)<=1e-10?(p=this.a*zt(u,c,h,f,a),e=Math.sqrt(t.x*t.x+t.y*t.y),s=$t((p-e)/this.a,u,c,h,f),o=O(this.long0+Math.atan2(t.x,-1*t.y)),t.x=o,t.y=s,t):Math.abs(this.sin_p12+1)<=1e-10?(p=this.a*zt(u,c,h,f,a),e=Math.sqrt(t.x*t.x+t.y*t.y),s=$t((e-p)/this.a,u,c,h,f),o=O(this.long0+Math.atan2(t.x,t.y)),t.x=o,t.y=s,t):(e=Math.sqrt(t.x*t.x+t.y*t.y),y=Math.atan2(t.x,t.y),d=Yt(this.a,this.e,this.sin_p12),v=Math.cos(y),b=-(g=this.e*this.cos_p12*v)*g/(1-this.es),_=3*this.es*(1-b)*this.sin_p12*this.cos_p12*v/(1-this.es),E=1-b*(w=(x=e/d)-b*(1+b)*Math.pow(x,3)/6-_*(1+3*b)*Math.pow(x,4)/24)*w/2-x*w*w*w/6,m=Math.asin(this.sin_p12*Math.cos(w)+this.cos_p12*Math.sin(w)*v),o=O(this.long0+Math.asin(Math.sin(y)*Math.sin(w)/Math.cos(m))),M=Math.sin(m),s=Math.atan2((M-this.es*E*this.sin_p12)*Math.tan(m),M*(1-this.es)),t.x=o,t.y=s,t)},names:["Azimuthal_Equidistant","aeqd"]};var he={init:function(){this.sin_p14=Math.sin(this.lat0),this.cos_p14=Math.cos(this.lat0)},forward:function(t){var e,n,r,a,i,o,s,l=t.x,u=t.y;return r=O(l-this.long0),e=Math.sin(u),n=Math.cos(u),a=Math.cos(r),1,((i=this.sin_p14*e+this.cos_p14*n*a)>0||Math.abs(i)<=1e-10)&&(o=1*this.a*n*Math.sin(r),s=this.y0+1*this.a*(this.cos_p14*e-this.sin_p14*n*a)),t.x=o,t.y=s,t},inverse:function(t){var e,n,r,i,o,s,l;return t.x-=this.x0,t.y-=this.y0,e=Math.sqrt(t.x*t.x+t.y*t.y),n=Jt(e/this.a),r=Math.sin(n),i=Math.cos(n),s=this.long0,Math.abs(e)<=1e-10?(l=this.lat0,t.x=s,t.y=l,t):(l=Jt(i*this.sin_p14+t.y*r*this.cos_p14/e),o=Math.abs(this.lat0)-a,Math.abs(o)<=1e-10?(s=this.lat0>=0?O(this.long0+Math.atan2(t.x,-t.y)):O(this.long0-Math.atan2(-t.x,t.y)),t.x=s,t.y=l,t):(s=O(this.long0+Math.atan2(t.x*r,e*this.cos_p14*i-t.y*this.sin_p14*r)),t.x=s,t.y=l,t))},names:["ortho"]},fe=1,pe=2,de=3,me=4,ye=5,ve=6,ge=1,be=2,_e=3,xe=4;function we(t,e,n,r){var i;return t<1e-10?(r.value=ge,i=0):(i=Math.atan2(e,n),Math.abs(i)<=s?r.value=ge:i>s&&i<=a+s?(r.value=be,i-=a):i>a+s||i<=-(a+s)?(r.value=_e,i=i>=0?i-u:i+u):(r.value=xe,i+=a)),i}function Ee(t,e){var n=t+e;return n<-u?n+=l:n>+u&&(n-=l),n}var Me={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.lat0=this.lat0||0,this.long0=this.long0||0,this.lat_ts=this.lat_ts||0,this.title=this.title||"Quadrilateralized Spherical Cube",this.lat0>=a-s/2?this.face=ye:this.lat0<=-(a-s/2)?this.face=ve:Math.abs(this.long0)<=s?this.face=fe:Math.abs(this.long0)<=a+s?this.face=this.long0>0?pe:me:this.face=de,0!==this.es&&(this.one_minus_f=1-(this.a-this.b)/this.a,this.one_minus_f_squared=this.one_minus_f*this.one_minus_f)},forward:function(t){var e,n,r,i,o,l,c={x:0,y:0},h={value:0};if(t.x-=this.long0,e=0!==this.es?Math.atan(this.one_minus_f_squared*Math.tan(t.y)):t.y,n=t.x,this.face===ye)i=a-e,n>=s&&n<=a+s?(h.value=ge,r=n-a):n>a+s||n<=-(a+s)?(h.value=be,r=n>0?n-u:n+u):n>-(a+s)&&n<=-s?(h.value=_e,r=n+a):(h.value=xe,r=n);else if(this.face===ve)i=a+e,n>=s&&n<=a+s?(h.value=ge,r=-n+a):n<s&&n>=-s?(h.value=be,r=-n):n<-s&&n>=-(a+s)?(h.value=_e,r=-n-a):(h.value=xe,r=n>0?-n+u:-n-u);else{var f,p,d,m,y,v;this.face===pe?n=Ee(n,+a):this.face===de?n=Ee(n,+u):this.face===me&&(n=Ee(n,-a)),m=Math.sin(e),y=Math.cos(e),v=Math.sin(n),f=y*Math.cos(n),p=y*v,d=m,this.face===fe?r=we(i=Math.acos(f),d,p,h):this.face===pe?r=we(i=Math.acos(p),d,-f,h):this.face===de?r=we(i=Math.acos(-f),d,-p,h):this.face===me?r=we(i=Math.acos(-p),d,f,h):(i=r=0,h.value=ge)}return l=Math.atan(12/u*(r+Math.acos(Math.sin(r)*Math.cos(s))-a)),o=Math.sqrt((1-Math.cos(i))/(Math.cos(l)*Math.cos(l))/(1-Math.cos(Math.atan(1/Math.cos(r))))),h.value===be?l+=a:h.value===_e?l+=u:h.value===xe&&(l+=1.5*u),c.x=o*Math.cos(l),c.y=o*Math.sin(l),c.x=c.x*this.a+this.x0,c.y=c.y*this.a+this.y0,t.x=c.x,t.y=c.y,t},inverse:function(t){var e,n,r,i,o,s,l,c,h,f,p,d,m={lam:0,phi:0},y={value:0};if(t.x=(t.x-this.x0)/this.a,t.y=(t.y-this.y0)/this.a,n=Math.atan(Math.sqrt(t.x*t.x+t.y*t.y)),e=Math.atan2(t.y,t.x),t.x>=0&&t.x>=Math.abs(t.y)?y.value=ge:t.y>=0&&t.y>=Math.abs(t.x)?(y.value=be,e-=a):t.x<0&&-t.x>=Math.abs(t.y)?(y.value=_e,e=e<0?e+u:e-u):(y.value=xe,e+=a),h=u/12*Math.tan(e),o=Math.sin(h)/(Math.cos(h)-1/Math.sqrt(2)),s=Math.atan(o),(l=1-(r=Math.cos(e))*r*(i=Math.tan(n))*i*(1-Math.cos(Math.atan(1/Math.cos(s)))))<-1?l=-1:l>1&&(l=1),this.face===ye)c=Math.acos(l),m.phi=a-c,y.value===ge?m.lam=s+a:y.value===be?m.lam=s<0?s+u:s-u:y.value===_e?m.lam=s-a:m.lam=s;else if(this.face===ve)c=Math.acos(l),m.phi=c-a,y.value===ge?m.lam=-s+a:y.value===be?m.lam=-s:y.value===_e?m.lam=-s-a:m.lam=s<0?-s-u:-s+u;else{var v,g,b;h=(v=l)*v,g=(h+=(b=h>=1?0:Math.sqrt(1-h)*Math.sin(s))*b)>=1?0:Math.sqrt(1-h),y.value===be?(h=g,g=-b,b=h):y.value===_e?(g=-g,b=-b):y.value===xe&&(h=g,g=b,b=-h),this.face===pe?(h=v,v=-g,g=h):this.face===de?(v=-v,g=-g):this.face===me&&(h=v,v=g,g=-h),m.phi=Math.acos(-b)-a,m.lam=Math.atan2(g,v),this.face===pe?m.lam=Ee(m.lam,-a):this.face===de?m.lam=Ee(m.lam,-u):this.face===me&&(m.lam=Ee(m.lam,+a))}return 0!==this.es&&(f=m.phi<0?1:0,p=Math.tan(m.phi),d=this.b/Math.sqrt(p*p+this.one_minus_f_squared),m.phi=Math.atan(Math.sqrt(this.a*this.a-d*d)/(this.one_minus_f*d)),f&&(m.phi=-m.phi)),m.lam+=this.long0,t.x=m.lam,t.y=m.phi,t},names:["Quadrilateralized Spherical Cube","Quadrilateralized_Spherical_Cube","qsc"]},Se=[[1,22199e-21,-715515e-10,31103e-10],[.9986,-482243e-9,-24897e-9,-13309e-10],[.9954,-83103e-8,-448605e-10,-9.86701e-7],[.99,-.00135364,-59661e-9,36777e-10],[.9822,-.00167442,-449547e-11,-572411e-11],[.973,-.00214868,-903571e-10,1.8736e-8],[.96,-.00305085,-900761e-10,164917e-11],[.9427,-.00382792,-653386e-10,-26154e-10],[.9216,-.00467746,-10457e-8,481243e-11],[.8962,-.00536223,-323831e-10,-543432e-11],[.8679,-.00609363,-113898e-9,332484e-11],[.835,-.00698325,-640253e-10,9.34959e-7],[.7986,-.00755338,-500009e-10,9.35324e-7],[.7597,-.00798324,-35971e-9,-227626e-11],[.7186,-.00851367,-701149e-10,-86303e-10],[.6732,-.00986209,-199569e-9,191974e-10],[.6213,-.010418,883923e-10,624051e-11],[.5722,-.00906601,182e-6,624051e-11],[.5322,-.00677797,275608e-9,624051e-11]],ke=[[-520417e-23,.0124,121431e-23,-845284e-16],[.062,.0124,-1.26793e-9,4.22642e-10],[.124,.0124,5.07171e-9,-1.60604e-9],[.186,.0123999,-1.90189e-8,6.00152e-9],[.248,.0124002,7.10039e-8,-2.24e-8],[.31,.0123992,-2.64997e-7,8.35986e-8],[.372,.0124029,9.88983e-7,-3.11994e-7],[.434,.0123893,-369093e-11,-4.35621e-7],[.4958,.0123198,-102252e-10,-3.45523e-7],[.5571,.0121916,-154081e-10,-5.82288e-7],[.6176,.0119938,-241424e-10,-5.25327e-7],[.6769,.011713,-320223e-10,-5.16405e-7],[.7346,.0113541,-397684e-10,-6.09052e-7],[.7903,.0109107,-489042e-10,-104739e-11],[.8435,.0103431,-64615e-9,-1.40374e-9],[.8936,.00969686,-64636e-9,-8547e-9],[.9394,.00840947,-192841e-9,-42106e-10],[.9761,.00616527,-256e-6,-42106e-10],[1,.00328947,-319159e-9,-42106e-10]],Te=o/5,De=function(t,e){return t[0]+e*(t[1]+e*(t[2]+e*t[3]))};var Ce={init:function(){this.x0=this.x0||0,this.y0=this.y0||0,this.long0=this.long0||0,this.es=0,this.title=this.title||"Robinson"},forward:function(t){var e=O(t.x-this.long0),n=Math.abs(t.y),r=Math.floor(n*Te);r<0?r=0:r>=18&&(r=17);var a={x:De(Se[r],n=o*(n-.08726646259971647*r))*e,y:De(ke[r],n)};return t.y<0&&(a.y=-a.y),a.x=a.x*this.a*.8487+this.x0,a.y=a.y*this.a*1.3523+this.y0,a},inverse:function(t){var e={x:(t.x-this.x0)/(.8487*this.a),y:Math.abs(t.y-this.y0)/(1.3523*this.a)};if(e.y>=1)e.x/=Se[18][0],e.y=t.y<0?-a:a;else{var n=Math.floor(18*e.y);for(n<0?n=0:n>=18&&(n=17);;)if(ke[n][0]>e.y)--n;else{if(!(ke[n+1][0]<=e.y))break;++n}var r=ke[n],o=5*(e.y-r[0])/(ke[n+1][0]-r[0]);o=function(t,e,n,r){for(var a=e;r;--r){var i=t(a);if(a-=i,Math.abs(i)<n)break}return a}((function(t){return(De(r,t)-e.y)/function(t,e){return t[1]+e*(2*t[2]+3*e*t[3])}(r,t)}),o,1e-10,100),e.x/=De(Se[n],o),e.y=(5*n+o)*i,t.y<0&&(e.y=-e.y)}return e.x=O(e.x+this.long0),e},names:["Robinson","robin"]};var Ne={init:function(){this.name="geocent"},forward:function(t){return X(t,this.es,this.a)},inverse:function(t){return Z(t,this.es,this.a,this.b)},names:["Geocentric","geocentric","geocent","Geocent"]},Ae=0,Pe=1,Ie=2,Oe=3,je={h:{def:1e5,num:!0},azi:{def:0,num:!0,degrees:!0},tilt:{def:0,num:!0,degrees:!0},long0:{def:0,num:!0},lat0:{def:0,num:!0}};var Re,Le={init:function(){if(Object.keys(je).forEach(function(t){if(void 0===this[t])this[t]=je[t].def;else{if(je[t].num&&isNaN(this[t]))throw new Error("Invalid parameter value, must be numeric "+t+" = "+this[t]);je[t].num&&(this[t]=parseFloat(this[t]))}je[t].degrees&&(this[t]=this[t]*i)}.bind(this)),Math.abs(Math.abs(this.lat0)-a)<1e-10?this.mode=this.lat0<0?Pe:Ae:Math.abs(this.lat0)<1e-10?this.mode=Ie:(this.mode=Oe,this.sinph0=Math.sin(this.lat0),this.cosph0=Math.cos(this.lat0)),this.pn1=this.h/this.a,this.pn1<=0||this.pn1>1e10)throw new Error("Invalid height");this.p=1+this.pn1,this.rp=1/this.p,this.h1=1/this.pn1,this.pfact=(this.p+1)*this.h1,this.es=0;var t=this.tilt,e=this.azi;this.cg=Math.cos(e),this.sg=Math.sin(e),this.cw=Math.cos(t),this.sw=Math.sin(t)},forward:function(t){t.x-=this.long0;var e,n,r,a,i=Math.sin(t.y),o=Math.cos(t.y),s=Math.cos(t.x);switch(this.mode){case Oe:n=this.sinph0*i+this.cosph0*o*s;break;case Ie:n=o*s;break;case Pe:n=-i;break;case Ae:n=i}switch(e=(n=this.pn1/(this.p-n))*o*Math.sin(t.x),this.mode){case Oe:n*=this.cosph0*i-this.sinph0*o*s;break;case Ie:n*=i;break;case Ae:n*=-o*s;break;case Pe:n*=o*s}return a=1/((r=n*this.cg+e*this.sg)*this.sw*this.h1+this.cw),e=(e*this.cg-n*this.sg)*this.cw*a,n=r*a,t.x=e*this.a,t.y=n*this.a,t},inverse:function(t){t.x/=this.a,t.y/=this.a;var e,n,r,a={x:t.x,y:t.y};r=1/(this.pn1-t.y*this.sw),e=this.pn1*t.x*r,n=this.pn1*t.y*this.cw*r,t.x=e*this.cg+n*this.sg,t.y=n*this.cg-e*this.sg;var i=Tt(t.x,t.y);if(Math.abs(i)<1e-10)a.x=0,a.y=t.y;else{var o,s;switch(s=1-i*i*this.pfact,s=(this.p-Math.sqrt(s))/(this.pn1/i+i/this.pn1),o=Math.sqrt(1-s*s),this.mode){case Oe:a.y=Math.asin(o*this.sinph0+t.y*s*this.cosph0/i),t.y=(o-this.sinph0*Math.sin(a.y))*i,t.x*=s*this.cosph0;break;case Ie:a.y=Math.asin(t.y*s/i),t.y=o*i,t.x*=s;break;case Ae:a.y=Math.asin(o),t.y=-t.y;break;case Pe:a.y=-Math.asin(o)}a.x=Math.atan2(t.x,t.y)}return t.x=a.x+this.long0,t.y=a.y,t},names:["Tilted_Perspective","tpers"]};ot.defaultDatum="WGS84",ot.Proj=$,ot.WGS84=new ot.Proj("WGS84"),ot.Point=_t,ot.toPoint=tt,ot.defs=T,ot.transform=nt,ot.mgrs=ut,ot.version="__VERSION__",(Re=ot).Proj.projections.add(St),Re.Proj.projections.add(At),Re.Proj.projections.add(Pt),Re.Proj.projections.add(jt),Re.Proj.projections.add(Rt),Re.Proj.projections.add(Lt),Re.Proj.projections.add(Ft),Re.Proj.projections.add(Bt),Re.Proj.projections.add(Ht),Re.Proj.projections.add(Xt),Re.Proj.projections.add(Qt),Re.Proj.projections.add(Kt),Re.Proj.projections.add(te),Re.Proj.projections.add(ee),Re.Proj.projections.add(ne),Re.Proj.projections.add(re),Re.Proj.projections.add(ae),Re.Proj.projections.add(ie),Re.Proj.projections.add(oe),Re.Proj.projections.add(se),Re.Proj.projections.add(le),Re.Proj.projections.add(ue),Re.Proj.projections.add(ce),Re.Proj.projections.add(he),Re.Proj.projections.add(Me),Re.Proj.projections.add(Ce),Re.Proj.projections.add(Ne),Re.Proj.projections.add(Le);e.default=ot},function(t,e,n){(function(t){var r=Object.getOwnPropertyDescriptors||function(t){for(var e=Object.keys(t),n={},r=0;r<e.length;r++)n[e[r]]=Object.getOwnPropertyDescriptor(t,e[r]);return n},a=/%[sdj%]/g;e.format=function(t){if(!v(t)){for(var e=[],n=0;n<arguments.length;n++)e.push(s(arguments[n]));return e.join(" ")}n=1;for(var r=arguments,i=r.length,o=String(t).replace(a,(function(t){if("%%"===t)return"%";if(n>=i)return t;switch(t){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(t){return"[Circular]"}default:return t}})),l=r[n];n<i;l=r[++n])m(l)||!_(l)?o+=" "+l:o+=" "+s(l);return o},e.deprecate=function(n,r){if(void 0!==t&&!0===t.noDeprecation)return n;if(void 0===t)return function(){return e.deprecate(n,r).apply(this,arguments)};var a=!1;return function(){if(!a){if(t.throwDeprecation)throw new Error(r);t.traceDeprecation?console.trace(r):console.error(r),a=!0}return n.apply(this,arguments)}};var i,o={};function s(t,n){var r={seen:[],stylize:u};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),d(n)?r.showHidden=n:n&&e._extend(r,n),g(r.showHidden)&&(r.showHidden=!1),g(r.depth)&&(r.depth=2),g(r.colors)&&(r.colors=!1),g(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=l),c(r,t,r.depth)}function l(t,e){var n=s.styles[e];return n?"["+s.colors[n][0]+"m"+t+"["+s.colors[n][1]+"m":t}function u(t,e){return t}function c(t,n,r){if(t.customInspect&&n&&E(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var a=n.inspect(r,t);return v(a)||(a=c(t,a,r)),a}var i=function(t,e){if(g(e))return t.stylize("undefined","undefined");if(v(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(y(e))return t.stylize(""+e,"number");if(d(e))return t.stylize(""+e,"boolean");if(m(e))return t.stylize("null","null")}(t,n);if(i)return i;var o=Object.keys(n),s=function(t){var e={};return t.forEach((function(t,n){e[t]=!0})),e}(o);if(t.showHidden&&(o=Object.getOwnPropertyNames(n)),w(n)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return h(n);if(0===o.length){if(E(n)){var l=n.name?": "+n.name:"";return t.stylize("[Function"+l+"]","special")}if(b(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(x(n))return t.stylize(Date.prototype.toString.call(n),"date");if(w(n))return h(n)}var u,_="",M=!1,S=["{","}"];(p(n)&&(M=!0,S=["[","]"]),E(n))&&(_=" [Function"+(n.name?": "+n.name:"")+"]");return b(n)&&(_=" "+RegExp.prototype.toString.call(n)),x(n)&&(_=" "+Date.prototype.toUTCString.call(n)),w(n)&&(_=" "+h(n)),0!==o.length||M&&0!=n.length?r<0?b(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special"):(t.seen.push(n),u=M?function(t,e,n,r,a){for(var i=[],o=0,s=e.length;o<s;++o)D(e,String(o))?i.push(f(t,e,n,r,String(o),!0)):i.push("");return a.forEach((function(a){a.match(/^\d+$/)||i.push(f(t,e,n,r,a,!0))})),i}(t,n,r,s,o):o.map((function(e){return f(t,n,r,s,e,M)})),t.seen.pop(),function(t,e,n){if(t.reduce((function(t,e){return e.indexOf("\n")>=0&&0,t+e.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(u,_,S)):S[0]+_+S[1]}function h(t){return"["+Error.prototype.toString.call(t)+"]"}function f(t,e,n,r,a,i){var o,s,l;if((l=Object.getOwnPropertyDescriptor(e,a)||{value:e[a]}).get?s=l.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):l.set&&(s=t.stylize("[Setter]","special")),D(r,a)||(o="["+a+"]"),s||(t.seen.indexOf(l.value)<0?(s=m(n)?c(t,l.value,null):c(t,l.value,n-1)).indexOf("\n")>-1&&(s=i?s.split("\n").map((function(t){return"  "+t})).join("\n").substr(2):"\n"+s.split("\n").map((function(t){return"   "+t})).join("\n")):s=t.stylize("[Circular]","special")),g(o)){if(i&&a.match(/^\d+$/))return s;(o=JSON.stringify(""+a)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=t.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=t.stylize(o,"string"))}return o+": "+s}function p(t){return Array.isArray(t)}function d(t){return"boolean"==typeof t}function m(t){return null===t}function y(t){return"number"==typeof t}function v(t){return"string"==typeof t}function g(t){return void 0===t}function b(t){return _(t)&&"[object RegExp]"===M(t)}function _(t){return"object"==typeof t&&null!==t}function x(t){return _(t)&&"[object Date]"===M(t)}function w(t){return _(t)&&("[object Error]"===M(t)||t instanceof Error)}function E(t){return"function"==typeof t}function M(t){return Object.prototype.toString.call(t)}function S(t){return t<10?"0"+t.toString(10):t.toString(10)}e.debuglog=function(n){if(g(i)&&(i=t.env.NODE_DEBUG||""),n=n.toUpperCase(),!o[n])if(new RegExp("\\b"+n+"\\b","i").test(i)){var r=t.pid;o[n]=function(){var t=e.format.apply(e,arguments);console.error("%s %d: %s",n,r,t)}}else o[n]=function(){};return o[n]},e.inspect=s,s.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},s.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=p,e.isBoolean=d,e.isNull=m,e.isNullOrUndefined=function(t){return null==t},e.isNumber=y,e.isString=v,e.isSymbol=function(t){return"symbol"==typeof t},e.isUndefined=g,e.isRegExp=b,e.isObject=_,e.isDate=x,e.isError=w,e.isFunction=E,e.isPrimitive=function(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||void 0===t},e.isBuffer=n(26);var k=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function T(){var t=new Date,e=[S(t.getHours()),S(t.getMinutes()),S(t.getSeconds())].join(":");return[t.getDate(),k[t.getMonth()],e].join(" ")}function D(t,e){return Object.prototype.hasOwnProperty.call(t,e)}e.log=function(){console.log("%s - %s",T(),e.format.apply(e,arguments))},e.inherits=n(27),e._extend=function(t,e){if(!e||!_(e))return t;for(var n=Object.keys(e),r=n.length;r--;)t[n[r]]=e[n[r]];return t};var C="undefined"!=typeof Symbol?Symbol("util.promisify.custom"):void 0;function N(t,e){if(!t){var n=new Error("Promise was rejected with a falsy value");n.reason=t,t=n}return e(t)}e.promisify=function(t){if("function"!=typeof t)throw new TypeError('The "original" argument must be of type Function');if(C&&t[C]){var e;if("function"!=typeof(e=t[C]))throw new TypeError('The "util.promisify.custom" argument must be of type Function');return Object.defineProperty(e,C,{value:e,enumerable:!1,writable:!1,configurable:!0}),e}function e(){for(var e,n,r=new Promise((function(t,r){e=t,n=r})),a=[],i=0;i<arguments.length;i++)a.push(arguments[i]);a.push((function(t,r){t?n(t):e(r)}));try{t.apply(this,a)}catch(t){n(t)}return r}return Object.setPrototypeOf(e,Object.getPrototypeOf(t)),C&&Object.defineProperty(e,C,{value:e,enumerable:!1,writable:!1,configurable:!0}),Object.defineProperties(e,r(t))},e.promisify.custom=C,e.callbackify=function(e){if("function"!=typeof e)throw new TypeError('The "original" argument must be of type Function');function n(){for(var n=[],r=0;r<arguments.length;r++)n.push(arguments[r]);var a=n.pop();if("function"!=typeof a)throw new TypeError("The last argument must be of type Function");var i=this,o=function(){return a.apply(i,arguments)};e.apply(this,n).then((function(e){t.nextTick(o,null,e)}),(function(e){t.nextTick(N,e,o)}))}return Object.setPrototypeOf(n,Object.getPrototypeOf(e)),Object.defineProperties(n,r(e)),n}}).call(this,n(25))},function(t,e,n){"use strict";t.exports=function(){}},function(t,e,n){"use strict";e.__esModule=!0;e.addLeadingSlash=function(t){return"/"===t.charAt(0)?t:"/"+t},e.stripLeadingSlash=function(t){return"/"===t.charAt(0)?t.substr(1):t};var r=e.hasBasename=function(t,e){return new RegExp("^"+e+"(\\/|\\?|#|$)","i").test(t)};e.stripBasename=function(t,e){return r(t,e)?t.substr(e.length):t},e.stripTrailingSlash=function(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t},e.parsePath=function(t){var e=t||"/",n="",r="",a=e.indexOf("#");-1!==a&&(r=e.substr(a),e=e.substr(0,a));var i=e.indexOf("?");return-1!==i&&(n=e.substr(i),e=e.substr(0,i)),{pathname:e,search:"?"===n?"":n,hash:"#"===r?"":r}},e.createPath=function(t){var e=t.pathname,n=t.search,r=t.hash,a=e||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,a,i,o,s){if(!t){var l;if(void 0===e)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,a,i,o,s],c=0;(l=new Error(e.replace(/%s/g,(function(){return u[c++]})))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(t,e,n){"use strict";e.__esModule=!0,e.locationsAreEqual=e.createLocation=void 0;var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},a=s(n(15)),i=s(n(16)),o=n(12);function s(t){return t&&t.__esModule?t:{default:t}}e.createLocation=function(t,e,n,i){var s=void 0;"string"==typeof t?(s=(0,o.parsePath)(t)).state=e:(void 0===(s=r({},t)).pathname&&(s.pathname=""),s.search?"?"!==s.search.charAt(0)&&(s.search="?"+s.search):s.search="",s.hash?"#"!==s.hash.charAt(0)&&(s.hash="#"+s.hash):s.hash="",void 0!==e&&void 0===s.state&&(s.state=e));try{s.pathname=decodeURI(s.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+s.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return n&&(s.key=n),i?s.pathname?"/"!==s.pathname.charAt(0)&&(s.pathname=(0,a.default)(s.pathname,i.pathname)):s.pathname=i.pathname:s.pathname||(s.pathname="/"),s},e.locationsAreEqual=function(t,e){return t.pathname===e.pathname&&t.search===e.search&&t.hash===e.hash&&t.key===e.key&&(0,i.default)(t.state,e.state)}},function(t,e,n){"use strict";function r(t){return"/"===t.charAt(0)}function a(t,e){for(var n=e,r=n+1,a=t.length;r<a;n+=1,r+=1)t[n]=t[r];t.pop()}n.r(e),e.default=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=t&&t.split("/")||[],i=e&&e.split("/")||[],o=t&&r(t),s=e&&r(e),l=o||s;if(t&&r(t)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var u=void 0;if(i.length){var c=i[i.length-1];u="."===c||".."===c||""===c}else u=!1;for(var h=0,f=i.length;f>=0;f--){var p=i[f];"."===p?a(i,f):".."===p?(a(i,f),h++):h&&(a(i,f),h--)}if(!l)for(;h--;h)i.unshift("..");!l||""===i[0]||i[0]&&r(i[0])||i.unshift("");var d=i.join("/");return u&&"/"!==d.substr(-1)&&(d+="/"),d}},function(t,e,n){"use strict";n.r(e);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default=function t(e,n){if(e===n)return!0;if(null==e||null==n)return!1;if(Array.isArray(e))return Array.isArray(n)&&e.length===n.length&&e.every((function(e,r){return t(e,n[r])}));var a=void 0===e?"undefined":r(e);if(a!==(void 0===n?"undefined":r(n)))return!1;if("object"===a){var i=e.valueOf(),o=n.valueOf();if(i!==e||o!==n)return t(i,o);var s=Object.keys(e),l=Object.keys(n);return s.length===l.length&&s.every((function(r){return t(e[r],n[r])}))}return!1}},function(t,e,n){"use strict";e.__esModule=!0;var r,a=n(11),i=(r=a)&&r.__esModule?r:{default:r};e.default=function(){var t=null,e=[];return{setPrompt:function(e){return(0,i.default)(null==t,"A history supports only one prompt at a time"),t=e,function(){t===e&&(t=null)}},confirmTransitionTo:function(e,n,r,a){if(null!=t){var o="function"==typeof t?t(e,n):t;"string"==typeof o?"function"==typeof r?r(o,a):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),a(!0)):a(!1!==o)}else a(!0)},appendListener:function(t){var n=!0,r=function(){n&&t.apply(void 0,arguments)};return e.push(r),function(){n=!1,e=e.filter((function(t){return t!==r}))}},notifyListeners:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];e.forEach((function(t){return t.apply(void 0,n)}))}}}},function(t,e,n){"use strict";e.__esModule=!0;e.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),e.addEventListener=function(t,e,n){return t.addEventListener?t.addEventListener(e,n,!1):t.attachEvent("on"+e,n)},e.removeEventListener=function(t,e,n){return t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent("on"+e,n)},e.getConfirmation=function(t,e){return e(window.confirm(t))},e.supportsHistory=function(){var t=window.navigator.userAgent;return(-1===t.indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},e.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},e.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},e.isExtraneousPopstateEvent=function(t){return void 0===t.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e){t.exports=void 0},function(t,e,n){var r,a,i;a=[n(6),n(9)],void 0===(i="function"==typeof(r=function(t,e){return e.__esModule&&e.default&&(e=e.default),t.Proj={},t.Proj._isProj4Obj=function(t){return void 0!==t.inverse&&void 0!==t.forward},t.Proj.Projection=t.Class.extend({initialize:function(e,n,r){var a=t.Proj._isProj4Obj(e);this._proj=a?e:this._projFromCodeDef(e,n),this.bounds=a?n:r},project:function(e){var n=this._proj.forward([e.lng,e.lat]);return new t.Point(n[0],n[1])},unproject:function(e,n){var r=this._proj.inverse([e.x,e.y]);return new t.LatLng(r[1],r[0],n)},_projFromCodeDef:function(t,n){if(n)e.defs(t,n);else if(void 0===e.defs[t]){var r=t.split(":");if(r.length>3&&(t=r[r.length-3]+":"+r[r.length-1]),void 0===e.defs[t])throw"No projection definition for code "+t}return e(t)}}),t.Proj.CRS=t.Class.extend({includes:t.CRS,options:{transformation:new t.Transformation(1,0,-1,0)},initialize:function(e,n,r){var a,i,o,s;if(t.Proj._isProj4Obj(e)?(a=(i=e).srsCode,s=n||{},this.projection=new t.Proj.Projection(i,s.bounds)):(a=e,o=n,s=r||{},this.projection=new t.Proj.Projection(a,o,s.bounds)),t.Util.setOptions(this,s),this.code=a,this.transformation=this.options.transformation,this.options.origin&&(this.transformation=new t.Transformation(1,-this.options.origin[0],-1,this.options.origin[1])),this.options.scales)this._scales=this.options.scales;else if(this.options.resolutions){this._scales=[];for(var l=this.options.resolutions.length-1;l>=0;l--)this.options.resolutions[l]&&(this._scales[l]=1/this.options.resolutions[l])}this.infinite=!this.options.bounds},scale:function(t){var e,n=Math.floor(t);return t===n?this._scales[t]:(e=this._scales[n])+(this._scales[n+1]-e)*(t-n)},zoom:function(t){var e,n,r=this._closestElement(this._scales,t),a=this._scales.indexOf(r);return t===r?a:void 0===r?-1/0:(n=a+1,void 0===(e=this._scales[n])?1/0:(t-r)/(e-r)+a)},distance:t.CRS.Earth.distance,R:t.CRS.Earth.R,_closestElement:function(t,e){for(var n,r=t.length;r--;)t[r]<=e&&(void 0===n||n<t[r])&&(n=t[r]);return n}}),t.Proj.GeoJSON=t.GeoJSON.extend({initialize:function(e,n){this._callLevel=0,t.GeoJSON.prototype.initialize.call(this,e,n)},addData:function(e){var n;e&&(e.crs&&"name"===e.crs.type?n=new t.Proj.CRS(e.crs.properties.name):e.crs&&e.crs.type&&(n=new t.Proj.CRS(e.crs.type+":"+e.crs.properties.code)),void 0!==n&&(this.options.coordsToLatLng=function(e){var r=t.point(e[0],e[1]);return n.projection.unproject(r)})),this._callLevel++;try{t.GeoJSON.prototype.addData.call(this,e)}finally{this._callLevel--,0===this._callLevel&&delete this.options.coordsToLatLng}}}),t.Proj.geoJson=function(e,n){return new t.Proj.GeoJSON(e,n)},t.Proj.ImageOverlay=t.ImageOverlay.extend({initialize:function(e,n,r){t.ImageOverlay.prototype.initialize.call(this,e,null,r),this._projectedBounds=n},_animateZoom:function(e){var n=this._map.getZoomScale(e.zoom),r=t.point(this._projectedBounds.min.x,this._projectedBounds.max.y),a=this._projectedToNewLayerPoint(r,e.zoom,e.center);t.DomUtil.setTransform(this._image,a,n)},_reset:function(){var e=this._map.getZoom(),n=this._map.getPixelOrigin(),r=t.bounds(this._transform(this._projectedBounds.min,e)._subtract(n),this._transform(this._projectedBounds.max,e)._subtract(n)),a=r.getSize();t.DomUtil.setPosition(this._image,r.min),this._image.style.width=a.x+"px",this._image.style.height=a.y+"px"},_projectedToNewLayerPoint:function(t,e,n){var r=this._map.getSize()._divideBy(2),a=this._map.project(n,e)._subtract(r)._round().add(this._map._getMapPanePos());return this._transform(t,e)._subtract(a)},_transform:function(t,e){var n=this._map.options.crs,r=n.transformation,a=n.scale(e);return r.transform(t,a)}}),t.Proj.imageOverlay=function(e,n,r){return new t.Proj.ImageOverlay(e,n,r)},t.Proj})?r.apply(e,a):r)||(t.exports=i)},function(t,e,n){"use strict";function r(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,n,i){e=e||"&",n=n||"=";var o={};if("string"!=typeof t||0===t.length)return o;var s=/\+/g;t=t.split(e);var l=1e3;i&&"number"==typeof i.maxKeys&&(l=i.maxKeys);var u=t.length;l>0&&u>l&&(u=l);for(var c=0;c<u;++c){var h,f,p,d,m=t[c].replace(s,"%20"),y=m.indexOf(n);y>=0?(h=m.substr(0,y),f=m.substr(y+1)):(h=m,f=""),p=decodeURIComponent(h),d=decodeURIComponent(f),r(o,p)?a(o[p])?o[p].push(d):o[p]=[o[p],d]:o[p]=d}return o};var a=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,n){"use strict";var r=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,n,s){return e=e||"&",n=n||"=",null===t&&(t=void 0),"object"==typeof t?i(o(t),(function(o){var s=encodeURIComponent(r(o))+n;return a(t[o])?i(t[o],(function(t){return s+encodeURIComponent(r(t))})).join(e):s+encodeURIComponent(r(t[o]))})).join(e):s?encodeURIComponent(r(s))+n+encodeURIComponent(r(t)):""};var a=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function i(t,e){if(t.map)return t.map(e);for(var n=[],r=0;r<t.length;r++)n.push(e(t[r],r));return n}var o=Object.keys||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e}},function(t,e){var n,r,a=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(t){r=o}}();var l,u=[],c=!1,h=-1;function f(){c&&l&&(c=!1,l.length?u=l.concat(u):h=-1,u.length&&p())}function p(){if(!c){var t=s(f);c=!0;for(var e=u.length;e;){for(l=u,u=[];++h<e;)l&&l[h].run();h=-1,e=u.length}l=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function m(){}a.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new d(t,e)),1!==u.length||c||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=m,a.addListener=m,a.once=m,a.off=m,a.removeListener=m,a.removeAllListeners=m,a.emit=m,a.prependListener=m,a.prependOnceListener=m,a.listeners=function(t){return[]},a.binding=function(t){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(t){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(t,e){t.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),i=n(8),o=n.n(i),s=n(7),l=n(5),u=n.n(l),c=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o};function h(){var t=c(r.useState(!1),2),e=t[0],n=t[1];return r.createElement("div",null,r.createElement("button",{className:"btn btn-link",onClick:function(){n(!0)}},"About"),r.createElement("div",{className:"modal fade show",style:{display:e?"block":"none"},role:"dialog"},r.createElement("div",{className:"modal-dialog",style:{maxWidth:1200},role:"document"},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("h3",{className:"modal-title"},"About openSEE -- System Event Explorer"),r.createElement("button",{type:"button",className:"close",onClick:function(){n(!1)}},r.createElement("span",{"aria-hidden":"true"},"×"))),r.createElement("div",{className:"modal-body",style:{textAlign:"left",maxHeight:800}},r.createElement("p",null,"Version 3.0"),r.createElement("p",null,"openSEE is a browser-based waveform display and analytics tool that is used to view waveforms recorded by DFRs, Power Quality meters, relays and other substation devices that are stored in the openXDA database. The link in the URL window of openSEE can be embedded in emails so that recipients can quickly access the waveforms being studied."),r.createElement("p",null,r.createElement("b",null,"General Navigation Features")),r.createElement("p",null,'The navigational context of openSEE is relative to the "waveform-of-focus" -- the waveform displayed in the top-most collection of charts that is displayed when openSEE is first opened -- typically after clicking a link to drill down into a specific waveform in the Open PQ Dashboard. Tools in openSEE allow the user to dig deeper and understand more about this waveform-of-focus. Tools in openSee also enable users to easily change the waveform-of-focus from the open initially loaded -- moving forward or back sententially in time.'),r.createElement("ul",null,r.createElement("li",null,r.createElement("u",null,"Waveform View Check Boxes")," - These check boxes are used to select the individual charts that are displayed for each waveform being displayed.  Options are voltages, currents, and digitals."),r.createElement("li",null,r.createElement("u",null,"Info, Compare and Analytics Tabs")," - These tabs are used to show summary information about the waveform of focus, select one of from 20+ analytics to perform on the waveform-of-focus, or to find additional waveforms to compare to the waveform-of-focus -- and might be interesting, for example, in the case of double-ended fault location."),r.createElement("li",null,r.createElement("u",null,"Data Tools Menu"),' - This menu allows the user to "pop up" tools to display additional information about the waveform-of-focus.'),r.createElement("li",null,r.createElement("u",null,"Region Select Zooming")," - The waveform initially loads with the the time-scale set to the full length of the waveform capture. With the mouse, the user can select a region of the waveform to zoom in and see more detail."),r.createElement("li",null,r.createElement("u",null,"Reset Zoom")," - After zooming in, this button can be used to set the time-scale back to the full length of the waveform."),r.createElement("li",null,r.createElement("u",null,"Forward and Back Navigation"),' - Using the collection of controls in the upper-right of the openSEE display, the user can select the basis for changing to a new waveform-of-focus.  A selection of "system" means that user can step forward or back to next event in the openXDA base globally (for all DFRs, PQ Meters, etc.), i.e., what havened immediately previously or next on the system relative to the current waveform-of-focus.  A selection of "asset" (or "line") limits this navigation to just events on this asset. A selection of "meter" limits this navigation to just events recored by this substation device.'),r.createElement("li",null,r.createElement("u",null,"Chart Trace Section")," - To the right of each chart, the user has the ability to turn on and off individual traces.  Tabs are provided to organize these selections by data type.")),r.createElement("p",null,"The open-source code for openSEE can be found on GitHub as part of the openXDA Project.   See: ",r.createElement("a",{href:"https://github.com/GridProtectionAlliance/openXDA"},"https://github.com/GridProtectionAlliance/openXDA"))),r.createElement("div",{className:"modal-footer"},r.createElement("button",{type:"button",className:"btn btn-secondary",onClick:function(){n(!1)}},"Close"))))))}var f,p=n(1),d=n.n(p),m=(f=function(t,e){return(f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}f(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),y=function(t){return a.a.createElement("span",{style:{width:10,height:10,margin:3},className:"fa fa-angle-"+(t.ascending?"up":"down")})},v=function(t){function e(e){return t.call(this,e)||this}return m(e,t),e.prototype.componentDidUpdate=function(t,e){},e.prototype.render=function(){var t=this.generateRows(),e=this.generateHeaders();return a.a.createElement("table",{className:null!=this.props.tableClass?this.props.tableClass:"",style:this.props.tableStyle},a.a.createElement("thead",{style:this.props.theadStyle},e),a.a.createElement("tbody",{style:this.props.tbodyStyle},t))},e.prototype.generateHeaders=function(){var t=this;if(0==this.props.cols.length)return null;var e=this.props.cols.map((function(e,n){var r;return null==(r=null!=e.headerStyle?e.headerStyle:{}).cursor&&(r.cursor="pointer"),a.a.createElement("th",{key:n,style:r,onClick:function(n){return t.handleSort({col:e.key,ascending:t.props.ascending},n)}},e.label,t.props.sortField==e.key?a.a.createElement(y,{ascending:t.props.ascending}):null)}));return a.a.createElement("tr",null,e)},e.prototype.generateRows=function(){var t=this;return 0==this.props.data.length?null:this.props.data.map((function(e,n){var r,i=t.props.cols.map((function(r){var i=d.a.clone(r.rowStyle);return a.a.createElement("td",{key:n.toString()+e[r.key]+r.key,style:i,onClick:t.handleClick.bind(t,{col:r.key,row:e,data:e[r.key]})},null!=r.content?r.content(e,r.key,i):e[r.key])}));return null==(r=null!=t.props.rowStyle?d.a.clone(t.props.rowStyle):{}).cursor&&(r.cursor="pointer"),t.props.selected(e)&&(r.backgroundColor="yellow"),a.a.createElement("tr",{style:r,key:n.toString()},i)}))},e.prototype.handleClick=function(t,e){this.props.onClick(t,e)},e.prototype.handleSort=function(t,e){this.props.onSort(t)},e}(a.a.Component),g=function(){function t(){this.getMostActiveMeterActivityData=this.getMostActiveMeterActivityData.bind(this),this.getLeastActiveMeterActivityData=this.getLeastActiveMeterActivityData.bind(this),this.getEventSearchData=this.getEventSearchData.bind(this),this.getEventSearchAsssetVoltageDisturbancesData=this.getEventSearchAsssetVoltageDisturbancesData.bind(this),this.getEventSearchAsssetFaultSegmentsData=this.getEventSearchAsssetFaultSegmentsData.bind(this),this.GetSubStationData=this.GetSubStationData.bind(this),this.GetBreakerData=this.GetBreakerData.bind(this),this.GetCoilData=this.GetCoilData.bind(this),this.GetCapBankSubstationData=this.GetCapBankSubstationData.bind(this),this.GetCapBankData=this.GetCapBankData.bind(this)}return t.prototype.getMostActiveMeterActivityData=function(t,e){return void 0!==this.mostActiveMeterHandle&&this.mostActiveMeterHandle.abort(),this.mostActiveMeterHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeterActivity/GetMostActiveMeterActivityData?numresults="+t+"&column="+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.mostActiveMeterHandle},t.prototype.GetCapBankSubstationData=function(){return void 0!==this.subStationCapBankReportHandle&&this.subStationCapBankReportHandle.abort(),this.subStationCapBankReportHandle=$.ajax({type:"GET",url:homePath+"api/PQDashboard/CapBankReport/GetSubstationData",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.subStationCapBankReportHandle},t.prototype.GetCapBankData=function(t){return void 0!==this.capBankCapBankReportHandle&&this.capBankCapBankReportHandle.abort(),this.capBankCapBankReportHandle=$.ajax({type:"GET",url:homePath+"api/PQDashboard/CapBankReport/GetCapBankData?locationID="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.capBankCapBankReportHandle},t.prototype.GetSubStationData=function(){return void 0!==this.subStationRelayReportHandle&&this.subStationRelayReportHandle.abort(),this.subStationRelayReportHandle=$.ajax({type:"GET",url:homePath+"api/PQDashboard/RelayReport/GetSubstationData",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.subStationRelayReportHandle},t.prototype.GetCoilData=function(t){return void 0!==this.channelRelayReportHandle&&this.channelRelayReportHandle.abort(),this.channelRelayReportHandle=$.ajax({type:"GET",url:homePath+"api/PQDashboard/RelayReport/GetCoilData?lineID="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.channelRelayReportHandle},t.prototype.GetBreakerData=function(t){return void 0!==this.BreakerRelayReportHandle&&this.BreakerRelayReportHandle.abort(),this.BreakerRelayReportHandle=$.ajax({type:"GET",url:homePath+"api/PQDashboard/RelayReport/GetBreakerData?locationID="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.BreakerRelayReportHandle},t.prototype.getLeastActiveMeterActivityData=function(t,e){return void 0!==this.leastActiveMeterHandle&&this.leastActiveMeterHandle.abort(),this.leastActiveMeterHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeterActivity/GetLeastActiveMeterActivityData?numresults="+t+"&column="+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.leastActiveMeterHandle},t.prototype.getFilesProcessedMeterActivityData=function(t){return void 0!==this.filesProcessedMeterHandle&&this.filesProcessedMeterHandle.abort(),this.filesProcessedMeterHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeterActivity/GetFilesProcessedLast24Hrs?column="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.filesProcessedMeterHandle},t.prototype.getFileGroupEvents=function(t){return void 0!==this.fileGroupEventsHandle&&this.fileGroupEventsHandle.abort(),this.fileGroupEventsHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/MeterActivity/QueryFileGroupEvents?FileGroupID="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.fileGroupEventsHandle},t.prototype.getEventSearchData=function(t){return void 0!==this.eventSearchHandle&&this.eventSearchHandle.abort(),this.eventSearchHandle=$.ajax({type:"POST",url:homePath+"api/OpenXDA/GetEventSearchData",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),dataType:"json",cache:!0,async:!0}),this.eventSearchHandle},t.prototype.getEventSearchAsssetVoltageDisturbancesData=function(t){return void 0!==this.eventSearchAssetVoltageDisturbancesHandle&&this.eventSearchAssetVoltageDisturbancesHandle.abort(),this.eventSearchAssetVoltageDisturbancesHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetEventSearchAssetVoltageDisturbances?EventID="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.eventSearchAssetVoltageDisturbancesHandle},t.prototype.getEventSearchAsssetFaultSegmentsData=function(t){return void 0!==this.eventSearchAssetFaultSegmentsHandle&&this.eventSearchAssetFaultSegmentsHandle.abort(),this.eventSearchAssetFaultSegmentsHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetEventSearchFaultSegments?EventID="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.eventSearchAssetFaultSegmentsHandle},t}(),b=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),_=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},x=function(t){return a.a.createElement("div",{id:"meterActivityContainer",style:{width:"100%",height:"100%",textAlign:"center",backgroundColor:"#064e1b",padding:20}},a.a.createElement("div",{style:{width:"calc(50% - 10px)",height:"calc(100% - 57px)",position:"relative",float:"left"}},a.a.createElement("div",{style:{backgroundColor:"white",borderColor:"black",color:"black",textAlign:"left",marginBottom:0,height:"calc(50% - 15px)",padding:15},className:"well well-sm"},a.a.createElement(w,null)),a.a.createElement("div",{style:{marginTop:20,backgroundColor:"white",borderColor:"black",color:"black",textAlign:"left",marginBottom:0,height:"calc(50% - 10px)",padding:15},className:"well well-sm"},a.a.createElement(E,null))),a.a.createElement("div",{style:{backgroundColor:"white",borderColor:"black",color:"black",textAlign:"left",marginBottom:0,height:"calc(100% - 57px)",width:"calc(50% - 11px)",position:"relative",float:"right",padding:15},className:"well well-sm"},a.a.createElement(M,null)))},w=function(t){function e(e){var n=t.call(this,e)||this;return n.seBrowserService=new g,n.state={meterTable:[],sortField:"24Hours",rowsPerPage:7},n}return b(e,t),e.prototype.componentDidMount=function(){var t=this;$(window).on("resize",(function(){return t.resize()})),this.resize()},e.prototype.componentWillUnmount=function(){$(window).off("resize")},e.prototype.createTableRows=function(){var t=this;this.seBrowserService.getMostActiveMeterActivityData(5e3,this.state.sortField).done((function(e){t.setState({meterTable:e})}))},e.prototype.resize=function(){var t=this,e=$(this.refs.divElement).find("th").innerHeight();e==e&&(r=43);var n=$(this.refs.divElement).height()-e,r=$(this.refs.divElement).find("td").innerHeight();null==r&&(r=48),this.setState({rowsPerPage:Math.floor(n/r)},(function(){return t.createTableRows()}))},e.prototype.createContent=function(t,e){var n=this,r="";return r="24Hours"==e?"24h":"7Days"==e?"7d":"30Days"==e?"30d":"24h","0 ( 0 )"!=t[e]?a.a.createElement("a",{onClick:function(){return n.openWindowToMeterEventsByLine(t.FirstEventID,r,moment().format("YYYY/MM/DD HH:mm:ss"))},style:{color:"blue"}},t[e]):a.a.createElement("span",null,t[e])},e.prototype.openWindowToMeterEventsByLine=function(t,e,n){return window.open(homePath+"Main/MeterEventsByLine?eventid="+t+"&context="+e+"&posteddate="+n,t+"MeterEventsByLine"),!1},e.prototype.render=function(){var t=this;return a.a.createElement("div",{style:{height:"100%"}},a.a.createElement("h3",{style:{display:"inline"}},"Most Active Meters"),a.a.createElement("span",{style:{float:"right",color:"silver"}}),a.a.createElement("div",{style:{height:"2px",width:"100%",display:"inline-block",backgroundColor:"black"}}),a.a.createElement("div",{style:{backgroundColor:"white",borderColor:"black",height:"calc(100% - 60px)",overflowY:"auto"},ref:"divElement"},a.a.createElement(v,{cols:[{key:"AssetKey",label:"Name",headerStyle:{width:"calc(40%)"}},{key:"24Hours",label:"Files(Evts) 24H",headerStyle:{width:"20%"},content:function(e,n,r){return t.createContent(e,n)}},{key:"7Days",label:"Files(Evts) 7D",headerStyle:{width:"20%"},content:function(e,n,r){return t.createContent(e,n)}},{key:"30Days",label:"Files(Evts) 30D",headerStyle:{width:"20%"},content:function(e,n,r){return t.createContent(e,n)}}],tableClass:"table",data:this.state.meterTable,sortField:this.state.sortField,ascending:!0,onSort:function(e){t.setState({sortField:e.col},(function(){return t.createTableRows()}))},onClick:function(){},theadStyle:{fontSize:"smaller"}})))},e}(a.a.Component),E=function(t){function e(e){var n=t.call(this,e)||this;return n.seBrowserService=new g,n.state={meterTable:[],sortField:"30Days",rowsPerPage:7},n}return b(e,t),e.prototype.componentDidMount=function(){var t=this;$(window).on("resize",(function(){return t.resize()})),this.resize()},e.prototype.componentWillUnmount=function(){$(window).off("resize")},e.prototype.resize=function(){var t=this,e=$(this.refs.divElement).find("th").innerHeight();e==e&&(r=43);var n=$(this.refs.divElement).height()-e,r=$(this.refs.divElement).find("td").innerHeight();null==r&&(r=48),this.setState({rowsPerPage:Math.floor(n/r)},(function(){return t.createTableRows()}))},e.prototype.createTableRows=function(){var t=this;this.seBrowserService.getLeastActiveMeterActivityData(5e3,this.state.sortField).done((function(e){t.setState({meterTable:e})}))},e.prototype.createContent=function(t,e){var n=this,r="";return r="180Days"==e?"180d":"90Days"==e?"90d":"30d","0 ( 0 )"!=t[e]?a.a.createElement("a",{onClick:function(){return n.openWindowToMeterEventsByLine(t.FirstEventID,r,moment().format("YYYY/MM/DD HH:mm:ss"))},style:{color:"blue"}},t[e]):a.a.createElement("span",null,t[e])},e.prototype.openWindowToMeterEventsByLine=function(t,e,n){return window.open(homePath+"Main/MeterEventsByLine?eventid="+t+"&context="+e+"&posteddate="+n,t+"MeterEventsByLine"),!1},e.prototype.render=function(){var t=this;return a.a.createElement("div",{style:{height:"100%"}},a.a.createElement("h3",{style:{display:"inline"}},"Least Active Meters"),a.a.createElement("span",{style:{float:"right",color:"silver"}}),a.a.createElement("div",{style:{height:"2px",width:"100%",display:"inline-block",backgroundColor:"black"}}),a.a.createElement("div",{style:{backgroundColor:"white",borderColor:"black",height:"calc(100% - 60px)",overflowY:"auto"},ref:"divElement"},a.a.createElement(v,{cols:[{key:"AssetKey",label:"Name",headerStyle:{width:"calc(40%)"}},{key:"30Days",label:"Files(Events) 30D",headerStyle:{width:"20%"},content:function(e,n,r){return t.createContent(e,n)}},{key:"90Days",label:"Files(Events) 90D",headerStyle:{width:"20%"},content:function(e,n,r){return t.createContent(e,n)}},{key:"180Days",label:"Files(Events) 180D",headerStyle:{width:"20%"},content:function(e,n,r){return t.createContent(e,n)}}],tableClass:"table",data:this.state.meterTable,sortField:this.state.sortField,ascending:!0,onSort:function(e){t.setState({sortField:e.col},(function(){return t.createTableRows()}))},onClick:function(){},theadStyle:{fontSize:"smaller"}})))},e}(a.a.Component),M=function(t){function e(e){var n=t.call(this,e)||this;return n.seBrowserService=new g,n.state={meterTable:[],sortField:"CreationTime"},n}return b(e,t),e.prototype.componentDidMount=function(){this.createTableRows()},e.prototype.createTableRows=function(){var t=this;this.seBrowserService.getFilesProcessedMeterActivityData(this.state.sortField).done((function(e){t.setState({meterTable:e.map((function(t,e){return a.a.createElement(S,{key:t.FilePath,CreationTime:t.CreationTime,FilePath:t.FilePath,FileGroupID:t.FileGroupID})}))})}))},e.prototype.render=function(){return a.a.createElement("div",{style:{height:"100%",maxHeight:"calc(100%)",overflowY:"auto",overflowX:"hidden"}},a.a.createElement("h3",{style:{display:"inline"}},"FILES PROCESSED LAST 24 HOURS"),a.a.createElement("span",{style:{float:"right",color:"silver"},id:"files-hint"},"Expand row to view events"),a.a.createElement("div",{style:{height:2,width:"100%",display:"inline-block",backgroundColor:"black"}}),a.a.createElement("div",{id:"meter-activity-files",style:{backgroundColor:"white",borderColor:"black"}}),a.a.createElement("ul",{style:{listStyleType:"none",padding:0}},a.a.createElement("li",{key:"header",style:{width:"100%",borderTop:"1px solid #dee2e6"}},a.a.createElement("div",{style:{display:"table-cell",verticalAlign:"inherit",fontWeight:"bold",textAlign:"inherit",padding:".75em",width:50,fontSize:"smaller"}}),a.a.createElement("div",{style:{display:"table-cell",verticalAlign:"inherit",fontWeight:"bold",textAlign:"inherit",padding:".75em",width:"calc(30% - 50px)",fontSize:"smaller"}},"Time Processed"),a.a.createElement("div",{style:{display:"table-cell",verticalAlign:"inherit",fontWeight:"bold",textAlign:"inherit",padding:".75em",width:"calc(70%)",fontSize:"smaller"}},"File")),this.state.meterTable))},e}(a.a.Component),S=function(t){var e=_(a.a.useState(!1),2),n=e[0],r=e[1],i=_(a.a.useState([]),2),o=i[0],s=i[1],l=new g;return a.a.useEffect((function(){l.getFileGroupEvents(t.FileGroupID).done((function(t){var e=t.map((function(t){return a.a.createElement("tr",{key:t.ID},a.a.createElement("td",null,a.a.createElement("a",{style:{color:"blue"},href:homePath+"Main/OpenSEE?eventid="+t.ID,target:"_blank"},t.LineName)),a.a.createElement("td",null,moment.utc(t.StartTime).format("MM/DD/YY HH:mm:ss")),a.a.createElement("td",null,t.EventTypeName))}));s(e)}))}),[]),a.a.createElement("li",{style:{width:"100%",borderTop:"1px solid #dee2e6"}},a.a.createElement("div",{className:"row"},a.a.createElement("div",{style:{display:"table-cell",verticalAlign:"inherit",textAlign:"inherit",padding:".75em",width:50}},a.a.createElement("button",{className:"btn",onClick:function(){return r(!n)}},a.a.createElement("span",{className:"fa fa-arrow-circle-"+(n?"down":"right")}))),a.a.createElement("div",{style:{display:"table-cell",verticalAlign:"inherit",fontWeight:"bold",textAlign:"inherit",padding:".75em",width:"calc(30% - 50px)",fontSize:"smaller"}},a.a.createElement("span",null,moment(t.CreationTime).format("MM/DD/YYYY"),a.a.createElement("br",null),moment(t.CreationTime).format("HH:mm:ss.SSSSSSS"))),a.a.createElement("div",{style:{display:"table-cell",verticalAlign:"inherit",textAlign:"inherit",padding:".75em",width:"calc(70%)"}},function(t){for(var e=t.FilePath.split("\\"),n=e[e.length-1],r=(i=n.split(".")).splice(0,i.length-1).join("."),i=r.split(","),o="",s=!0,l=0;l<i.length;l++)s?/^-?\d/.test(i[l])||(s=!1,o+=i[l]):o+=","+i[l];return""==o&&(o=r),a.a.createElement("a",{href:xdaInstance+"/Workbench/DataFiles.cshtml",title:n,style:{color:"blue"},target:"_blank"},o)}(t))),a.a.createElement("div",{className:"row",style:{display:n?"block":"none",padding:"5px 20px"}},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Line"),a.a.createElement("th",null,"Start Time"),a.a.createElement("th",null,"Type"))),a.a.createElement("tbody",null,o))))},k=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),T=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.seBrowserService=new g,r.state={sortField:"FileStartTime",ascending:!1,data:[]},r.handleKeyPress=r.handleKeyPress.bind(r),r}return k(e,t),e.prototype.componentDidMount=function(){this.getData(this.props),document.addEventListener("keydown",this.handleKeyPress,!1)},e.prototype.componentWillUnmount=function(){document.removeEventListener("keydown",this.handleKeyPress,!1)},e.prototype.componentWillReceiveProps=function(t){var e=Object(p.clone)(this.props.searchBarProps),n=Object(p.clone)(t.searchBarProps);delete e.stateSetter,delete n.stateSetter,this.props.searchText==t.searchText&&Object(p.isEqual)(e,n)||this.getData(t)},e.prototype.handleKeyPress=function(t){if(0!=this.state.data.length){var e=this.state.data.map((function(t){return t.EventID.toString()})).indexOf(this.props.eventid.toString());40==t.keyCode?(t.preventDefault(),-1==this.props.eventid||e==this.state.data.length-1?this.props.stateSetter({eventid:this.state.data[0].EventID}):this.props.stateSetter({eventid:this.state.data[e+1].EventID})):38==t.keyCode&&(t.preventDefault(),-1==this.props.eventid||0==e?this.props.stateSetter({eventid:this.state.data[this.state.data.length-1].EventID}):this.props.stateSetter({eventid:this.state.data[e-1].EventID})),this.setScrollBar()}},e.prototype.setScrollBar=function(){var t=$(o.a.findDOMNode(this)).find("tbody").children()[0].clientHeight,e=this.state.data.map((function(t){return t.EventID.toString()})).indexOf(this.props.eventid.toString()),n=this.state.data.length*t,r=window.innerHeight-314,a=Math.ceil(n/r),i=Math.ceil(n/a),s=i/t,l=Math.floor(e/s),u=$(o.a.findDOMNode(this)).find("tbody").scrollTop();(u<=l*i||u>=(l+1)*i-i/2)&&$(o.a.findDOMNode(this)).find("tbody").scrollTop(l*i)},e.prototype.getData=function(t){var e=this;this.seBrowserService.getEventSearchData(t.searchBarProps).done((function(n){n.length>100&&alert("The query you submitted was too large ("+n.length.toString()+" records) and only the first 100 records were return.  Please refine your search if necessary.");var r=Object(p.filter)(n,(function(e){return e.AssetName.toLowerCase().indexOf(t.searchText)>=0||e.AssetType.toLowerCase().indexOf(t.searchText)>=0||e.EventType.toLowerCase().indexOf(t.searchText)>=0||moment(e.FileStartTime).format("MM/DD/YYYY").toLowerCase().indexOf(t.searchText)>=0||moment(e.FileStartTime).format("HH:mm:ss.SSSSSSS").toLowerCase().indexOf(t.searchText)>=0||e.VoltageClass.toString().toLowerCase().indexOf(t.searchText)>=0})),a=Object(p.orderBy)(r,["FileStartTime"],["desc"]);e.setState({data:a}),e.props.stateSetter({searchList:a}),0!==n.length&&e.setScrollBar()}))},e.prototype.render=function(){var t=this;return a.a.createElement("div",{style:{width:"100%",maxHeight:window.innerHeight-314,overflowY:"hidden"}},a.a.createElement(v,{cols:[{key:"FileStartTime",label:"Time",headerStyle:{width:"calc(20%)"},rowStyle:{width:"calc(20%)"},content:function(t,e){return a.a.createElement("span",null,moment(t.FileStartTime).format("MM/DD/YYYY"),a.a.createElement("br",null),moment(t.FileStartTime).format("HH:mm:ss.SSSSSSS"))}},{key:"AssetName",label:"Asset",headerStyle:{width:"20%"},rowStyle:{width:"20%"}},{key:"AssetType",label:"Asset Tp",headerStyle:{width:"15%"},rowStyle:{width:"15%"}},{key:"VoltageClass",label:"kV",headerStyle:{width:"15%"},rowStyle:{width:"15%"},content:function(t,e,n){return null!=t[e].toString().split(".")[1]&&t[e].toString().split(".")[1].length>3?t[e].toFixed(3):t[e]}},{key:"EventType",label:"Evt Cl",headerStyle:{width:"15%"},rowStyle:{width:"15%"}},{key:"BreakerOperation",label:"Brkr Op",headerStyle:{width:"auto"},rowStyle:{width:"auto"},content:function(t,e,n){return a.a.createElement("span",null,a.a.createElement("i",{className:1==t.BreakerOperation?"fa fa-check":""}))}},{key:null,label:"",headerStyle:{width:17,padding:0},rowStyle:{width:0,padding:0}}],tableClass:"table table-hover",data:this.state.data,sortField:this.state.sortField,ascending:this.state.ascending,onSort:function(e){if(e.col==t.state.sortField){var n=Object(p.orderBy)(t.state.data,[e.col],[t.state.ascending?"desc":"asc"]);t.setState({ascending:!t.state.ascending,data:n})}else{n=Object(p.orderBy)(t.state.data,[e.col],["asc"]);t.setState({ascending:!0,data:n,sortField:e.col})}},onClick:function(e){return t.props.stateSetter({eventid:e.row.EventID})},theadStyle:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"},tbodyStyle:{display:"block",overflowY:"scroll",maxHeight:window.innerHeight-314},rowStyle:{display:"table",tableLayout:"fixed",width:"calc(100%)"},selected:function(e){return e.EventID==t.props.eventid}}))},e}(a.a.Component),D=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),C=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},N=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(C(arguments[e]));return t},A=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.state={makesRows:[a.a.createElement("option",{key:1,value:"All"},"All")],modelsRows:[a.a.createElement("option",{key:1,value:"All"},"All")]},r}return D(e,t),e.prototype.componentDidMount=function(){var t=this;$("#datePicker").datetimepicker({format:"MM/DD/YYYY"}),$("#datePicker").on("dp.change",(function(e){t.props.stateSetter({date:e.target.value})})),$("#timePicker").datetimepicker({format:"HH:mm:ss.SSS"}),$("#timePicker").on("dp.change",(function(e){t.props.stateSetter({time:e.target.value})})),this.GetMakes(),this.GetModels(this.props.make)},e.prototype.componentWillReceiveProps=function(t){this.props.make!=t.make&&this.GetModels(t.make)},e.prototype.GetMakes=function(){var t=this;$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetEventSearchMeterMakes",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){var n;return t.setState({makesRows:(n=[a.a.createElement("option",{key:1,value:"All"},"All")]).concat.apply(n,N(e.map((function(t){return a.a.createElement("option",{key:t,value:t},t)}))))})}))},e.prototype.GetModels=function(t){var e=this;$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetEventSearchMeterModels/"+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){var n;return e.setState({modelsRows:(n=[a.a.createElement("option",{key:1,value:"All"},"All")]).concat.apply(n,N(t.map((function(t){return a.a.createElement("option",{key:t,value:t},t)}))))})}))},e.prototype.render=function(){var t=this;return a.a.createElement("nav",{className:"navbar navbar-expand-lg navbar-light bg-light"},a.a.createElement("div",{className:"collapse navbar-collapse",id:"navbarSupportedContent",style:{width:"100%"}},a.a.createElement("ul",{className:"navbar-nav mr-auto",style:{width:"100%"}},a.a.createElement("li",{className:"nav-item",style:{width:"35%",paddingRight:10}},a.a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Time Window:"),a.a.createElement("form",null,a.a.createElement("label",{style:{width:"100%",position:"relative",float:"left"}},"Date: "),a.a.createElement("div",{className:"form-group",style:{height:30}},a.a.createElement("div",{className:"input-group",style:{width:"calc(49%)",position:"relative",float:"right"}},a.a.createElement("input",{id:"timePicker",className:"form-control",value:this.props.time,onChange:function(e){t.props.stateSetter({time:e.target.value})}})),a.a.createElement("div",{className:"input-group date",style:{width:"calc(49%)",position:"relative",float:"left"}},a.a.createElement("input",{className:"form-control",id:"datePicker",value:this.props.date,onChange:function(e){t.props.stateSetter({date:e.target.value})}}))),a.a.createElement("label",{style:{width:"100%",position:"relative",float:"left"}},"Time Window(+/-): "),a.a.createElement("div",{className:"form-group",style:{height:30}},a.a.createElement("input",{style:{height:35,width:"calc(49%)",position:"relative",float:"left",border:"1px solid #ced4da",borderRadius:".25em"},value:this.props.windowSize,onChange:function(e){t.props.stateSetter({windowSize:e.target.value})},type:"number"}),a.a.createElement("select",{style:{height:35,width:"calc(49%)",position:"relative",float:"right",border:"1px solid #ced4da",borderRadius:".25em"},value:this.props.timeWindowUnits,onChange:function(e){t.props.stateSetter({timeWindowUnits:e.target.value})}},a.a.createElement("option",{value:"7"},"Year"),a.a.createElement("option",{value:"6"},"Month"),a.a.createElement("option",{value:"5"},"Week"),a.a.createElement("option",{value:"4"},"Day"),a.a.createElement("option",{value:"3"},"Hour"),a.a.createElement("option",{value:"2"},"Minute"),a.a.createElement("option",{value:"1"},"Second"),a.a.createElement("option",{value:"0"},"Millisecond")))))),a.a.createElement("li",{className:"nav-item",style:{width:"25%",paddingRight:10}},a.a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Event Types:"),a.a.createElement("form",null,a.a.createElement("ul",{style:{listStyleType:"none",padding:0,width:"50%",position:"relative",float:"left"}},a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(e){var n=e.target.checked;t.props.stateSetter({faults:n,sags:n,swells:n,interruptions:n,breakerOps:n,transients:n,relayTCE:n,others:n})},defaultChecked:!0}),"  Select All ")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({faults:!t.props.faults})},checked:this.props.faults}),"  Faults ")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({sags:!t.props.sags})},checked:this.props.sags}),"  Sags")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({swells:!t.props.swells})},checked:this.props.swells}),"  Swells")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({interruptions:!t.props.interruptions})},checked:this.props.interruptions}),"  Interruptions"))),a.a.createElement("ul",{style:{listStyleType:"none",padding:0,width:"50%",position:"relative",float:"right"}},a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({breakerOps:!t.props.breakerOps})},checked:this.props.breakerOps}),"  Breaker Ops")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({transients:!t.props.transients})},checked:this.props.transients}),"  Transients")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({relayTCE:!t.props.relayTCE})},checked:this.props.relayTCE}),"  Breaker TCE")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({others:!t.props.others})},checked:this.props.others}),"  Others")))))),a.a.createElement("li",{className:"nav-item",style:{width:"25%",paddingRight:10}},a.a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Asset Types:"),a.a.createElement("form",null,a.a.createElement("ul",{style:{listStyleType:"none",padding:0,width:"100%",position:"relative",float:"left"}},a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(e){var n=e.target.checked;t.props.stateSetter({line:n,bus:n,breaker:n,transformer:n,capacitorBank:n})},defaultChecked:!0}),"  Select All ")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({line:!t.props.line})},checked:this.props.line}),"  Lines ")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({bus:!t.props.bus})},checked:this.props.bus}),"  Buses")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({breaker:!t.props.breaker})},checked:this.props.breaker}),"  Breakers")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({transformer:!t.props.transformer})},checked:this.props.transformer})," Transformers ")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({capacitorBank:!t.props.capacitorBank})},checked:this.props.capacitorBank})," Cap Banks ")))))),a.a.createElement("li",{className:"nav-item",style:{width:"20%",paddingRight:10}},a.a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Voltage Class:"),a.a.createElement("form",null,a.a.createElement("ul",{style:{listStyleType:"none",padding:0}},a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(e){var n=e.target.checked;t.props.stateSetter({g200:n,one00to200:n,thirty5to100:n,oneTo35:n,l1:n})},defaultChecked:!0}),"  Select All ")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({g200:!t.props.g200})},checked:this.props.g200}),"EHV/Trans - >200kV")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({one00to200:!t.props.one00to200})},checked:this.props.one00to200}),"HV/Trans - >100kV & <=200kV")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({thirty5to100:!t.props.thirty5to100})},checked:this.props.thirty5to100}),"MV/Subtrans - >35kV & <=100kV")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({oneTo35:!t.props.oneTo35})},checked:this.props.oneTo35}),"MV/Dist - >1kV & <=35kV")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({l1:!t.props.l1})},checked:this.props.l1}),"LV - <=1kV")))))),a.a.createElement("li",{className:"nav-item",style:{width:"20%"}},a.a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Meter Types:"),a.a.createElement("form",null,a.a.createElement("ul",{style:{listStyleType:"none",padding:0}},a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(e){var n=e.target.checked;t.props.stateSetter({dfr:n,pqMeter:n})},defaultChecked:!0}),"  Select All ")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({dfr:!t.props.dfr})},checked:this.props.dfr}),"  DFR")),a.a.createElement("li",null,a.a.createElement("label",null,a.a.createElement("input",{type:"checkbox",onChange:function(){t.props.stateSetter({pqMeter:!t.props.pqMeter})},checked:this.props.pqMeter}),"  PQMeter"))),a.a.createElement("div",{className:"form-group",style:{height:30}},a.a.createElement("label",{style:{width:75,position:"relative",float:"left"}},"Make: "),a.a.createElement("select",{style:{width:"calc(100% - 75px)",position:"relative",float:"right",border:"1px solid #ced4da",borderRadius:".25em"},value:this.props.make,onChange:function(e){var n=e.target.value;t.props.stateSetter({make:n,model:"All"})}},this.state.makesRows)),a.a.createElement("div",{className:"form-group",style:{height:30}},a.a.createElement("label",{style:{width:75,position:"relative",float:"left"}},"Model: "),a.a.createElement("select",{style:{width:"calc(100% - 75px)",position:"relative",float:"right",border:"1px solid #ced4da",borderRadius:".25em"},value:this.props.model,disabled:"All"==this.props.make,onChange:function(e){t.props.stateSetter({model:e.target.value})}},this.state.modelsRows))))))))},e}(a.a.Component),P=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o};var I=function(t){var e=P(a.a.useState([]),2),n=e[0],r=e[1],i=P(a.a.useState(""),2),o=i[0],s=i[1],l=P(a.a.useState(0),2),u=(l[0],l[1]);function c(){var e,n=(e=t.EventID,$.ajax({type:"GET",url:homePath+"api/OpenXDA/Note/"+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}));return n.done((function(t){var e=t.map((function(t){return a.a.createElement("tr",{key:t.ID},a.a.createElement("td",null,t.Note),a.a.createElement("td",null,moment(t.Timestamp).format("MM/DD/YYYY HH:mm")),a.a.createElement("td",null,t.UserAccount),a.a.createElement("td",null,a.a.createElement("button",{className:"btn btn-sm",onClick:function(e){return function(t){s(t.Note),h(t).done((function(){return c()}))}(t)}},a.a.createElement("span",null,a.a.createElement("i",{className:"fa fa-pencil"}))),a.a.createElement("button",{className:"btn btn-sm",onClick:function(e){return function(t){h(t).done((function(){return c()}))}(t)}},a.a.createElement("span",null,a.a.createElement("i",{className:"fa fa-times"})))))}));r(e),u(e.length)})),function(){null!=n.abort&&n.abort()}}function h(t){return $.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Note",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),cache:!1,async:!0,processData:!1,error:function(t,e,n){console.log(n)}})}return a.a.useEffect((function(){return c()}),[t.EventID]),a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"Notes:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",{style:{width:"50%"}},"Note"),a.a.createElement("th",null,"Time"),a.a.createElement("th",null,"User"),a.a.createElement("th",null))),a.a.createElement("tbody",null,n)),a.a.createElement("textarea",{className:"form-control",rows:4,value:o,onChange:function(t){return s(t.target.value)}})),a.a.createElement("div",{className:"card-footer"},a.a.createElement("button",{className:"btn btn-primary",onClick:function(){(function(t){return $.ajax({type:"POST",url:homePath+"api/OpenXDA/Note",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),cache:!1,async:!0,processData:!1,error:function(t,e,n){console.log(n)}})})({ID:0,EventID:t.EventID,Note:o}).done((function(t){s(""),c()}))},disabled:0==o.length},"Add Note")))},O=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),j=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.seBrowserService=new g,r.state={tableRows:[]},r}return O(e,t),e.prototype.componentDidMount=function(){this.props.EventID>=0&&this.createTableRows(this.props.EventID)},e.prototype.componentWillUnmount=function(){},e.prototype.componentWillReceiveProps=function(t){t.EventID>=0&&this.createTableRows(t.EventID)},e.prototype.createTableRows=function(t){var e=this;this.seBrowserService.getEventSearchAsssetVoltageDisturbancesData(t).done((function(t){var n=t.map((function(t,e){return a.a.createElement("tr",{key:e},a.a.createElement("td",null,t.EventType),a.a.createElement("td",null,t.Phase),a.a.createElement("td",null,(100*t.PerUnitMagnitude).toFixed(1)),a.a.createElement("td",null,(1e3*t.DurationSeconds).toFixed(2)),a.a.createElement("td",null,moment(t.StartTime).format("HH:mm:ss.SSS")))}));e.setState({tableRows:n})}))},e.prototype.render=function(){return a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"Voltage Disturbance in Waveform:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Disturbance Type"),a.a.createElement("th",null,"Phase"),a.a.createElement("th",null,"Magnitude (%)"),a.a.createElement("th",null,"Duration (ms)"),a.a.createElement("th",null,"Start Time"))),a.a.createElement("tbody",null,this.state.tableRows))))},e}(a.a.Component),R=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),L=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.seBrowserService=new g,r.state={tableRows:[],count:0},r.handle=null,r}return R(e,t),e.prototype.componentDidMount=function(){this.props.EventID>=0&&this.createTableRows(this.props.EventID)},e.prototype.componentWillUnmount=function(){null!=this.handle.abort&&this.handle.abort()},e.prototype.componentWillReceiveProps=function(t){t.EventID>=0&&this.createTableRows(t.EventID)},e.prototype.createTableRows=function(t){var e=this;this.handle=this.seBrowserService.getEventSearchAsssetFaultSegmentsData(t).done((function(t){var n=t.map((function(t,e){return a.a.createElement("tr",{key:e},a.a.createElement("td",null,t.SegmentType),a.a.createElement("td",null,moment(t.StartTime).format("HH:mm:ss.SSS")),a.a.createElement("td",null,moment(t.EndTime).format("HH:mm:ss.SSS")),a.a.createElement("td",null,(moment(t.EndTime).diff(moment(t.StartTime))/16.66667).toFixed(1)))}));e.setState({tableRows:n,count:n.length})}))},e.prototype.render=function(){return a.a.createElement("div",{className:"card",style:{display:this.state.count>0?"block":"none"}},a.a.createElement("div",{className:"card-header"},"Fault Evolution Summary:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Evolution"),a.a.createElement("th",null,"Inception"),a.a.createElement("th",null,"End"),a.a.createElement("th",null,"Duration (c)"))),a.a.createElement("tbody",null,this.state.tableRows))))},e}(a.a.Component),F=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},B=function(t){var e=F(a.a.useState([]),2),n=e[0],r=e[1],i=F(a.a.useState({}),2),o=i[0],s=i[1],l=F(a.a.useState(10),2),u=l[0],c=l[1];return a.a.useEffect((function(){var e=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetEventSearchHistory/"+t.EventID+"/"+u,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});e.done((function(t){return r(t)}));var n=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetEventSearchHistoryStats/"+t.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return n.done((function(t){return s(t[0])})),function(){null!=e.abort&&e.abort(),null!=n.abort&&n.abort()}}),[t.EventID,u]),a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"Asset History:",a.a.createElement("select",{className:"pull-right",value:u,onChange:function(t){return c(parseInt(t.target.value))}},a.a.createElement("option",{value:"10"},"10"),a.a.createElement("option",{value:"25"},"25"),a.a.createElement("option",{value:"50"},"50"),a.a.createElement("option",{value:"75"},"75"),a.a.createElement("option",{value:"100"},"100"))),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Stat"),a.a.createElement("th",null,"Value"))),a.a.createElement("tbody",null,Object.keys(o).map((function(t,e){return a.a.createElement("tr",{key:e},a.a.createElement("td",null,t),a.a.createElement("td",null,o[t]))})))),a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Event Type"),a.a.createElement("th",null,"Date"),a.a.createElement("th",null))),a.a.createElement("tbody",null,n.map((function(t,e){return a.a.createElement("tr",{key:e},a.a.createElement("td",null,t.EventType),a.a.createElement("td",null,moment(t.StartTime).format("MM/DD/YYYY HH:mm:ss.SSS")),a.a.createElement("td",null,a.a.createElement("a",{href:homePath+"Main/OpenSEE?eventid="+t.ID,target:"_blank"},"View in OpenSEE")))}))))))},H=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),z=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.state={tableRows:[]},r}return H(e,t),e.prototype.componentDidMount=function(){this.props.EventID>=0&&this.createTableRows(this.props.EventID)},e.prototype.componentWillUnmount=function(){},e.prototype.componentWillReceiveProps=function(t){t.EventID>=0&&this.createTableRows(t.EventID)},e.prototype.getTimeCorrelatedSags=function(t){return void 0!==this.correlatedSagsHandle&&this.correlatedSagsHandle.abort(),this.correlatedSagsHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetTimeCorrelatedSags?eventId="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.correlatedSagsHandle},e.prototype.createTableRows=function(t){var e=this;this.getTimeCorrelatedSags(this.props.EventID).done((function(t){for(var n=[],r=0;r<t.length;++r){var a=t[r],i="default";a.EventID==e.props.EventID&&(i="lightyellow"),n.push(q(a,i))}e.setState({tableRows:n})}))},e.prototype.render=function(){return a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"Correlated Sags:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement(G,null)),a.a.createElement("tbody",null,this.state.tableRows))))},e}(a.a.Component),q=function(t,e){return a.a.createElement("tr",{style:{background:e},key:t.EventID},a.a.createElement("td",{key:"EventID"+t.EventID},a.a.createElement("a",{id:"eventLink",href:"./OpenSEE?eventid="+t.EventID},a.a.createElement("div",{style:{width:"100%",height:"100%"}},t.EventID))),a.a.createElement("td",{key:"EventType"+t.EventID},t.EventType),a.a.createElement("td",{key:"SagMagnitude"+t.EventID},t.SagMagnitudePercent,"%"),a.a.createElement("td",{key:"SagDuration"+t.EventID},t.SagDurationMilliseconds," ms (",t.SagDurationCycles," cycles)"),a.a.createElement("td",{key:"StartTime"+t.EventID},moment(t.StartTime).format("HH:mm:ss.SSS")),a.a.createElement("td",{key:"MeterName"+t.EventID},t.MeterName),a.a.createElement("td",{key:"LineName"+t.EventID},t.LineName))},G=function(){return a.a.createElement("tr",{key:"Header"},a.a.createElement("th",{key:"EventID"},"Event ID"),a.a.createElement("th",{key:"EventType"},"Event Type"),a.a.createElement("th",{key:"SagMagnitude"},"Magnitude"),a.a.createElement("th",{key:"SagDuration"},"Duration"),a.a.createElement("th",{key:"StartTime"},"Start Time"),a.a.createElement("th",{key:"MeterName"},"Meter Name"),a.a.createElement("th",{key:"LineName"},"Line Name"))},U=function(){function t(){this.getFaultDistanceData=this.getFaultDistanceData.bind(this),this.getDigitalsData=this.getDigitalsData.bind(this),this.getStatisticData=this.getStatisticData.bind(this),this.getRelayTrendData=this.getRelayTrendData.bind(this),this.getRelayTrendPerformance=this.getRelayTrendPerformance.bind(this),this.getCapBankAnalytic=this.getCapBankAnalytic.bind(this)}return t.prototype.getWaveformTCEData=function(t,e,n,r){return void 0!==this.waveformTCEDataHandle&&this.waveformTCEDataHandle.abort(),this.waveformTCEDataHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetData?eventId="+t+(null!=n?"&startDate="+n:"")+(null!=r?"&endDate="+r:"")+"&pixels="+e+"&type=TripCoilCurrent&dataType=Time",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.waveformTCEDataHandle},t.prototype.getStatisticData=function(t,e,n,r,a){return void 0!==this.relaystatisticsDataHandle&&this.relaystatisticsDataHandle.abort(),this.relaystatisticsDataHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetData?eventid="+t+(null!=r?"&startDate="+r:"")+(null!=a?"&endDate="+a:"")+"&pixels="+e+"&type="+n+"&dataType=Statistics",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.relaystatisticsDataHandle},t.prototype.getRelayTrendData=function(t,e){return void 0!==this.relayTrendHandle&&this.relayTrendHandle.abort(),this.relayTrendHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/RelayReport/GetTrend?breakerid="+t+"&channelid="+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.relayTrendHandle},t.prototype.getFrequencyData=function(t,e,n,r,a){return void 0!==this.frequencyDataHandle&&this.frequencyDataHandle.abort(),this.frequencyDataHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetData?eventId="+t+(null!=r?"&startDate="+r:"")+(null!=a?"&endDate="+a:"")+"&pixels="+e+"&type="+n+"&dataType=Freq",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.frequencyDataHandle},t.prototype.getFaultDistanceData=function(t,e,n,r){return void 0!==this.faultDistanceDataHandle&&this.faultDistanceDataHandle.abort(),this.faultDistanceDataHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetFaultDistanceData?eventId="+t+(null!=n?"&startDate="+n:"")+(null!=r?"&endDate="+r:"")+"&pixels="+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.faultDistanceDataHandle},t.prototype.getDigitalsData=function(t,e,n,r){return void 0!==this.breakerDigitalsDataHandle&&this.breakerDigitalsDataHandle.abort(),this.breakerDigitalsDataHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetBreakerData?eventId="+t+(null!=n?"&startDate="+n:"")+(null!=r?"&endDate="+r:"")+"&pixels="+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.breakerDigitalsDataHandle},t.prototype.getHeaderData=function(t){return void 0!==this.headerDataHandle&&this.headerDataHandle.abort(),this.headerDataHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetHeaderData?eventId="+t.eventid+(null!=t.breakeroperation?"&breakeroperation="+t.breakeroperation:""),contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.headerDataHandle},t.prototype.getScalarStats=function(t){return void 0!==this.scalarStatHandle&&this.scalarStatHandle.abort(),this.scalarStatHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetScalarStats?eventId="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.scalarStatHandle},t.prototype.getHarmonicStats=function(t){return void 0!==this.harmonicStatHandle&&this.harmonicStatHandle.abort(),this.harmonicStatHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetHarmonics?eventId="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.harmonicStatHandle},t.prototype.getRelayPerformance=function(t){return void 0!==this.RelayPerformanceHandle&&this.RelayPerformanceHandle.abort(),this.RelayPerformanceHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/getRelayPerformance?eventId="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.RelayPerformanceHandle},t.prototype.getCapBankAnalytic=function(t){return void 0!==this.CapBankAnlayticHandle&&this.CapBankAnlayticHandle.abort(),this.CapBankAnlayticHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/getCapBankAnalytic?eventId="+t,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.CapBankAnlayticHandle},t.prototype.getRelayTrendPerformance=function(t,e){return void 0!==this.RelayTrendPerformanceHandle&&this.RelayTrendPerformanceHandle.abort(),this.RelayTrendPerformanceHandle=$.ajax({type:"GET",url:homePath+"api/OpenXDA/RelayReport/getRelayPerformance?lineID="+t+"&channelID="+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.RelayTrendPerformanceHandle},t}(),V=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Y=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.openSEEService=new U,r.state={tableRows:[]},r}return V(e,t),e.prototype.componentDidMount=function(){this.props.EventID>=0&&this.createTableRows(this.props.EventID)},e.prototype.componentWillUnmount=function(){},e.prototype.componentWillReceiveProps=function(t){t.eventId>=0&&this.createTableRows(t.eventId)},e.prototype.createTableRows=function(t){var e=this;this.openSEEService.getRelayPerformance(this.props.EventID).done((function(t){for(var n=[],r=0;r<t.length;++r){var a=t[r],i="default";a.EventID==e.props.EventID&&(i="lightyellow"),n.push(W(a,i))}e.setState({tableRows:n})}))},e.prototype.render=function(){return a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"Breaker Performance:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement(X,null)),a.a.createElement("tbody",null,this.state.tableRows))))},e}(a.a.Component),W=function(t,e){return a.a.createElement("tr",{style:{background:e},key:t.EventID},a.a.createElement("td",{key:"EventID"+t.EventID},a.a.createElement("a",{id:"eventLink",href:homePath+"Main/OpenSEE?eventid="+t.EventID},a.a.createElement("div",{style:{width:"100%",height:"100%"}},t.EventID))),a.a.createElement("td",{key:"InitiateTime"+t.EventID},moment(t.TripInitiate).format("DD/MM/YY HH:MM:ss.SSSS")),a.a.createElement("td",{key:"TripTime"+t.EventID},t.TripTime," micros"),a.a.createElement("td",{key:"PickupTime"+t.EventID},t.PickupTime," micros"),a.a.createElement("td",{key:"TripCoilCondition"+t.EventID},t.TripCoilCondition.toFixed(2)," A/s"),a.a.createElement("td",{key:"L1"+t.EventID},t.Imax1.toFixed(3)," A"),a.a.createElement("td",{key:"L2"+t.EventID},t.Imax2.toFixed(3)," A"))},X=function(){return a.a.createElement("tr",{key:"Header"},a.a.createElement("th",{key:"EventID"},"Event ID"),a.a.createElement("th",{key:"InitiateTime"},"Trip Initiation Time"),a.a.createElement("th",{key:"TripTime"},"Trip Time"),a.a.createElement("th",{key:"PickupTime"},"Pickup Time"),a.a.createElement("th",{key:"TripCoilCondition"},"Trip Coil Condition"),a.a.createElement("th",{key:"L1"},"L1"),a.a.createElement("th",{key:"L2"},"L2"))},Z=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Q=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.state={ShowRelayHistory:!1},r.optionsTripTime={canvas:!0,legend:{show:!1},axisLabels:{show:!0},grid:{autoHighlight:!1,clickable:!0,hoverable:!0,markings:[]},xaxis:{show:!1},yaxis:{show:!0,axisLabel:"Trip (micros)",labelWidth:50},points:{show:!0,fill:!0,fillColor:"#000000"},lines:{show:!0},series:{dashes:{show:!0,dashLength:5},shadowSize:0}},r.optionsPickupTime={canvas:!0,legend:{show:!1},axisLabels:{show:!0},grid:{autoHighlight:!1,clickable:!0,hoverable:!0,markings:[]},xaxis:{show:!1},yaxis:{show:!0,axisLabel:"Pickup (micros)",labelWidth:50},points:{show:!0,fill:!0,fillColor:"#000000"},lines:{show:!0},series:{dashes:{show:!0,dashLength:5},shadowSize:0}},r.optionsTripCoilCondition={canvas:!0,legend:{show:!1},axisLabels:{show:!0},grid:{autoHighlight:!1,clickable:!0,hoverable:!0,markings:[]},xaxis:{show:!1},yaxis:{show:!0,axisLabel:"TCC (A/s)",labelWidth:50},points:{show:!0,fill:!0,fillColor:"#000000"},lines:{show:!0},series:{dashes:{show:!0,dashLength:5},shadowSize:0}},r.optionsImax1={canvas:!0,legend:{show:!1},axisLabels:{show:!0},grid:{autoHighlight:!1,clickable:!0,hoverable:!0,markings:[]},xaxis:{show:!1},yaxis:{show:!0,axisLabel:"Imax 1 (A)",labelWidth:50},points:{show:!0,fill:!0,fillColor:"#000000"},lines:{show:!0}},r.optionsImax2={canvas:!0,legend:{show:!1},axisLabels:{show:!0},grid:{autoHighlight:!1,clickable:!0,hoverable:!0,markings:[]},xaxis:{mode:"time",reserveSpace:!1,ticks:function(t){var e=[],n=(t.max-t.min)/11,a=(r.floorInBase(t.min,t.delta),0);for(Number.NaN,a=1;a<11;++a)e.push(t.min+a*n);return e},tickFormatter:function(t,e){return e.delta<1||e.delta<1e3?moment(t).format("mm:ss.SS")+"<br>Test":moment(t).format("MM/DD/YY")},tickLength:5},yaxis:{show:!0,axisLabel:"Imax 2 (A)",labelWidth:50},points:{show:!0,fill:!0,fillColor:"#000000"},lines:{show:!0}},r}return Z(e,t),e.prototype.componentDidMount=function(){this.getData(this.props)},e.prototype.componentWillUnmount=function(){},e.prototype.componentWillReceiveProps=function(t){},e.prototype.floorInBase=function(t,e){return e*Math.floor(t/e)},e.prototype.getColor=function(t){if(t.indexOf("VA")>=0)return"#A30000";if(t.indexOf("VB")>=0)return"#0029A3";if(t.indexOf("VC")>=0)return"#007A29";if(t.indexOf("VN")>=0)return"#c3c3c3";if(t.indexOf("IA")>=0)return"#FF0000";if(t.indexOf("IB")>=0)return"#0066CC";if(t.indexOf("IC")>=0)return"#33CC33";if(t.indexOf("IR")>=0)return"#c3c3c3";var e=Math.floor(256*Math.random()).toString(16),n=Math.floor(256*Math.random()).toString(16),r=Math.floor(256*Math.random()).toString(16);return"#"+(e.length>1?e:"0"+e)+(n.length>1?n:"0"+n)+(r.length>1?r:"0"+r)},e.prototype.getData=function(t){var e=this;$(this.refs.TTwindow).children().remove(),$(this.refs.PTwindow).children().remove(),$(this.refs.TCCwindow).children().remove(),$(this.refs.L1window).children().remove(),$(this.refs.L2window).children().remove();var n=(window.innerWidth-300-40)/2;this.openSEEService.getStatisticData(t.eventid,n,"History").then((function(t){if(null!=t){e.setState({ShowRelayHistory:!0});var n=[],r=[],a=[],i=[],o=[];$.each(t.Data,(function(t,s){"TripTime"==s.MeasurementType?n.push({label:s.ChartLabel,data:s.DataPoints,color:e.getColor(s.ChartLabel)}):"PickupTime"==s.MeasurementType?r.push({label:s.ChartLabel,data:s.DataPoints,color:e.getColor(s.ChartLabel)}):"TripCoilCondition"==s.MeasurementType?a.push({label:s.ChartLabel,data:s.DataPoints,color:e.getColor(s.ChartLabel)}):"Imax1"==s.MeasurementType?i.push({label:s.ChartLabel,data:s.DataPoints,color:e.getColor(s.ChartLabel)}):"Imax2"==s.MeasurementType?o.push({label:s.ChartLabel,data:s.DataPoints,color:e.getColor(s.ChartLabel)}):"TripTimeAlert"==s.MeasurementType?n.push({label:s.ChartLabel,data:s.DataPoints,color:"#FF0000",lines:{show:!1},points:{show:!1}}):"PickupTimeAlert"==s.MeasurementType?r.push({label:s.ChartLabel,data:s.DataPoints,color:"#FF0000",lines:{show:!1},points:{show:!1}}):"TripCoilConditionAlert"==s.MeasurementType&&a.push({label:s.ChartLabel,data:s.DataPoints,color:"#FF0000",lines:{show:!1},points:{show:!1}})})),$.plot($(e.refs.TTwindow),n,e.optionsTripTime),$.plot($(e.refs.PTwindow),r,e.optionsPickupTime),$.plot($(e.refs.TCCwindow),a,e.optionsTripCoilCondition),$.plot($(e.refs.L1window),i,e.optionsImax1),$.plot($(e.refs.L2window),o,e.optionsImax2)}else e.setState({ShowRelayHistory:!1})}))},e.prototype.render=function(){return a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"Historic Breaker Performance"),a.a.createElement("div",{className:"card-body"},a.a.createElement("div",{ref:"TTwindow",style:{height:150,width:"calc(100%)",display:this.state.ShowRelayHistory?"block":"none"}}),a.a.createElement("div",{ref:"PTwindow",style:{height:150,width:"calc(100%)",display:this.state.ShowRelayHistory?"block":"none"}}),a.a.createElement("div",{ref:"TCCwindow",style:{height:150,width:"calc(100%)",display:this.state.ShowRelayHistory?"block":"none"}}),a.a.createElement("div",{ref:"L1window",style:{height:150,width:"calc(100%)",display:this.state.ShowRelayHistory?"block":"none"}}),a.a.createElement("div",{ref:"L2window",style:{height:150,width:"calc(100%)",display:this.state.ShowRelayHistory?"block":"none"}})))},e}(a.a.Component),J=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o};var K=function(t){var e=J(a.a.useState(""),2),n=e[0],r=e[1],i=J(a.a.useState([]),2),o=i[0],s=i[1],l=J(a.a.useState(""),2),u=l[0],c=l[1],h=J(a.a.useState(0),2),f=h[0],p=h[1];return a.a.useEffect((function(){return function(){var e=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetFileName/"+t.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});e.done((function(t){return r(t)}));var n=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetMappedChannels/"+t.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});n.done((function(t){return s(t)}));var a=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetMeterConfiguration/"+t.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0});return a.done((function(t){c(t[0]),p(t[1])})),function(){null!=e.abort&&e.abort(),null!=n.abort&&n.abort(),null!=a.abort&&a.abort()}}()}),[t.EventID]),a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"File Info:",a.a.createElement("a",{className:"pull-right",target:"_blank",href:scInstance+"?name=ConfigurationHistory&MeterKey="+u+"&MeterConfigurationID="+f},"Meter Configuration Via System Center")),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"File:"),a.a.createElement("td",{style:{borderBottom:"2px solid #dee2e6"}},n)))),a.a.createElement("h6",null,"Mapped Channels"),a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Channel"),a.a.createElement("th",null,"Mapping"))),a.a.createElement("tbody",null,o.map((function(t,e){return a.a.createElement("tr",{key:e},a.a.createElement("td",null,t.Channel),a.a.createElement("td",null,t.Mapping))}))))))},tt=n(6),et=n.n(tt),nt=(n(21),n(9)),rt=(n(22),function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),at=function(t,e,n,r){return new(n||(n=Promise))((function(a,i){function o(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}l((r=r.apply(t,e||[])).next())}))},it=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},ot=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.state={Results:null,FaultInfo:[],Window:2},nt.default.defs("EPSG:3857","+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs"),r}return rt(e,t),e.prototype.GetFaultInfo=function(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/GetFaultInfo/"+this.props.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})},e.prototype.GetLightningInfo=function(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/GetLightningInfo/"+this.props.EventID+"/"+this.state.Window,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})},e.prototype.componentDidMount=function(){return at(this,void 0,void 0,(function(){var t,e,n,r,a,i,o,s,l,u,c=this;return it(this,(function(h){switch(h.label){case 0:return[4,this.GetFaultInfo()];case 1:return t=h.sent(),this.setState({FaultInfo:t}),[4,this.GetLightningInfo()];case 2:if(e=h.sent(),this.setState({Results:e}),this.map=et.a.map("map",{center:[35,-85],zoom:7}),et.a.esri.basemapLayer("Gray").addTo(this.map),(n=et.a.esri.dynamicMapLayer({url:"",opacity:.3,f:"image"})).options.url="http://pq/arcgisproxynew/proxy.ashx?https://gis.tva.gov/arcgis/rest/services/EGIS_Transmission/Transmission_Grid_Restricted_2/MapServer/",n.options.f="image",n.bindPopup((function(t,e,n){return console.log(e)})).addTo(this.map),(r=et.a.esri.dynamicMapLayer({url:"",opacity:1,f:"image"})).options.url="http://pq/arcgisproxynew/proxy.ashx?https://gis.tva.gov/arcgis/rest/services/EGIS_Edit/safetyHazards/MapServer/",r.options.f="image",r.addTo(this.map),(a=et.a.esri.dynamicMapLayer({url:"",opacity:.3,f:"image"})).options.url="http://pq/arcgisproxynew/proxy.ashx?https://gis.tva.gov/arcgis/rest/services/EGIS_Transmission/Transmission_Station_Assets/MapServer/",a.options.f="image",a.addTo(this.map),i=moment(t[0].Inception),o=i.utc().format("YYYY-MM-DDTHH")+":"+(i.minutes()-i.minutes()%5).toString(),s=et.a.tileLayer.wms("https://mesonet.agron.iastate.edu/cgi-bin/wms/nexrad/n0r-t.cgi?time="+o+"&",{layers:"nexrad-n0r-wmst",format:"image/png",transparent:!0,opacity:.5,attribution:"Weather data © 2016 IEM Nexrad"}),this.map.addLayer(s),e.length>0)for(l=et.a.icon({iconUrl:homePath+"Images/lightning.png",iconSize:[20,25]}),u=0;u<e.length;u++)et.a.marker([e[u].Latitude,e[u].Longitude],{icon:l}).addTo(this.map);return t.length>0&&et.a.marker([t[0].Latitude,t[0].Longitude]).addTo(this.map),$.ajax({type:"GET",url:"http://pq/arcgisproxynew/proxy.ashx?https://gis.tva.gov/arcgis/rest/services/EGIS_Transmission/Transmission_Grid_Restricted_2/MapServer/6/query?"+encodeURI("f=json&where=UPPER(LINENAME) like '%"+this.state.FaultInfo[0].AssetName.toUpperCase()+"%'&returnGeometry=true&outfiels=LINENAME"),contentType:"application/json; charset=utf-8",cache:!1,async:!0}).done((function(t){var e={f:"json",unionResults:!0,geodesic:!1,distances:.5,geometries:JSON.stringify({geometryType:"esriGeometryPolyline",geometries:JSON.parse(t).features.map((function(t){return t.geometry}))}),inSR:102100,unit:9093};$.ajax({type:"POST",url:"http://pq/arcgisproxynew/proxy.ashx?https://gis.tva.gov/arcgis/rest/services/Utilities/Geometry/GeometryServer/buffer",data:e,dataType:"application/json",cache:!1,async:!0}).always((function(t){var e=et.a.Proj.geoJson(c.poly(JSON.parse(t.responseText).geometries[0]),{style:function(t){return{color:t.properties.color,opacity:t.properties.opacity}}});e.addTo(c.map),c.map.fitBounds(e.getBounds())}))})),[2]}}))}))},e.prototype.poly=function(t){var e={type:"FeatureCollection",features:[]};if(1===t.rings.length)e.features.push({type:"Feature",properties:{color:"black",opacity:1},geometry:{type:"Polygon",coordinates:t.rings},crs:{type:"name",properties:{name:"EPSG:3857"}}});else{var n=this.dP(t.rings),r=n[0],a=n[1],i=[];if(0===a.length){for(var o=r.length,s=0;o>s;)i.push([r[s]]),s++;e.features.push({type:"Feature",properties:{color:"black",opacity:1},geometry:{type:"MultiPolygon",coordinates:i},crs:{type:"name",properties:{name:"EPSG:3857"}}})}else 1===r.length?(a.unshift(r[0]),e.features.push({type:"Feature",properties:{color:"black",opacity:1},geometry:{type:"Polygon",coordinates:a},crs:{type:"name",properties:{name:"EPSG:3857"}}})):e.features.push({type:"Feature",properties:{color:"black",opacity:1},geometry:{type:"MultiPolygon",coordinates:r,holes:a},crs:{type:"name",properties:{name:"EPSG:3857"}}})}return e},e.prototype.dP=function(t){for(var e=[],n=[],r=t.length,a=0;r>a;)this.c(t[a])?e.push(t[a]):n.push(t[a]),a++;return[e,n]},e.prototype.c=function(t){for(var e=t.length-1,n=0,r=0;e>n;)r+=t[n][0]*t[n+1][1]-t[n+1][0]*t[n][1],n++;return r<=0},e.prototype.epsg3857ToLatLong=function(t){var e=20037508.34,n=180*t[1]/e,r=t[0]*e/180;return[r=Math.atan(Math.E^Math.PI*r/180)/(Math.PI/360)-90,n]},e.prototype.render=function(){var t=this;return a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"ESRI Map"),a.a.createElement("div",{className:"card-body"},a.a.createElement("div",{id:"map",style:{height:400,padding:5,border:"solid 1px gray"}},a.a.createElement("select",{className:"form-control",style:{width:100,position:"absolute",zIndex:1e3,top:10,right:10},value:this.state.Window,onChange:function(e){return t.setState({Window:parseInt(e.target.value)},(function(){return t.componentDidMount()}))}},a.a.createElement("option",{value:"2"},"+/- 2 sec"),a.a.createElement("option",{value:"5"},"+/- 5 sec"),a.a.createElement("option",{value:"10"},"+/- 10 sec"),a.a.createElement("option",{value:"20"},"+/- 20 sec"),a.a.createElement("option",{value:"30"},"+/- 30 sec"),a.a.createElement("option",{value:"60"},"+/- 60 sec"))),a.a.createElement("div",{style:{maxHeight:.3*window.innerHeight-45,overflowY:"auto"}},null==this.state.Results?a.a.createElement("span",null,"Searching..."):null,null!=this.state.Results&&0==this.state.Results.length?a.a.createElement("span",null,"No Lightning Records Found"):null,null!=this.state.Results&&this.state.Results.length>0?a.a.createElement("table",{className:"table",style:{maxHeight:"calc(30% - 50px)",height:"calc(30% - 50px)"}},a.a.createElement("thead",null,a.a.createElement("tr",null,Object.keys(this.state.Results[0]).map((function(t,e){return a.a.createElement("th",{key:e},t)})))),a.a.createElement("tbody",null,this.state.Results.map((function(t,e){return a.a.createElement("tr",{key:e},Object.keys(t).map((function(e,n){return a.a.createElement("td",{key:n},t[e])})))})))):null)))},e}(a.a.Component),st=n(2),lt=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},ut=function(t){var e=(window.innerWidth-300)/2-17-40,n=e-50-20,r=lt(a.a.useState([]),2),i=r[0],o=r[1],s=lt(a.a.useState(!0),2),l=s[0],u=s[1];function c(t){if(t.indexOf("VA")>=0)return"#A30000";if(t.indexOf("VB")>=0)return"#0029A3";if(t.indexOf("VC")>=0)return"#007A29";if(t.indexOf("VN")>=0)return"#c3c3c3";if(t.indexOf("IA")>=0)return"#FF0000";if(t.indexOf("IB")>=0)return"#0066CC";if(t.indexOf("IC")>=0)return"#33CC33";if(t.indexOf("IR")>=0)return"#c3c3c3";var e=Math.floor(256*Math.random()).toString(16),n=Math.floor(256*Math.random()).toString(16),r=Math.floor(256*Math.random()).toString(16);return"#"+(e.length>1?e:"0"+e)+(n.length>1?n:"0"+n)+(r.length>1?r:"0"+r)}return a.a.useEffect((function(){return u(!0),o([]),n=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetData?eventId="+t.EventID+"&pixels="+e+"&type="+t.MeasurementType+"&dataType="+t.DataType,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){return function(t){u(0==Object.keys(t).length);var n=Object(st.scaleLinear)().rangeRound([0,e]),r=Object(st.scaleLinear)().rangeRound([200,0]),i=[0,0],s=[9007199254740991,-9007199254740990];Object.keys(t).forEach((function(e,n,r){var a=Object(st.extent)(t[e],(function(t){return t[1]})),o=Object(st.extent)(t[e],(function(t){return t[0]}));parseFloat(a[0].toString())<i[0]&&(i[0]=parseFloat(a[0].toString())),parseFloat(a[1].toString())>i[1]&&(i[1]=parseFloat(a[1].toString())),parseFloat(o[0].toString())<s[0]&&(s[0]=parseFloat(o[0].toString())),parseFloat(o[1].toString())>s[1]&&(s[1]=parseFloat(o[1].toString()))})),i=[1.2*i[0],1.2*i[1]],r.domain(i),n.domain(s);var l=Object(st.line)().x((function(t){return n(t[0])})).y((function(t){return r(t[1])})),h=[];$.each(Object.keys(t),(function(e,n){h.push(a.a.createElement("path",{key:n,fill:"none",strokeLinejoin:"round",strokeWidth:"1.5",stroke:c(n),d:l(t[n])}))})),o(h)}(t)})),function(){null!=n.abort&&n.abort()};var n}),[t.EventID]),a.a.createElement("div",{style:{height:200,width:n},hidden:l},a.a.createElement("svg",{width:e,height:200,style:{border:"2px solid lightgray"}},a.a.createElement("g",null,i)))},ct=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},ht=function(t){var e=(window.innerWidth-300)/2-17-40,n=e-50-20,r=ct(a.a.useState(!0),2),i=r[0],o=r[1];return a.a.useEffect((function(){return n=$.ajax({type:"GET",url:homePath+"api/OpenXDA/GetData?eventId="+t.EventID+"&pixels="+e+"&type=Voltage&dataType=Time",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){return function(t){if(0!=Object.keys(t).length){o(!1);var n=t[Object.keys(t)[0]],r=Object(st.scaleLinear)().rangeRound([0,e]);r.domain([n[0][0],n[n.length-1][0]]),Object(st.select)("#xaxis").call(Object(st.axisBottom)(r).ticks(5).tickFormat((function(t,e){return moment("1970-01-01T00:00:00").add(t,"milliseconds").format("ss.SSS")}))).call((function(t){return t.select(".domain").remove()}))}else o(!0)}(t)})),function(){null!=n.abort&&n.abort()};var n}),[t.EventID]),a.a.createElement("div",{style:{height:25,width:n},hidden:i},a.a.createElement("svg",{width:e,height:25},a.a.createElement("g",{id:"xaxis"})))};function ft(t){return a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},a.a.createElement("a",{href:openSEEInstance+"?eventid="+t.EventID,target:"_blank"},"View in OpenSEE")),a.a.createElement("div",{className:"card-body"},a.a.createElement(ut,{EventID:t.EventID,MeasurementType:"Voltage",DataType:"Time"}),a.a.createElement(ut,{EventID:t.EventID,MeasurementType:"Current",DataType:"Time"}),a.a.createElement(ut,{EventID:t.EventID,MeasurementType:"TripCoilCurrent",DataType:"Time"}),a.a.createElement(ht,{EventID:t.EventID})))}var pt=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},dt=function(t){var e=(window.innerWidth-300)/2-17-40,n=0,r=40,i=e-r-0,o=200-n-20,s=pt(a.a.useState([]),2),l=s[0],u=s[1],c=pt(a.a.useState(!0),2),h=c[0],f=c[1],p=pt(a.a.useState(e+2),2),d=p[0],m=p[1],y=pt(a.a.useState({Day:{Data:[]}}),2),v=y[0],g=y[1],b=pt(a.a.useState(null),2),_=b[0],x=b[1],w=pt(a.a.useState([]),2),E=w[0],M=w[1];function S(t){var e=Object(st.scaleLinear)().rangeRound([0,i]),n=Object(st.scaleLinear)().rangeRound([o,0]);f(0==Object.keys(t).length);var r=null;Object.keys(t).forEach((function(e,n,a){if("Day"!=e&&t[e].Show){var i=Object(st.extent)(t[e].Data);null!=r?(r[0]>i[0]&&(r[0]=i[0]),r[1]<i[1]&&(r[1]=i[1])):r=i}})),r=[.9*r[0],1.1*r[1]];var s=Object(st.extent)(t.Day.Data);n.domain(r),e.domain(s);for(var l=[s[0]],c=s[0],h=0;h<9;h++)c+=259200,l.push(c);M(l);var p=Object(st.line)().x((function(t){return e(t[0])})).y((function(t){return n(t[1])})),d=[];$.each(Object.keys(t).filter((function(t){return"Day"!=t})),(function(e,n){if(t[n].Show){var r=t[n].Data.map((function(e,n){return[t.Day.Data[n],e]}));d.push(a.a.createElement("path",{key:n,fill:"none",strokeLinejoin:"round",strokeWidth:"1.5",stroke:k(n),d:p(r)}))}})),u(d),Object(st.select)("#yaxis").call(Object(st.axisLeft)(n).ticks(5)).call((function(t){return t.select(".domain").remove()}))}function k(t){if(t.indexOf("Vaisala - Stroke")>=0)return"#A30000";if(t.indexOf("Vaisala - Flash")>=0)return"#0029A3";if(t.indexOf("Vaisala Reprocess - Stroke")>=0)return"#007A29";if(t.indexOf("Vaisala Reprocess - Flash")>=0)return"#8B008B";if(t.indexOf("Weatherbug")>=0)return"#FF0000";var e=Math.floor(256*Math.random()).toString(16),n=Math.floor(256*Math.random()).toString(16),r=Math.floor(256*Math.random()).toString(16);return"#"+(e.length>1?e:"0"+e)+(n.length>1?n:"0"+n)+(r.length>1?r:"0"+r)}function T(t){if(t.nativeEvent.offsetX<r||t.nativeEvent.offsetX>=e-1||t.nativeEvent.offsetY>o||t.nativeEvent.offsetY<n)m(e+1),x(null);else{var a=Object(st.scaleLinear)().rangeRound([0,i]).domain(Object(st.extent)(v.Day.Data)),s=v.Day.Data.map((function(e,n){return[Math.abs(e-a.invert(t.nativeEvent.offsetX)),n]})).sort((function(t,e){return t[0]-e[0]}))[0][1];m(a(v.Day.Data[s])+r),x(v.Day.Data[s])}}return a.a.useEffect((function(){return f(!0),u([]),e=$.ajax({type:"GET",url:homePath+"api/Lightning/"+t.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(t){return function(t){var e={Day:{Data:[]}};t.forEach((function(t,n){Object.keys(t).forEach((function(n,r){e.hasOwnProperty(n)?e[n].Data.push("Day"==n?moment(t[n]).unix():t[n]):e[n]={Data:["Day"==n?moment(t[n]).unix():t[n]],Show:!0}}))})),g(e),S(e)}(t)})),function(){null!=e.abort&&e.abort()};var e}),[t.EventID]),a.a.createElement("div",{className:"card",hidden:h},a.a.createElement("div",{className:"card-header"},"30 Day Lightning History:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("svg",{width:e,height:200,onMouseOver:T,onMouseMove:T,onMouseOut:function(t){return m(e+1)}},a.a.createElement("path",{stroke:"red",d:"M0,0V0,"+o,transform:"translate("+d+",0)"}),a.a.createElement("g",{id:"yaxis",transform:"translate("+r+",0)"},a.a.createElement("path",{stroke:"#000",d:"M0,0V0,"+o})),a.a.createElement("g",{transform:"translate("+r+",0)"},l),a.a.createElement("g",{id:"xaxis",transform:"translate("+r+","+o+")"},a.a.createElement("path",{stroke:"#000",d:"M 0 0 h 0 "+i+" v -"+o+" 0 h 0 -"+i,fill:"none"}),E.map((function(t,e){var n=Object(st.scaleLinear)().rangeRound([0,i]).domain(Object(st.extent)(v.Day.Data));return a.a.createElement("g",{key:e,className:"tick",opacity:"1",transform:"translate("+n(t)+",0)"},a.a.createElement("line",{stroke:"#000",y2:"6"}),a.a.createElement("text",{fill:"#000",y:"9",dy:"0.71em",fontFamily:"sans-serif",fontSize:"10"},moment.unix(t).format("MM/DD")))})))),a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Service"),a.a.createElement("th",null,null==_?"":moment.unix(_).format("MM/DD")),a.a.createElement("th",null,"Totals"))),a.a.createElement("tbody",null,Object.keys(v).filter((function(t){return"Day"!=t})).map((function(t,e){return a.a.createElement("tr",{key:e},a.a.createElement("td",null,a.a.createElement("span",{onClick:function(e){v[t].Show=!v[t].Show,g(v),S(v)},style:{display:"inline-block",marginRight:10,height:20,width:20,backgroundColor:v[t].Show?k(t):"darkgray"}}),t),a.a.createElement("td",null,function(t){if(null==_)return null;var e=v.Day.Data.map((function(e,n){return[e,v[t].Data[n]]})).filter((function(t){return t[0]>=_}));return null==e||0==e.length?null:e[0][1]}(t)),a.a.createElement("td",null,v[t].Data.reduce((function(t,e){return t+e}))))}))))))},mt=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},yt=function(t){var e,n=mt(a.a.useState(!0),2),r=n[0],i=n[1],o=mt(a.a.useState({}),2),s=o[0],l=o[1],u=mt(a.a.useState([]),2),c=u[0],h=u[1];return a.a.useEffect((function(){return e=$.ajax({type:"GET",url:homePath+"api/OpenXDA/FaultInfo/"+t.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),n=$.ajax({type:"GET",url:homePath+"api/SEBrowser/GetLinks/FaultInfo",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),e.done((function(t){t.length>0&&i(!1),l(t[0])})),n.done((function(t){return h(t)})),function(){null!=e.abort&&e.abort(),null!=n.abort&&n.abort()};var e,n}),[t.EventID]),a.a.createElement("div",{className:"card",hidden:r},a.a.createElement("div",{className:"card-header"},"Fault Information:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("tbody",null,a.a.createElement("tr",null,a.a.createElement("td",null,"Fault Inception Time: "),a.a.createElement("td",null,moment(s.FaultTime).format("YYYY-MM-DD HH:mm:ss.SSS")," (Central Time)")),a.a.createElement("tr",null,a.a.createElement("td",null,"Fault Duration: "),a.a.createElement("td",null,s.FaultDuration," cycles / ",null==s.FaultDuration?"":(16.6*s.FaultDuration).toFixed(2)," ms")),a.a.createElement("tr",null,a.a.createElement("td",null,"Fault Type: "),a.a.createElement("td",null,s.FaultType)),a.a.createElement("tr",null,a.a.createElement("td",null,"Location: "),a.a.createElement("td",null,s.FaultDistance,"  miles from ",s.StationName,"(",s.StationID,") on ",s.LineName,"(",s.LineAssetKey,")")),a.a.createElement("tr",{hidden:null==s.DblDist},a.a.createElement("td",null,"Double Ended Location: "),a.a.createElement("td",null,s.DblDist,"  miles from ",s.StationName)),a.a.createElement("tr",null,a.a.createElement("td",null,"Tree Probability: "),a.a.createElement("td",null,null==(e=s.TreeFaultResistance)?"Undetermined":e>20?"High (Rf="+e.toFixed(2)+")":e>10?"Medium (Rf="+e.toFixed(2)+")":"Low (Rf="+e.toFixed(2)+")")),a.a.createElement("tr",null,a.a.createElement("td",null,"View:"),a.a.createElement("td",null,c.map((function(t){return"FaultInfo.Miles"==t.Name?a.a.createElement("a",{style:{paddingRight:5},key:t.Name,href:t.Value+"?Station="+s.StationID+"&Line="+s.LineAssetKey+"&Mileage="+s.FaultDistance,target:"_blank"},t.Display):a.a.createElement("a",{style:{paddingRight:5},key:t.Name,href:t.Value,target:"_blank"},t.Display)}))))))))},vt=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},gt=function(t){var e,n,r,i,o,s,l,u=vt(a.a.useState(!0),2),c=u[0],h=u[1],f=vt(a.a.useState(null),2),p=f[0],d=f[1];return a.a.useEffect((function(){return(e=$.ajax({type:"GET",url:homePath+"api/OpenXDA/LineParameters/"+t.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){t.length>0&&h(!1),d(t[0])})),function(){null!=e.abort&&e.abort()};var e}),[t.EventID]),null==p?null:a.a.createElement("div",{className:"card",hidden:c},a.a.createElement("div",{className:"card-header"},"Line Parameters:",a.a.createElement("a",{className:"pull-right",target:"_blank",href:scInstance+"?name=Asset&AssetID="+p.ID},"Line Configuration Via System Center")),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",{style:{textAlign:"center"},colSpan:5},"Pos-Seq Imp (LLL,LLLG,LL,LLG)")),a.a.createElement("tr",null,a.a.createElement("th",null,"Length (mi)"),a.a.createElement("th",null,"Z1 (Ohm)"),a.a.createElement("th",null,"Ang (Deg)"),a.a.createElement("th",null,"R1 (Ohm)"),a.a.createElement("th",null,"X1 (Ohm)"))),a.a.createElement("tbody",null,a.a.createElement("tr",null,a.a.createElement("td",null,p.Length),a.a.createElement("td",null,Math.sqrt(p.R1^2+p.X1^2).toFixed(3)),a.a.createElement("td",null,Math.atan(p.X1/p.R1*180/Math.PI).toFixed(3)),a.a.createElement("td",null,p.R1.toFixed(4)),a.a.createElement("td",null,p.X1.toFixed(4))),a.a.createElement("tr",null,a.a.createElement("td",null,"Per Mile"),a.a.createElement("td",null,(Math.sqrt(p.R1^2+p.X1^2)/p.Length).toFixed(3)),a.a.createElement("td",null,"-"),a.a.createElement("td",null,(p.R1/p.Length).toFixed(4)),a.a.createElement("td",null,(p.X1/p.Length).toFixed(4))))),a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",{style:{textAlign:"center"},colSpan:5},"Zero-Seq Imp")),a.a.createElement("tr",null,a.a.createElement("th",null,"Length (mi)"),a.a.createElement("th",null,"Z0 (Ohm)"),a.a.createElement("th",null,"Ang (Deg)"),a.a.createElement("th",null,"R0 (Ohm)"),a.a.createElement("th",null,"X0 (Ohm)"))),a.a.createElement("tbody",null,a.a.createElement("tr",null,a.a.createElement("td",null,p.Length),a.a.createElement("td",null,Math.sqrt(p.R0^2+p.X0^2).toFixed(3)),a.a.createElement("td",null,Math.atan(p.X0/p.R0*180/Math.PI).toFixed(3)),a.a.createElement("td",null,p.R0.toFixed(4)),a.a.createElement("td",null,p.X0.toFixed(4))),a.a.createElement("tr",null,a.a.createElement("td",null,"Per Mile"),a.a.createElement("td",null,(Math.sqrt(p.R0^2+p.X0^2)/p.Length).toFixed(3)),a.a.createElement("td",null,"-"),a.a.createElement("td",null,(p.R0/p.Length).toFixed(4)),a.a.createElement("td",null,(p.X0/p.Length).toFixed(4))))),a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",{style:{textAlign:"center"},colSpan:5},"Loop Imp (LG)")),a.a.createElement("tr",null,a.a.createElement("th",null,"Length (mi)"),a.a.createElement("th",null,"ZS (Ohm)"),a.a.createElement("th",null,"Ang (Deg)"),a.a.createElement("th",null,"RS (Ohm)"),a.a.createElement("th",null,"XS (Ohm)"))),(e=(2*p.R1+p.R0)/3,n=e/p.Length,r=(2*p.X1+p.X0)/3,i=r/p.Length,o=Math.sqrt(e^2+r^2),s=o/p.Length,l=180*Math.atan(r/e)/Math.PI,a.a.createElement("tbody",null,a.a.createElement("tr",null,a.a.createElement("td",null,p.Length),a.a.createElement("td",null,o.toFixed(3)),a.a.createElement("td",null,l.toFixed(3)),a.a.createElement("td",null,e.toFixed(4)),a.a.createElement("td",null,r.toFixed(4))),a.a.createElement("tr",null,a.a.createElement("td",null,"Per Mile"),a.a.createElement("td",null,s.toFixed(3)),a.a.createElement("td",null,"-"),a.a.createElement("td",null,n.toFixed(4)),a.a.createElement("td",null,i.toFixed(4))))))))},bt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),_t=function(t,e,n,r){return new(n||(n=Promise))((function(a,i){function o(t){try{l(r.next(t))}catch(t){i(t)}}function s(t){try{l(r.throw(t))}catch(t){i(t)}}function l(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,s)}l((r=r.apply(t,e||[])).next())}))},xt=function(t,e){var n,r,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=o.trys,(a=a.length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},wt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.state={StructureInfo:[],Index:-1},r}return bt(e,t),e.prototype.GetFaultInfo=function(){return $.ajax({type:"GET",url:homePath+"api/OpenXDA/GetFaultInfo/"+this.props.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})},e.prototype.GetNearestStructureInfo=function(t,e,n){return $.ajax({type:"GET",url:homePath+"api/ESRIMap/NearestStructure/"+t+"/"+e+"?mileage="+n,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})},e.prototype.componentDidMount=function(){return _t(this,void 0,void 0,(function(){var t,e;return xt(this,(function(n){switch(n.label){case 0:return[4,this.GetFaultInfo()];case 1:return t=n.sent(),[4,this.GetNearestStructureInfo(t[0].StationName,t[0].AssetName,t[0].Distance)];case 2:return e=n.sent(),this.setState({StructureInfo:e,Index:e.length>0?0:null}),[2]}}))}))},e.prototype.render=function(){var t=this;return a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"Structure Info",a.a.createElement("select",{style:{width:100,position:"absolute",zIndex:1e3,top:10,right:10},value:this.state.Index,onChange:function(e){return t.setState({Index:parseInt(e.target.value)},(function(){return t.componentDidMount()}))}},this.state.StructureInfo.map((function(t,e){return a.a.createElement("option",{value:e},t.StrNumber)})))),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Number"),a.a.createElement("th",null,"Lat"),a.a.createElement("th",null,"Lon"))),a.a.createElement("tbody",null,a.a.createElement("tr",null,a.a.createElement("td",null,null==this.state.StructureInfo[this.state.Index]?"":this.state.StructureInfo[this.state.Index].StrNumber),a.a.createElement("td",null,null==this.state.StructureInfo[this.state.Index]?"":this.state.StructureInfo[this.state.Index].Latitude),a.a.createElement("td",null,null==this.state.StructureInfo[this.state.Index]?"":this.state.StructureInfo[this.state.Index].Longitude)))),a.a.createElement("img",{src:homePath+"api/ESRIMap/Image/"+(null==this.state.StructureInfo[this.state.Index]?btoa("\\\\Images\\noimage.jpg"):btoa(this.state.StructureInfo[this.state.Index].Imagepath)),style:{width:"100%"}})))},e}(a.a.Component),Et=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},Mt=function(t){var e=Et(a.a.useState([]),2),n=e[0],r=e[1];return a.a.useEffect((function(){return(e=$.ajax({type:"GET",url:homePath+"api/SIDA/"+t.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){return r(t)})),function(){null!=e.abort&&e.abort()};var e}),[t.EventID]),a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"Corresponding SIDA Reports:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"SIDA #"),a.a.createElement("th",null,"Evt Time"),a.a.createElement("th",null,"Eqp"),a.a.createElement("th",null,"kV"),a.a.createElement("th",null,"Dur (HH:MM)"),a.a.createElement("th",null,"OM Office"),a.a.createElement("th",null,"Cause (SubCause)"),a.a.createElement("th",null,"Type"),a.a.createElement("th",null,"Excluded"),a.a.createElement("th",null,"Int/Ext"))),a.a.createElement("tbody",null,n.map((function(t){return a.a.createElement("tr",{key:t.ID},a.a.createElement("td",null,t.sidaeventnumber),a.a.createElement("td",null,t.eventtime),a.a.createElement("td",null,t.equipmentname),a.a.createElement("td",null,t.kv),a.a.createElement("td",null,t.durationhr+":"+t.durationmin),a.a.createElement("td",null,t.omoffice),a.a.createElement("td",null,t.causedescription+"("+t.subcausedescription+")"),a.a.createElement("td",null,t.eventtype),a.a.createElement("td",null,t.Ins),a.a.createElement("td",null,t.internalexternal))}))))))},St=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},kt=function(t){var e=St(a.a.useState([]),2),n=e[0],r=e[1],i=St(a.a.useState({ABNORMAL:!1,Close:!1,No:!1,NORMAL:!1,RECEIVED:!1,Start:!1,Trip:!1,Yes:!1}),2),o=i[0],s=i[1],l=St(a.a.useState(2),2),u=l[0],c=l[1],h=St(a.a.useState(null),2),f=h[0],p=h[1];function d(t){var e=t.filter((function(t){return!o[t.Status]})).map((function(t,e){return a.a.createElement("tr",{key:e},a.a.createElement("td",null,t.Time),a.a.createElement("td",null,t.Alarm),a.a.createElement("td",null,t.Status))}));p(e)}return a.a.useEffect((function(){return(e=$.ajax({type:"GET",url:homePath+"api/SOE/"+t.EventID+"/"+u,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){r(t),d(t)})),function(){null!=e.abort&&e.abort()};var e}),[t.EventID,u,o]),a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"SOE:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("div",{className:"row"},a.a.createElement("div",{className:"col"},a.a.createElement("label",null,"Time Window(s)"),a.a.createElement("select",{value:u,onChange:function(t){return c(parseInt(t.target.value))}},a.a.createElement("option",{value:2},"2"),a.a.createElement("option",{value:10},"10"),a.a.createElement("option",{value:60},"60"))),a.a.createElement("div",{className:"col-8"},a.a.createElement("fieldset",{className:"border"},a.a.createElement("legend",{style:{font:"inherit"}},"Filter Out:"),Object.keys(o).map((function(t,e){return a.a.createElement("div",{key:e,className:"form-check form-check-inline"},a.a.createElement("input",{className:"form-check-input",type:"checkbox",value:o[t],onChange:function(){return function(t){o[t]=!o[t],s(o),d(n)}(t)}}),a.a.createElement("label",{className:"form-check-label"},t))}))))),a.a.createElement("div",{style:{maxHeight:200,overflowY:"auto"}},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Time"),a.a.createElement("th",null,"Alarm"),a.a.createElement("th",null,"Status"))),a.a.createElement("tbody",null,f)))))},Tt=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},Dt=function(t){var e=Tt(a.a.useState([]),2),n=e[0],r=e[1];return a.a.useEffect((function(){return(e=$.ajax({type:"GET",url:homePath+"api/LSC/"+t.EventID,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0})).done((function(t){r(t)})),function(){null!=e.abort&&e.abort()};var e}),[t.EventID]),a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"Impacted LSCs:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("div",{style:{maxHeight:200,overflowY:"auto"}},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement("tr",null,a.a.createElement("th",null,"Facility"),a.a.createElement("th",null,"Area"),a.a.createElement("th",null,"Section"),a.a.createElement("th",null,"Component"),a.a.createElement("th",null,"Magnitude"),a.a.createElement("th",null,"Duration"))),a.a.createElement("tbody",null,n.map((function(t,e){return a.a.createElement("tr",{key:e},a.a.createElement("td",null,a.a.createElement("a",{target:"_blank",href:openSEEInstance+"?eventid="+t.EventID},t.Facility)),a.a.createElement("td",null,t.Area),a.a.createElement("td",null,t.SectionTitle),a.a.createElement("td",null,t.ComponentModel),a.a.createElement("td",null,t.Magnitude),a.a.createElement("td",null,t.Duration))})))))))},Ct=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},Nt=function(t){var e=Ct(a.a.useState("LSC"),2),n=e[0],r=e[1];return a.a.useEffect((function(){}),[t.StartTime]),a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"PQWeb Reports:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("ul",{className:"nav nav-tabs"},a.a.createElement("li",{className:"nav-item"},a.a.createElement("button",{className:"nav-link"+("LSC"==n?" active":""),onClick:function(t){return r("LSC")}},"LSC")),a.a.createElement("li",{className:"nav-item"},a.a.createElement("button",{className:"nav-link"+("All"==n?" active":""),onClick:function(t){return r("All")}},"All"))),a.a.createElement("div",{className:"tab-content"},a.a.createElement("div",{style:{height:400,maxHeight:400,overflowY:"hidden"},className:"tab-pane fade"+("LSC"==n?" show active":"")},a.a.createElement("iframe",{style:{height:"inherit",width:"100%"},src:faultLocationInstance+"/pqwebreport.asp?sitefilter=LSC&t="+moment(t.StartTime).format("YYYY-MM-DD HH:mm:ss")})),a.a.createElement("div",{style:{height:400,maxHeight:400,overflowY:"hidden"},className:"tab-pane fade"+("All"==n?" show active":"")},a.a.createElement("iframe",{style:{height:"inherit",width:"100%"},src:faultLocationInstance+"/pqwebreport.asp?t="+moment(t.StartTime).format("YYYY-MM-DD HH:mm:ss")})))))},At=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Pt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.openSEEService=new U,r.state={tableRows:[]},r}return At(e,t),e.prototype.componentDidMount=function(){this.props.EventID>=0&&this.createTableRows(this.props.EventID)},e.prototype.componentWillUnmount=function(){},e.prototype.componentWillReceiveProps=function(t){t.eventId>=0&&this.createTableRows(t.eventId)},e.prototype.createTableRows=function(t){var e=this;this.openSEEService.getCapBankAnalytic(this.props.EventID).done((function(t){for(var n=[],r=0;r<t.length;++r){var a=t[r];n.push(It(a))}e.setState({tableRows:n})}))},e.prototype.render=function(){return a.a.createElement("div",{className:"card"},a.a.createElement("div",{className:"card-header"},"EPRI CapBank Analytic:"),a.a.createElement("div",{className:"card-body"},a.a.createElement("table",{className:"table"},a.a.createElement("thead",null,a.a.createElement(Ot,null)),a.a.createElement("tbody",null,this.state.tableRows))))},e}(a.a.Component),It=function(t){return a.a.createElement("tr",{key:t.ID},a.a.createElement("td",{key:"Phase"+t.ID},t.Phase),a.a.createElement("td",{key:"Status"+t.ID},t.Status),a.a.createElement("td",{key:"Operation"+t.ID},t.Operation),a.a.createElement("td",{key:"Resonance"+t.ID},t.Resonance?"Yes":"No"),a.a.createElement("td",{key:"Health"+t.ID},t.CapBankHealth),a.a.createElement("td",{key:"PIS"+t.ID},t.PreInsertionSwitch),a.a.createElement("td",{key:"Restrike"+t.ID},t.Restrike))},Ot=function(){return a.a.createElement("tr",{key:"Header"},a.a.createElement("th",{key:"Phase"},"Phase"),a.a.createElement("th",{key:"Status"},"Analysis Status"),a.a.createElement("th",{key:"Operation"},"CapBank Operation"),a.a.createElement("th",{key:"Resonance"},"Resonance"),a.a.createElement("th",{key:"Health"},"CapBank Health"),a.a.createElement("th",{key:"Restrike"},"Restrike"),a.a.createElement("th",{key:"PIS"},"PreInsertionSwitching Condition"))},jt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Rt=function(t){function e(e){var n=t.call(this,e)||this;return n.state={Settings:[],Tab:null==n.props.InitialTab?"Waveform":n.props.InitialTab},n}return jt(e,t),e.prototype.componentDidMount=function(){this.GetSettings()},e.prototype.GetSettings=function(){var t=this;$.ajax({type:"GET",url:homePath+"api/SEBrowser/GetEventPreviewPaneSettings",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}).done((function(e){return t.setState({Settings:e})}))},e.prototype.render=function(){var t=this;return-1==this.props.EventID||0==this.state.Settings.length?a.a.createElement("div",null):a.a.createElement(a.a.Fragment,null,a.a.createElement("ul",{className:"nav nav-tabs"},a.a.createElement("li",{className:"nav-item"},a.a.createElement("a",{className:"nav-link"+("Waveform"==this.state.Tab?" active":""),onClick:function(){return t.setState({Tab:"Waveform"})}},"Waveform Analysis")),a.a.createElement("li",{className:"nav-item"},a.a.createElement("a",{className:"nav-link"+("Fault"==this.state.Tab?" active":""),onClick:function(){return t.setState({Tab:"Fault"})}},"Fault")),a.a.createElement("li",{className:"nav-item"},a.a.createElement("a",{className:"nav-link"+("Correlating"==this.state.Tab?" active":""),onClick:function(){return t.setState({Tab:"Correlating"})}},"Correlating Events")),a.a.createElement("li",{className:"nav-item"},a.a.createElement("a",{className:"nav-link"+("Configuration"==this.state.Tab?" active":""),onClick:function(){return t.setState({Tab:"Configuration"})}},"Configuration")),a.a.createElement("li",{className:"nav-item"},a.a.createElement("a",{className:"nav-link"+("All"==this.state.Tab?" active":""),onClick:function(){return t.setState({Tab:"All"})}},"All"))),a.a.createElement("div",{style:{height:"calc(100% - 72px)",maxHeight:"calc(100% - 72px)",overflowY:"scroll"}},this.state.Settings.filter((function(t){return t.Show})).map((function(e,n){return e.Name.indexOf("EventSearchOpenSEE")>=0&&("Waveform"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(ft,{key:n,EventID:t.props.EventID}):e.Name.indexOf("EventSearchFaultSegments")>=0&&("Waveform"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(L,{key:n,EventID:t.props.EventID}):e.Name.indexOf("EventSearchAssetVoltageDisturbances")>=0&&("Waveform"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(j,{key:n,EventID:t.props.EventID}):e.Name.indexOf("EventSearchCorrelatedSags")>=0&&("Correlating"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(z,{key:n,EventID:t.props.EventID}):e.Name.indexOf("TVAESRIMap")>=0&&("Fault"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(ot,{key:n,EventID:t.props.EventID}):!(e.Name.indexOf("TVAFaultInfo")>=0&&"Line"==t.props.AssetType)||"Fault"!=t.props.EventType&&"RecloseIntoFault"!=t.props.EventType||"Fault"!=t.state.Tab&&"All"!=t.state.Tab?!(e.Name.indexOf("LineParameters")>=0&&"Line"==t.props.AssetType)||"Fault"!=t.props.EventType&&"RecloseIntoFault"!=t.props.EventType||"Fault"!=t.state.Tab&&"All"!=t.state.Tab?e.Name.indexOf("TVALightning")>=0&&("Fault"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(dt,{key:n,EventID:t.props.EventID}):e.Name.indexOf("TVASIDA")>=0&&("Correlating"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(Mt,{key:n,EventID:t.props.EventID}):e.Name.indexOf("TVASOE")>=0&&("Correlating"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(kt,{key:n,EventID:t.props.EventID}):e.Name.indexOf("TVALSC")>=0&&("Correlating"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(Dt,{key:n,EventID:t.props.EventID}):e.Name.indexOf("TVAPQWeb")>=0&&("Correlating"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(Nt,{key:n,EventID:t.props.EventID,StartTime:t.props.StartTime}):e.Name.indexOf("TVAStructureInfo")>=0&&("Fault"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(wt,{key:n,EventID:t.props.EventID}):e.Name.indexOf("EventSearchFileInfo")>=0&&("Configuration"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(K,{key:n,EventID:t.props.EventID}):e.Name.indexOf("EventSearchHistory")>=0&&("Fault"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(B,{key:n,EventID:t.props.EventID}):e.Name.indexOf("EventSearchRelayPerformance")>=0&&"Breaker"==t.props.AssetType&&"All"==t.state.Tab?a.a.createElement(Y,{key:n,EventID:t.props.EventID}):e.Name.indexOf("EventSearchBreakerPerformance")>=0&&"Breaker"==t.props.AssetType&&"All"==t.state.Tab?a.a.createElement(Q,{key:n,EventID:t.props.EventID}):e.Name.indexOf("EventSearchCapBankAnalyticOverview")>=0&&"CapacitorBank"==t.props.AssetType&&"All"==t.state.Tab?a.a.createElement(Pt,{key:n,EventID:t.props.EventID}):e.Name.indexOf("EventSearchNoteWindow")>=0&&("Configuration"==t.state.Tab||"All"==t.state.Tab)?a.a.createElement(I,{key:n,EventID:t.props.EventID}):void 0:a.a.createElement(gt,{key:n,EventID:t.props.EventID}):a.a.createElement(yt,{key:n,EventID:t.props.EventID})}))))},e}(a.a.Component),Lt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ft=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.seBrowserService=new g,r.state={show:!1,note:"",ids:r.props.searchList.map((function(t){return t.EventID})).sort(),notesMade:[]},r.handleAdd.bind(r),r}return Lt(e,t),e.prototype.componentDidMount=function(){},e.prototype.componentWillUnmount=function(){},e.prototype.componentWillReceiveProps=function(t){this.state.ids!=t.searchList.map((function(t){return t.EventID})).sort()&&this.setState({ids:t.searchList.map((function(t){return t.EventID})).sort()})},e.prototype.getData=function(t){},e.prototype.render=function(){var t=this,e=this.props.searchList.map((function(e,n){return a.a.createElement("tr",{key:n,style:{display:"table",tableLayout:"fixed",width:"calc(100%)"}},a.a.createElement("td",null,a.a.createElement("input",{type:"checkbox",checked:t.state.ids.indexOf(e.EventID)>=0,value:e.EventID,onChange:function(e){var n=$(e.target).prop("checked"),r=parseInt(e.target.value),a=Object(p.clone)(t.state.ids);!n||a.indexOf(r)>=0?!n&&a.indexOf(r)>=0&&(a=a.filter((function(t){return t!=r})),t.setState({ids:a.sort()})):(a.push(r),t.setState({ids:a.sort()}))}})),a.a.createElement("td",null,a.a.createElement("span",null,moment(e.FileStartTime).format("MM/DD/YYYY"),a.a.createElement("br",null),moment(e.FileStartTime).format("HH:mm:ss.SSSSSSS"))),a.a.createElement("td",null,e.AssetName),a.a.createElement("td",null,e.EventType))})),n=this.state.notesMade.map((function(e,n){return a.a.createElement("tr",{key:n,style:{display:"table",tableLayout:"fixed",width:"calc(100%)"}},a.a.createElement("td",null,e.Note),a.a.createElement("td",null,a.a.createElement("span",null,moment(e.Timestamp).format("MM/DD/YYYY"),a.a.createElement("br",null),moment(e.Timestamp).format("HH:mm:ss.SSSSSSS"))),a.a.createElement("td",null,e.UserAccount),a.a.createElement("td",null,a.a.createElement("button",{className:"btn btn-sm",onClick:function(n){return t.handleDelete(e)}},a.a.createElement("span",null,a.a.createElement("i",{className:"fa fa-times"})))))}));return a.a.createElement("div",null,a.a.createElement("button",{className:"btn btn-primary form-control",onClick:function(){t.setState({show:!0})},title:"Click here to add a note to all events listed below ..."},"Add Notes"),a.a.createElement("div",{className:"modal fade show",style:{display:this.state.show?"block":"none"},role:"dialog"},a.a.createElement("div",{className:"modal-dialog",style:{maxWidth:"75%"},role:"document"},a.a.createElement("div",{className:"modal-content"},a.a.createElement("div",{className:"modal-header"},a.a.createElement("h3",{className:"modal-title"},"Add notes for the following events."),a.a.createElement("button",{type:"button",className:"close",onClick:function(){return t.setState({show:!1})}},a.a.createElement("span",{"aria-hidden":"true"},"×"))),a.a.createElement("div",{className:"modal-body",style:{maxHeight:650,height:650}},a.a.createElement("div",{style:{width:"50%",float:"left",padding:10}},a.a.createElement("table",{className:"table"},a.a.createElement("thead",{style:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"}},a.a.createElement("tr",null,a.a.createElement("td",null,a.a.createElement("input",{type:"checkbox",checked:this.props.searchList.length==this.state.ids.length,onChange:function(e){var n=$(e.target).prop("checked");n?t.setState({ids:t.props.searchList.map((function(t){return t.EventID})).sort()}):n||t.setState({ids:[]})}})),a.a.createElement("td",null,"Time"),a.a.createElement("td",null,"Asset"),a.a.createElement("td",null,"Type"))),a.a.createElement("tbody",{style:{display:"block",overflowY:"scroll",height:580,maxHeight:580}},e))),a.a.createElement("div",{style:{width:"50%",float:"right",padding:10}},a.a.createElement("table",{className:"table"},a.a.createElement("thead",{style:{fontSize:"smaller",display:"table",tableLayout:"fixed",width:"100%"}},a.a.createElement("tr",null,a.a.createElement("td",null,"Note"),a.a.createElement("td",null,"Time"),a.a.createElement("td",null,"User"),a.a.createElement("td",null))),a.a.createElement("tbody",{style:{display:"block",overflowY:"scroll",height:437,maxHeight:437}},n)),a.a.createElement("textarea",{className:"form-control",value:this.state.note,rows:4,onChange:function(e){return t.setState({note:e.target.value})}}))),a.a.createElement("div",{className:"modal-footer"},a.a.createElement("button",{className:"btn btn-primary",onClick:function(){return t.handleAdd()},disabled:0==this.state.note.length},"Add Note"),a.a.createElement("button",{className:"btn btn-secondary",onClick:function(){return t.setState({show:!1})}},"Close"))))))},e.prototype.createTableRows=function(){},e.prototype.handleAdd=function(){var t=this;this.addMultiNote(this.state.note,this.state.ids).done((function(e){var n=Object(p.clone)(t.state.notesMade);n.push({Note:e[0].Note,Timestamp:e[0].Timestamp,UserAccount:e[0].UserAccount,EventIds:e.map((function(t){return t.EventID}))}),t.setState({note:"",notesMade:n})}))},e.prototype.handleDelete=function(t){this.deleteMultiNote(t.Note,t.UserAccount,t.Timestamp);var e=Object(p.clone)(this.state.notesMade);e=e.filter((function(e){return e!=t})),this.setState({notesMade:e})},e.prototype.handleEdit=function(t){var e=this;this.setState({note:t.Note}),this.deleteNote(t).done((function(){return e.createTableRows()}))},e.prototype.addMultiNote=function(t,e){return $.ajax({type:"POST",url:homePath+"api/OpenXDA/Note/Multi",contentType:"application/json; charset=utf-8",data:JSON.stringify({note:t,eventIDs:e}),cache:!1,async:!0,processData:!1,error:function(t,e,n){console.log(n)}})},e.prototype.deleteNote=function(t){return $.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Note",contentType:"application/json; charset=utf-8",data:JSON.stringify(t),cache:!1,async:!0,processData:!1,error:function(t,e,n){console.log(n)}})},e.prototype.deleteMultiNote=function(t,e,n){return $.ajax({type:"DELETE",url:homePath+"api/OpenXDA/Note",contentType:"application/json; charset=utf-8",data:JSON.stringify({Note:t,UserAccount:e,Timestamp:n}),cache:!1,async:!0,processData:!1,error:function(t,e,n){console.log(n)}})},e}(a.a.Component),Bt=n(4),Ht=n.n(Bt),zt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),qt=function(){return(qt=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t}).apply(this,arguments)},Gt=function(t){function e(e,n){var r=t.call(this,e,n)||this;r.history=u()();var a=Ht.a.parse(r.history.location.search,"&","=",{decodeURIComponent:Ht.a.unescape});return r.state={line:null==a.line||"true"==a.line,bus:null==a.bus||"true"==a.bus,breaker:null==a.breaker||"true"==a.breaker,transformer:null==a.transformer||"true"==a.transformer,capacitorBank:null==a.capacitorBank||"true"==a.capacitorBank,dfr:null==a.dfr||"true"==a.dfr,pqMeter:null==a.pqMeter||"true"==a.pqMeter,g200:null==a.g200||"true"==a.g200,one00to200:null==a.one00to200||"true"==a.one00to200,thirty5to100:null==a.thirty5to100||"true"==a.thirty5to100,oneTo35:null==a.oneTo35||"true"==a.oneTo35,l1:null==a.l1||"true"==a.l1,faults:null==a.faults||"true"==a.faults,sags:null==a.sags||"true"==a.sags,swells:null==a.swells||"true"==a.swells,interruptions:null==a.interruptions||"true"==a.interruptions,breakerOps:null==a.breakerOps||"true"==a.breakerOps,transients:null==a.transients||"true"==a.transients,relayTCE:null==a.relayTCE||"true"==a.realyTCE,others:null==a.others||"true"==a.others,date:null!=a.date?a.date:moment().format("MM/DD/YYYY"),time:null!=a.time?a.time:moment().format("HH:mm:ss.SSS"),windowSize:null!=a.windowSize?parseInt(a.windowSize.toString()):10,timeWindowUnits:null!=a.timeWindowUnits?parseInt(a.timeWindowUnits.toString()):2,eventid:null!=a.eventid?parseInt(a.eventid.toString()):-1,searchText:null!=a.searchText?a.searchText.toString():"",make:null!=a.make?a.make.toString():"All",model:null!=a.model?a.model.toString():"All",searchList:[],stateSetter:r.stateSetter.bind(r),initialTab:null!=a.tab?a.tab.toString():void 0},r}return zt(e,t),e.prototype.componentDidMount=function(){},e.prototype.componentWillUnmount=function(){},e.prototype.componentWillReceiveProps=function(t){},e.prototype.render=function(){var t=this;return a.a.createElement("div",{style:{width:"100%",height:"100%"}},a.a.createElement(A,qt({},this.state)),a.a.createElement("div",{style:{width:"100%",height:"calc( 100% - 210px)"}},a.a.createElement("div",{style:{width:"50%",height:"100%",maxHeight:"100%",position:"relative",float:"left",overflowY:"hidden"}},a.a.createElement("div",{style:{width:"calc(100% - 120px)",padding:10,float:"left"}},a.a.createElement("input",{className:"form-control",type:"text",placeholder:"Search...",value:this.state.searchText,onChange:function(e){return t.setState({searchText:e.target.value})}})),a.a.createElement("div",{style:{width:120,float:"right",padding:10}},a.a.createElement(Ft,{searchList:this.state.searchList})),a.a.createElement(T,{eventid:this.state.eventid,searchText:this.state.searchText,searchBarProps:this.state,stateSetter:this.stateSetter.bind(this)})),a.a.createElement("div",{style:{width:"50%",height:"100%",position:"relative",float:"right",overflowY:"none"}},this.state.searchList.length>0&&null!=this.state.searchList.find((function(e){return e.EventID==t.state.eventid}))?a.a.createElement(Rt,{EventID:this.state.eventid,AssetType:this.state.searchList.find((function(e){return e.EventID==t.state.eventid})).AssetType,EventType:this.state.searchList.find((function(e){return e.EventID==t.state.eventid})).EventType,StartTime:this.state.searchList.find((function(e){return e.EventID==t.state.eventid})).FileStartTime,InitialTab:this.state.initialTab}):null)))},e.prototype.stateSetter=function(t){var e=this;function n(t){var e=["boolean","number","string"],n=Object(p.clone)(t);return n.eventid=t.eventid,n.searchText=t.searchText,delete n.searchList,$.each(Object.keys(n),(function(t,r){e.indexOf(typeof n[r])<0&&delete n[r]})),Ht.a.stringify(n,"&","=",{encodeURIComponent:Ht.a.escape})}var r=n(this.state);this.setState(t,(function(){var t=n(e.state);Object(p.isEqual)(r,t)||(clearTimeout(e.historyHandle),e.historyHandle=setTimeout((function(){return e.history.push(e.history.location.pathname+"?"+t)}),500))}))},e}(a.a.Component),Ut=function(){function t(){this.getMaximoBreakers=this.getMaximoBreakers.bind(this)}return t.prototype.getMaximoBreakers=function(){return void 0!==this.getMaximoBreakersHandle&&this.getMaximoBreakersHandle.abort(),this.getMaximoBreakersHandle=$.ajax({type:"GET",url:homePath+"api/BreakerReport/MaximoBreakers",contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.getMaximoBreakersHandle},t}(),Vt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Yt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.state={breakers:[]},r.breakerReportService=new Ut,r}return Vt(e,t),e.prototype.componentDidMount=function(){var t=this;$("#toDatePicker").datetimepicker({format:"MM/DD/YYYY"}),$("#toDatePicker").on("dp.change",(function(e){return t.props.stateSetter({toDate:e.target.value})})),$("#fromDatePicker").datetimepicker({format:"MM/DD/YYYY"}),$("#fromDatePicker").on("dp.change",(function(e){return t.props.stateSetter({fromDate:e.target.value})})),this.breakerReportService.getMaximoBreakers().done((function(e){t.setState({breakers:e.map((function(t,e){return a.a.createElement("option",{key:e,value:t.AssetKey},t.BreakerName)}))})}))},e.prototype.render=function(){var t=this;return a.a.createElement("nav",{className:"navbar navbar-expand-lg navbar-light bg-light"},a.a.createElement("div",{className:"collapse navbar-collapse",id:"navbarSupportedContent",style:{width:"100%"}},a.a.createElement("ul",{className:"navbar-nav mr-auto",style:{width:"100%"}},a.a.createElement("li",{className:"nav-item",style:{width:"40%",paddingRight:10}},a.a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Time Window:"),a.a.createElement("form",null,a.a.createElement("div",{className:"form-group",style:{height:30}},a.a.createElement("label",{style:{width:200,position:"relative",float:"left"}},"Date Range: "),a.a.createElement("div",{className:"input-group",style:{width:"calc(50% - 100px)",position:"relative",float:"right"}},a.a.createElement("input",{id:"toDatePicker",className:"form-control",defaultValue:this.props.toDate}),a.a.createElement("div",{className:"input-group-append"},a.a.createElement("span",{className:"input-group-text"}," ",a.a.createElement("i",{className:"fa fa-calendar"})))),a.a.createElement("div",{className:"input-group date",style:{width:"calc(50% - 100px)",position:"relative",float:"right"}},a.a.createElement("input",{className:"form-control",id:"fromDatePicker",defaultValue:this.props.fromDate}),a.a.createElement("div",{className:"input-group-append"},a.a.createElement("span",{className:"input-group-text"}," ",a.a.createElement("i",{className:"fa fa-calendar"}))))),a.a.createElement("div",{className:"form-group",style:{height:30}},a.a.createElement("label",{style:{width:200,position:"relative",float:"left"}},"Breaker: "),a.a.createElement("select",{style:{width:"calc(100% - 200px)",position:"relative",float:"right",border:"1px solid #ced4da",borderRadius:".25em"},value:this.props.breaker,onChange:function(e){return t.props.stateSetter({breaker:e.target.value})}},a.a.createElement("option",{key:0,value:"0"},"All"),this.state.breakers))))),a.a.createElement("li",{className:"nav-item",style:{width:"10%",paddingRight:10}},a.a.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},a.a.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Export:"),a.a.createElement("form",null,a.a.createElement("div",{className:"form-group",style:{height:30}},a.a.createElement("a",{className:"btn btn-primary",style:{width:"calc(100%)",position:"relative",float:"right"},href:homePath+"BreakerReportCSVDownload.ashx?breaker="+this.props.breaker+"&fromDate="+this.props.fromDate+"&toDate="+this.props.toDate},"CSV"))))))))},e}(a.a.Component),Wt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),$t=function(t){function e(e,n){var r=t.call(this,e,n)||this;r.history=u()();var a=Bt.parse(r.history.location.search);return r.state={fromDate:null!=a.fromDate?a.fromDate:moment().subtract(30,"days").format("MM/DD/YYYY"),toDate:null!=a.toDate?a.toDate:moment().format("MM/DD/YYYY"),breaker:null!=a.breaker?a.breaker:"0"},r.history.listen((function(t,e){var n=Bt.parse(r.history.location.search);r.setState({fromDate:null!=n.fromDate?n.fromDate:moment().subtract(30,"days").format("MM/DD/YYYY"),toDate:null!=n.toDate?n.toDate:moment().format("MM/DD/YYYY"),breaker:null!=n.breaker?n.breaker:"0"})})),r.stateSetter=r.stateSetter.bind(r),r}return Wt(e,t),e.prototype.render=function(){var t=homePath+"api/BreakerReport/"+("0"==this.state.breaker?"AllBreakersReport?":"IndividualBreakerReport?breakerId="+this.state.breaker+"&")+"startDate="+this.state.fromDate+"&endDate="+this.state.toDate;return r.createElement("div",{style:{width:"100%",height:"100%"}},r.createElement(Yt,{toDate:this.state.toDate,fromDate:this.state.fromDate,breaker:this.state.breaker,stateSetter:this.stateSetter}),r.createElement("div",{style:{width:"100%",height:"calc( 100% - 163px)"}},r.createElement("embed",{style:{width:"inherit",height:"inherit",position:"absolute"},id:"pdfContent",src:t,key:t,type:"application/pdf"})))},e.prototype.stateSetter=function(t){var e=this;function n(t){var e=["boolean","number","string"],n=Object(p.clone)(t);return $.each(Object.keys(n),(function(t,r){e.indexOf(typeof n[r])<0&&delete n[r]})),Bt.stringify(n)}var r=n(this.state);this.setState(t,(function(){var t=n(e.state);Object(p.isEqual)(r,t)||(clearTimeout(e.historyHandle),e.historyHandle=setTimeout((function(){return e.history.push(e.history.location.pathname+"?"+t)}),500))}))},e}(r.Component),Xt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Zt=function(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},Qt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.seBrowserService=new g,r.state={LocationID:-1,BreakerID:-1,showCoilSelection:!1},r}return Xt(e,t),e.prototype.componentDidMount=function(){this.getSubstationData()},e.prototype.componentWillReceiveProps=function(t){},e.prototype.getLineData=function(t){var e=this;this.setState({LocationID:t}),this.seBrowserService.GetBreakerData(t).done((function(t){var n,r;$(e.refs.Breaker).children().remove();try{for(var a=Zt(t),i=a.next();!i.done;i=a.next()){var o=i.value;$(e.refs.Breaker).append(new Option(o.AssetKey,o.AssetId.toString()))}}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}if($(e.refs.Breaker).children("option:selected").val()){var s=d.a.clone(e.props);s.BreakerID=parseInt($(e.refs.Breaker).children("option:selected").val().toString()),e.props.stateSetter({searchBarProps:s}),e.getCoilData(parseInt($(e.refs.Breaker).children("option:selected").val().toString()))}}))},e.prototype.getSubstationData=function(){var t=this;this.seBrowserService.GetSubStationData().done((function(e){var n,r;$(t.refs.SubStation).children().remove();try{for(var a=Zt(e),i=a.next();!i.done;i=a.next()){var o=i.value;if($(t.refs.SubStation).append(new Option(o.AssetName,o.LocationID.toString())),$(t.refs.SubStation).children("option:selected").val()){var s=parseInt($(t.refs.SubStation).children("option:selected").val().toString());t.setState({LocationID:s}),t.getLineData(s)}}}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}}))},e.prototype.getCoilData=function(t){var e=this;this.seBrowserService.GetCoilData(t).done((function(t){var n,r,a;if(t.length<2)return e.setState({showCoilSelection:!1}),(a=d.a.clone(e.props)).ChannelID=-1,a.BreakerID=parseInt($(e.refs.Breaker).children("option:selected").val().toString()),void e.props.stateSetter({searchBarProps:a});e.setState({showCoilSelection:!0}),$(e.refs.Coil).children().remove();try{for(var i=Zt(t),o=i.next();!o.done;o=i.next()){var s=o.value;$(e.refs.Coil).append(new Option(s.Name,s.ChannelID.toString()))}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}$(e.refs.Coil).children("option:selected").val()&&((a=d.a.clone(e.props)).ChannelID=parseInt($(e.refs.Coil).children("option:selected").val().toString()),a.BreakerID=parseInt($(e.refs.Breaker).children("option:selected").val().toString()),e.props.stateSetter({searchBarProps:a}))}))},e.prototype.render=function(){var t=this,e=this.state.showCoilSelection;return r.createElement("nav",{className:"navbar navbar-expand-lg navbar-light bg-light"},r.createElement("div",{className:"collapse navbar-collapse",id:"navbarSupportedContent",style:{width:"100%"}},r.createElement("ul",{className:"navbar-nav mr-auto",style:{width:"100%"}},r.createElement("li",{className:"nav-item",style:{width:e?"33%":"50%",paddingRight:10}},r.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},r.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Substation:"),r.createElement("form",null,r.createElement("div",{className:"form-group",style:{height:30}},r.createElement("label",{style:{width:200,position:"relative",float:"left"}},"Substation: "),r.createElement("select",{ref:"SubStation",style:{width:"calc(100% - 200px)",position:"relative",float:"right",border:"1px solid #ced4da",borderRadius:".25em"},onChange:function(e){t.getLineData(e.target.value)}}))))),r.createElement("li",{className:"nav-item",style:{width:e?"33%":"50%",paddingRight:10}},r.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},r.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Breaker:"),r.createElement("form",null,r.createElement("div",{className:"form-group",style:{height:30}},r.createElement("label",{style:{width:200,position:"relative",float:"left"}},"Breaker: "),r.createElement("select",{ref:"Breaker",style:{width:"calc(100% - 200px)",position:"relative",float:"right",border:"1px solid #ced4da",borderRadius:".25em"},onChange:function(e){t.getCoilData(e.target.value)}}))))),r.createElement("li",{className:"nav-item",style:{width:"33%",paddingRight:10,display:e?"block":"none"}},r.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},r.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Trip Coil:"),r.createElement("form",null,r.createElement("div",{className:"form-group",style:{height:30}},r.createElement("label",{style:{width:200,position:"relative",float:"left"}},"Breaker: "),r.createElement("select",{ref:"Coil",style:{width:"calc(100% - 200px)",position:"relative",float:"right",border:"1px solid #ced4da",borderRadius:".25em"},onChange:function(e){var n=d.a.clone(t.props);n.ChannelID=e.target.value,n.BreakerID=parseInt($(t.refs.Breaker).children("option:selected").val().toString()),t.props.stateSetter({searchBarProps:n})}}))))))))},e}(r.Component),Jt=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Kt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.state={tableRows:[]},r}return Jt(e,t),e.prototype.componentDidMount=function(){this.props.breakerid>=0&&this.createTableRows(this.props.breakerid,this.props.channelid)},e.prototype.componentWillUnmount=function(){},e.prototype.componentWillReceiveProps=function(t){t.breakerid>=0&&this.createTableRows(t.breakerid,t.channelid)},e.prototype.getRelayTrendPerformance=function(t,e){return void 0!==this.RelayTrendPerformanceHandle&&this.RelayTrendPerformanceHandle.abort(),this.RelayTrendPerformanceHandle=$.ajax({type:"GET",url:homePath+"api/PQDashboard/RelayReport/getRelayPerformance?lineID="+t+"&channelID="+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.RelayTrendPerformanceHandle},e.prototype.createTableRows=function(t,e){var n=this;this.getRelayTrendPerformance(this.props.breakerid,this.props.channelid).done((function(t){for(var e=[],r=0;r<t.length;++r){var a=t[r];e.push(te(a,"default"))}n.setState({tableRows:e})}))},e.prototype.render=function(){return r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Breaker Performance:"),r.createElement("div",{className:"card-body"},r.createElement("table",{className:"table"},r.createElement("thead",null,r.createElement(ee,null)),r.createElement("tbody",null,this.state.tableRows))))},e}(r.Component),te=function(t,e){return r.createElement("tr",{style:{background:e},key:t.EventID},r.createElement("td",{key:"EventID"+t.EventID},r.createElement("a",{id:"eventLink",target:"_blank",href:homePath+"Main/OpenSEE?eventid="+t.EventID},r.createElement("div",{style:{width:"100%",height:"100%"}},t.EventID))),r.createElement("td",{key:"InitiateTime"+t.EventID},moment(t.TripInitiate).format("MM/DD/YY HH:mm:ss.SSSS")),r.createElement("td",{key:"TripTime"+t.EventID},t.TripTime," micros"),r.createElement("td",{key:"PickupTime"+t.EventID},t.PickupTime," micros"),r.createElement("td",{key:"ExtinctionTime"+t.EventID}," micros"),r.createElement("td",{key:"TripCoilCondition"+t.EventID},t.TripCoilCondition.toFixed(2)," A/s"),r.createElement("td",{key:"L1"+t.EventID},t.Imax1.toFixed(3)," A"),r.createElement("td",{key:"L2"+t.EventID},t.Imax2.toFixed(3)," A"))},ee=function(){return r.createElement("tr",{key:"Header"},r.createElement("th",{key:"EventID"},"Event ID"),r.createElement("th",{key:"InitiateTime"},"Trip Initiation Time"),r.createElement("th",{key:"TripTime"},"Trip Time"),r.createElement("th",{key:"PickupTime"},"Pickup Time"),r.createElement("th",{key:"ExtinctionTime"},"Extinction Time"),r.createElement("th",{key:"TripCoilCondition"},"Trip Coil Condition"),r.createElement("th",{key:"L1"},"L1"),r.createElement("th",{key:"L2"},"L2"))},ne=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),re=function(){return(re=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t}).apply(this,arguments)},ae=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.state={showRelayHistory:!1},r.optionsTripTime={canvas:!0,legend:{show:!1},axisLabels:{show:!0},grid:{autoHighlight:!1,clickable:!0,hoverable:!0,markings:[]},xaxis:{show:!1},yaxis:{show:!0,axisLabel:"Trip (micros)",labelWidth:50},points:{show:!0,fill:!0,fillColor:"#000000"},lines:{show:!0},series:{dashes:{show:!0,dashLength:5},shadowSize:0}},r.optionsPickupTime={canvas:!0,legend:{show:!1},axisLabels:{show:!0},grid:{autoHighlight:!1,clickable:!0,hoverable:!0,markings:[]},xaxis:{show:!1},yaxis:{show:!0,axisLabel:"Pickup (micros)",labelWidth:50},points:{show:!0,fill:!0,fillColor:"#000000"},lines:{show:!0},series:{dashes:{show:!0,dashLength:5},shadowSize:0}},r.optionsTripCoilCondition={canvas:!0,legend:{show:!1},axisLabels:{show:!0},grid:{autoHighlight:!1,clickable:!0,hoverable:!0,markings:[]},xaxis:{show:!1},yaxis:{show:!0,axisLabel:"TCC (A/s)",labelWidth:50},points:{show:!0,fill:!0,fillColor:"#000000"},lines:{show:!0},series:{dashes:{show:!0,dashLength:5},shadowSize:0}},r.optionsImax1={canvas:!0,legend:{show:!1},axisLabels:{show:!0},grid:{autoHighlight:!1,clickable:!0,hoverable:!0,markings:[]},xaxis:{show:!1},yaxis:{show:!0,axisLabel:"Imax 1 (A)",labelWidth:50},points:{show:!0,fill:!0,fillColor:"#000000"},lines:{show:!0}},r.optionsImax2={canvas:!0,legend:{show:!1},axisLabels:{show:!0},grid:{autoHighlight:!1,clickable:!0,hoverable:!0,markings:[]},xaxis:{mode:"time",reserveSpace:!1,ticks:function(t){var e=[],n=(t.max-t.min)/11,a=(r.floorInBase(t.min,t.delta),0);for(Number.NaN,a=1;a<11;++a)e.push(t.min+a*n);return e},tickFormatter:function(t,e){return e.delta<1||e.delta<1e3?moment(t).format("mm:ss.SS")+"<br>Test":moment(t).format("MM/DD/YY")},tickLength:5},yaxis:{show:!0,axisLabel:"Imax 2 (A)",labelWidth:50},points:{show:!0,fill:!0,fillColor:"#000000"},lines:{show:!0}},r}return ne(e,t),e.prototype.defaultTickFormatter=function(t,e){var n=e.tickDecimals?Math.pow(10,e.tickDecimals):1,r=""+Math.round(t*n)/n;if(null!=e.tickDecimals){var a=r.indexOf("."),i=-1==a?0:r.length-a-1;if(i<e.tickDecimals)return(i?r:r+".")+(""+n).substr(1,e.tickDecimals-i)}return r},e.prototype.floorInBase=function(t,e){return e*Math.floor(t/e)},e.prototype.componentDidMount=function(){this.props.breakerid>=0&&this.getData(this.props)},e.prototype.componentWillReceiveProps=function(t){t.breakerid>=0&&this.getData(t)},e.prototype.getColor=function(t){if(t.indexOf("VA")>=0)return"#A30000";if(t.indexOf("VB")>=0)return"#0029A3";if(t.indexOf("VC")>=0)return"#007A29";if(t.indexOf("VN")>=0)return"#c3c3c3";if(t.indexOf("IA")>=0)return"#FF0000";if(t.indexOf("IB")>=0)return"#0066CC";if(t.indexOf("IC")>=0)return"#33CC33";if(t.indexOf("IR")>=0)return"#c3c3c3";var e=Math.floor(256*Math.random()).toString(16),n=Math.floor(256*Math.random()).toString(16),r=Math.floor(256*Math.random()).toString(16);return"#"+(e.length>1?e:"0"+e)+(n.length>1?n:"0"+n)+(r.length>1?r:"0"+r)},e.prototype.getRelayTrendData=function(t,e){return void 0!==this.relayTrendHandle&&this.relayTrendHandle.abort(),this.relayTrendHandle=$.ajax({type:"GET",url:homePath+"api/PQDashboard/RelayReport/GetTrend?breakerid="+t+"&channelid="+e,contentType:"application/json; charset=utf-8",dataType:"json",cache:!0,async:!0}),this.relayTrendHandle},e.prototype.getData=function(t){var e=this;$(this.refs.TTwindow).children().remove(),$(this.refs.PTwindow).children().remove(),$(this.refs.TCCwindow).children().remove(),$(this.refs.L1window).children().remove(),$(this.refs.L2window).children().remove(),this.getRelayTrendData(t.breakerid,t.channelid).then((function(t){if(null!=t){e.setState((function(t,e){return{showRelayHistory:!0}}));var n=[],r=[],a=[],i=[],o=[];$.each(t.Data,(function(t,s){"TripTime"==s.MeasurementType?n.push({label:s.ChartLabel,data:s.DataPoints,color:e.getColor(s.ChartLabel)}):"PickupTime"==s.MeasurementType?r.push({label:s.ChartLabel,data:s.DataPoints,color:e.getColor(s.ChartLabel)}):"TripCoilCondition"==s.MeasurementType?a.push({label:s.ChartLabel,data:s.DataPoints,color:e.getColor(s.ChartLabel)}):"Imax1"==s.MeasurementType?i.push({label:s.ChartLabel,data:s.DataPoints,color:e.getColor(s.ChartLabel)}):"Imax2"==s.MeasurementType?o.push({label:s.ChartLabel,data:s.DataPoints,color:e.getColor(s.ChartLabel)}):"TripTimeAlert"==s.MeasurementType?n.push({label:s.ChartLabel,data:s.DataPoints,color:"#FF0000",lines:{show:!1},points:{show:!1}}):"PickupTimeAlert"==s.MeasurementType?r.push({label:s.ChartLabel,data:s.DataPoints,color:"#FF0000",lines:{show:!1},points:{show:!1}}):"TripCoilConditionAlert"==s.MeasurementType&&a.push({label:s.ChartLabel,data:s.DataPoints,color:"#FF0000",lines:{show:!1},points:{show:!1}})})),$.plot($(e.refs.TTwindow),n,e.optionsTripTime),$.plot($(e.refs.PTwindow),r,e.optionsPickupTime),$.plot($(e.refs.TCCwindow),a,e.optionsTripCoilCondition),$.plot($(e.refs.L1window),i,e.optionsImax1),$.plot($(e.refs.L2window),o,e.optionsImax2)}else e.setState((function(t,e){return{showRelayHistory:!1}}))}))},e.prototype.render=function(){if(-1==this.props.breakerid)return r.createElement("div",null);var t=this.state.showRelayHistory;return r.createElement("div",null,r.createElement(Kt,re({},this.props)),r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Historic Breaker Performance"),r.createElement("div",{className:"card-body"},r.createElement("div",{ref:"TTwindow",style:{height:150,width:"calc(100%)",display:t?"block":"none"}}),r.createElement("div",{ref:"PTwindow",style:{height:150,width:"calc(100%)",display:t?"block":"none"}}),r.createElement("div",{ref:"TCCwindow",style:{height:150,width:"calc(100%)",display:t?"block":"none"}}),r.createElement("div",{ref:"L1window",style:{height:150,width:"calc(100%)",display:t?"block":"none"}}),r.createElement("div",{ref:"L2window",style:{height:150,width:"calc(100%)",display:t?"block":"none"}}))))},e}(r.Component),ie=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),oe=function(){return(oe=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t}).apply(this,arguments)},se=function(t){function e(e,n){var r=t.call(this,e,n)||this;r.history=u()();var a=Bt.parse(r.history.location.search);return r.state={searchBarProps:{stateSetter:r.stateSetter.bind(r),BreakerID:null!=a.breakerid?parseInt(a.breakerid):-1,ChannelID:null!=a.channelid?parseInt(a.channelid):-1}},r}return ie(e,t),e.prototype.componentDidMount=function(){},e.prototype.componentWillUnmount=function(){},e.prototype.componentWillReceiveProps=function(t){},e.prototype.render=function(){return r.createElement("div",{style:{width:"100%",height:"100%"}},r.createElement(Qt,oe({},this.state.searchBarProps)),r.createElement("div",{style:{width:"100%",height:"calc( 100% - 118px)"}},r.createElement("div",{style:{width:"100%",height:"100%",maxHeight:"100%",position:"relative",float:"right",overflowY:"scroll"}},r.createElement(ae,{breakerid:this.state.searchBarProps.BreakerID,channelid:this.state.searchBarProps.ChannelID}))))},e.prototype.stateSetter=function(t){var e=this;function n(t){var e=["boolean","number","string"],n=Object(p.clone)(t);return $.each(Object.keys(n),(function(t,r){e.indexOf(typeof n[r])<0&&delete n[r]})),Bt.stringify(n)}var r=n(this.state);this.setState(t,(function(){var t=n(e.state);Object(p.isEqual)(r,t)||(clearTimeout(e.historyHandle),e.historyHandle=setTimeout((function(){return e.history.push(e.history.location.pathname+"?"+t)}),500))}))},e}(r.Component),le=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ue=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.seBrowserService=new g,r.state={capBanks:[],subStations:[]},r}return le(e,t),e.prototype.componentDidMount=function(){var t=this;this.getSubstationData(),this.props.StationId>-1&&this.getCapBankData(this.props.StationId),$("#datePicker").datetimepicker({format:"MM/DD/YYYY"}),$("#datePicker").on("dp.change",(function(e){t.setDate(e.target.value)})),$("#timePicker").datetimepicker({format:"HH:mm:ss.SSS"}),$("#timePicker").on("dp.change",(function(e){t.setTime(e.target.value)}))},e.prototype.componentWillReceiveProps=function(t){0==this.state.capBanks.length&&this.getCapBankData(t.StationId)},e.prototype.getCapBankData=function(t){var e=this;this.seBrowserService.GetCapBankData(t).done((function(t){e.setState({capBanks:t}),e.props.CapBankID<0&&t.length>0&&e.setCapBank(t[0].Id),e.setBankNumber(-1)}))},e.prototype.setCapBank=function(t){var e=d.a.clone(this.props);e.CapBankID=t,e.selectedBank=-1,this.props.stateSetter({searchBarProps:e})},e.prototype.setBankNumber=function(t){var e=d.a.clone(this.props);e.selectedBank=t,this.props.stateSetter({searchBarProps:e})},e.prototype.setDate=function(t){var e=d.a.clone(this.props);e.date=t,this.props.stateSetter({searchBarProps:e})},e.prototype.setTime=function(t){var e=d.a.clone(this.props);e.time=t,this.props.stateSetter({searchBarProps:e})},e.prototype.setTimeWindowUnits=function(t){var e=d.a.clone(this.props);e.timeWindowUnits=t,this.props.stateSetter({searchBarProps:e})},e.prototype.setWindowSize=function(t){var e=d.a.clone(this.props);e.windowSize=t,this.props.stateSetter({searchBarProps:e})},e.prototype.getSubstationData=function(){var t=this;this.seBrowserService.GetCapBankSubstationData().done((function(e){null!=e&&(t.setState({subStations:e}),-1==t.props.StationId&&e.length>0&&t.setStation(e[0].LocationID))}))},e.prototype.setStation=function(t){var e=d.a.clone(this.props);e.StationId=t,this.props.stateSetter({searchBarProps:e})},e.prototype.render=function(){var t=this,e=[],n=1,a=1;for(null!=this.state.capBanks.find((function(e){return e.Id==t.props.CapBankID}))&&(a=this.state.capBanks.find((function(e){return e.Id==t.props.CapBankID})).numBanks),e.push(r.createElement("option",{key:-1,value:-1}," ","System"," ")),n=0;n<a;n++)e.push(r.createElement("option",{key:n,value:n+1}," ",n+1," "));return r.createElement(r.Fragment,null,r.createElement("nav",{className:"navbar navbar-expand-lg navbar-light bg-light"},r.createElement("div",{className:"collapse navbar-collapse",id:"navbarSupportedContent",style:{width:"100%"}},r.createElement("ul",{className:"navbar-nav mr-auto",style:{width:"100%"}},r.createElement("li",{className:"nav-item",style:{width:"40%",paddingRight:10}},r.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},r.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Capacitor Bank:"),r.createElement("form",null,r.createElement("label",{style:{width:"100%",position:"relative",float:"left"}},"Substation: "),r.createElement("div",{className:"form-group",style:{height:30}},r.createElement("select",{style:{height:35,width:"calc(98%)",position:"relative",float:"left",border:"1px solid #ced4da",borderRadius:".25em"},onChange:function(e){t.setStation(e.target.value)},value:this.props.StationId},this.state.subStations.map((function(t){return r.createElement("option",{key:t.LocationID,value:t.LocationID}," ",t.AssetName," ")})))),r.createElement("label",{style:{width:"100%",position:"relative",float:"left"}},"Cap Bank Group: "),r.createElement("div",{className:"form-group",style:{height:30}},r.createElement("select",{ref:"Breaker",style:{height:35,width:"calc(98%)",position:"relative",float:"left",border:"1px solid #ced4da",borderRadius:".25em"},onChange:function(e){t.setCapBank(parseInt(e.target.value.toString()))},value:this.props.CapBankID},this.state.capBanks.map((function(t){return r.createElement("option",{key:t.Id,value:t.Id}," ",t.AssetName," ")})))),r.createElement("label",{style:{width:"100%",position:"relative",float:"left"}},"Bank: "),r.createElement("div",{className:"form-group",style:{height:30}},r.createElement("select",{ref:"CapBankId",style:{height:35,width:"calc(98%)",position:"relative",float:"left",border:"1px solid #ced4da",borderRadius:".25em"},onChange:function(e){t.setBankNumber(parseInt(e.target.value.toString()))},value:this.props.selectedBank},e))))),r.createElement("li",{className:"nav-item",style:{width:"40%",paddingRight:10}},r.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},r.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Time Window:"),r.createElement("form",null,r.createElement("label",{style:{width:"100%",position:"relative",float:"left"}},"Date: "),r.createElement("div",{className:"form-group",style:{height:30}},r.createElement("div",{className:"input-group",style:{width:"calc(49%)",position:"relative",float:"right"}},r.createElement("input",{id:"timePicker",className:"form-control",value:this.props.time,onChange:function(e){t.setTime(e.target.value)}})),r.createElement("div",{className:"input-group date",style:{width:"calc(49%)",position:"relative",float:"left"}},r.createElement("input",{className:"form-control",id:"datePicker",value:this.props.date,onChange:function(e){t.setDate(e.target.value)}}))),r.createElement("label",{style:{width:"100%",position:"relative",float:"left"}},"Time Window(+/-): "),r.createElement("div",{className:"form-group",style:{height:30}},r.createElement("input",{style:{height:35,width:"calc(49%)",position:"relative",float:"left",border:"1px solid #ced4da",borderRadius:".25em"},value:this.props.windowSize,onChange:function(e){t.setWindowSize(e.target.value)},type:"number"}),r.createElement("select",{style:{height:35,width:"calc(49%)",position:"relative",float:"right",border:"1px solid #ced4da",borderRadius:".25em"},value:this.props.timeWindowUnits,onChange:function(e){t.setTimeWindowUnits(e.target.value)}},r.createElement("option",{value:"7"},"Year"),r.createElement("option",{value:"6"},"Month"),r.createElement("option",{value:"5"},"Week"),r.createElement("option",{value:"4"},"Day"),r.createElement("option",{value:"3"},"Hour"),r.createElement("option",{value:"2"},"Minute"),r.createElement("option",{value:"1"},"Second"),r.createElement("option",{value:"0"},"Millisecond")))))),r.createElement("li",{className:"nav-item",style:{width:"20%",paddingRight:10}},r.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},r.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},"Additional Filter:"),r.createElement("button",{className:"btn btn-primary","data-toggle":"modal","data-target":"#newFilter",onClick:function(t){return t.preventDefault()}},"Edit Filter")))))),r.createElement("div",{className:"modal",id:"newFilter"},r.createElement("div",{className:"modal-dialog"},r.createElement("div",{className:"modal-content"},r.createElement("div",{className:"modal-header"},r.createElement("h4",{className:"modal-title"},"Filter CapBank Events"),r.createElement("button",{type:"button",className:"close","data-dismiss":"modal"},"×")),r.createElement("div",{className:"modal-body",style:{display:"inline-flex"}},r.createElement("div",{style:{width:"50%",paddingRight:10}},r.createElement(ce,{activeFilter:this.props.ResFilt,showAll:!1,Label:"Resonance",setter:function(e){var n=d.a.clone(t.props);n.ResFilt=e,t.props.stateSetter({searchBarProps:n})},filters:[{Label:"Resonance",Values:[1]},{Label:"No Resonance",Values:[0]}]}),r.createElement(ce,{activeFilter:this.props.OpFilt,showAll:!0,Label:"Operation",setter:function(e){var n=d.a.clone(t.props);n.OpFilt=e,t.props.stateSetter({searchBarProps:n})},filters:[{Label:"Sag/Swell",Values:[-200]},{Label:"No Switching",Values:[-103,-102,-101]},{Label:"Not Determined",Values:[-1]},{Label:"Opening",Values:[101,102]},{Label:"Closing",Values:[201,202]}]}),r.createElement(ce,{activeFilter:this.props.RestFilt,showAll:!0,Label:"Restrike",setter:function(e){var n=d.a.clone(t.props);n.RestFilt=e,t.props.stateSetter({searchBarProps:n})},filters:[{Label:"No Restrike",Values:[0,20]},{Label:"Possible Restrike",Values:[10]},{Label:"Restrike",Values:[32,42]},{Label:"Reignition",Values:[31,41]},{Label:"Reversed Polarity",Values:[41,42]}]})),r.createElement("div",{style:{width:"50%",paddingRight:10}},r.createElement(ce,{activeFilter:this.props.StatFilt,showAll:!0,Label:"Status",setter:function(e){var n=d.a.clone(t.props);n.StatFilt=e,t.props.stateSetter({searchBarProps:n})},filters:[{Label:"Error",Values:[-1]},{Label:"Normal",Values:[0]},{Label:">2 cyc Between Poles",Values:[12]},{Label:"Abnormal Health",Values:[2]},{Label:"Failed Opening",Values:[3,4]},{Label:"Failed Closing",Values:[10,5]},{Label:"Restrike/ Reignition",Values:[4,5]},{Label:"Abnormal PreInsertion Switching",Values:[8]},{Label:"Missing Pole",Values:[11]},{Label:"Shorted Units",Values:[20]},{Label:"Blown Fuse",Values:[21]},{Label:"Other",Values:[6,22,7]}]}),r.createElement(ce,{activeFilter:this.props.PISFilt,showAll:!0,Label:"Switching Health",setter:function(e){var n=d.a.clone(t.props);n.PISFilt=e,t.props.stateSetter({searchBarProps:n})},filters:[{Label:"Normal",Values:[0]},{Label:"Transient",Values:[1]},{Label:"Too Short",Values:[2]},{Label:"Unknown",Values:[3]}]}),r.createElement(ce,{activeFilter:this.props.HealthFilt,showAll:!0,Label:"CapBank Health",setter:function(e){var n=d.a.clone(t.props);n.HealthFilt=e,t.props.stateSetter({searchBarProps:n})},filters:[{Label:"Normal",Values:[0]},{Label:"Shorted Units",Values:[1]},{Label:"Blown Fuses",Values:[2]},{Label:"Tap Voltages Missing",Values:[3]}]})))))))},e}(r.Component),ce=function(t){var e=t.activeFilter.includes(999),n=t.filters.map((function(e){return n=!0,e.Values.forEach((function(e){t.activeFilter.includes(e)||(n=!1)})),n;var n}));function a(r){var a=n.map((function(t,e){return e===r?!t:t}));-1!==r&&e&&(a=n.map((function(t,e){return e!==r})));var i=[];a.forEach((function(e,n){e&&(i=i.concat(t.filters[n].Values))})),-1!==r||e||i.push(999),t.setter(i)}return r.createElement("div",null,r.createElement("fieldset",{className:"border",style:{padding:"10px",height:"100%"}},r.createElement("legend",{className:"w-auto",style:{fontSize:"large"}},t.Label,":"),r.createElement("form",null,r.createElement("ul",{style:{listStyleType:"none",padding:0,width:"100%",position:"relative",float:"left"}},t.showAll?r.createElement("li",null,r.createElement("label",null,r.createElement("input",{type:"checkbox",onChange:function(){a(-1)},checked:e})," All ")):null,t.filters.map((function(i,o){return r.createElement("li",{key:o},r.createElement("label",null,r.createElement("input",{type:"checkbox",onChange:function(){return a(o)},checked:n[o]||e&&t.showAll})," ",i.Label," "))}))))))},he=n(3),fe=n(10),pe=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),de=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,a,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){a={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(a)throw a.error}}return o},me=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(de(arguments[e]));return t},ye=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.history=u()(),r.mouseDownPos={x:0,y:0,t:0},r.state={Tstart:0,Tend:0,hover:0,points:r.props.data.filter((function(t){return t.includeLegend})).map((function(t,e){return{t:t.data[0][0],y:t.data[0][1],index:e}}))},r}return pe(e,t),e.prototype.componentDidMount=function(){this.generatePlot()},e.prototype.componentDidUpdate=function(t,e){var n=this;d.a.isEqual(t,this.props)?this.state.Tstart!==e.Tstart||this.state.Tend!==e.Tend?this.updatePlot():this.state.hover!==e.hover?this.setState({points:this.props.data.filter((function(t){return t.includeLegend})).map((function(t,e){var r=n.reduceIndex(t.data,t.data.length-1,0,n.state.hover);return{t:t.data[r][0],y:t.data[r][1],index:e}}))}):Object(p.isEqual)(this.state.points,e.points)||this.updateMouse():this.state.points.length!==this.props.data.filter((function(t){return t.includeLegend})).length?this.setState({points:this.props.data.filter((function(t){return t.includeLegend})).map((function(t,e){return{t:t.data[0][0],y:t.data[0][1],index:e}}))},(function(){return n.generatePlot()})):this.generatePlot()},e.prototype.generatePlot=function(){var t=this;he.select("#trendWindow-"+this.props.keyString+">svg").remove();var e=he.select("#trendWindow-"+this.props.keyString),n=e.append("svg").attr("width","100%").attr("height",this.props.height).append("g").attr("transform","translate(40,10)");if(0!=this.props.data.length){var r=Math.max.apply(Math,me(this.props.data.map((function(t){return Math.max.apply(Math,me(t.data.map((function(t){return t[1]}))))})))),a=Math.min.apply(Math,me(this.props.data.map((function(t){return Math.min.apply(Math,me(t.data.map((function(t){return t[1]}))))}))));this.yscale=he.scaleLinear().domain([a,r]).range([this.props.height-60,0]),Object(fe.isNullOrUndefined)(this.props.Tstart)?this.stateSetter({Tstart:Math.min.apply(Math,me(this.props.data.map((function(t){return Math.min.apply(Math,me(t.data.map((function(t){return t[0]}))))}))))}):this.stateSetter({Tstart:this.props.Tstart}),Object(fe.isNullOrUndefined)(this.props.Tend)?this.stateSetter({Tend:Math.max.apply(Math,me(this.props.data.map((function(t){return Math.max.apply(Math,me(t.data.map((function(t){return t[0]}))))}))))}):this.stateSetter({Tend:this.props.Tend}),this.xscale=he.scaleLinear().domain([this.state.Tstart,this.state.Tend]).range([20,e.node().getBoundingClientRect().width-100]),this.yAxis=n.append("g").attr("transform","translate(20,0)").call(he.axisLeft(this.yscale).tickFormat((function(e,n){return t.formatValueTick(e)}))),this.xAxis=n.append("g").attr("transform","translate(0,"+(this.props.height-60)+")").call(he.axisBottom(this.xscale).tickFormat((function(e,n){return t.formatTimeTick(e)}))),this.xLbl=n.append("text").attr("transform","translate("+(e.node().getBoundingClientRect().width-100)/2+" ,"+(this.props.height-20)+")").style("text-anchor","middle").text(""),null!=this.props.yLabel&&n.append("text").attr("transform","rotate(-90)").attr("y",-30).attr("x",-(this.props.height/2-30)).attr("dy","1em").style("text-anchor","middle").text(this.props.yLabel),this.yExp=n.append("text").style("text-anchor","end").text(""),this.updateAxisLabel(),this.hover=n.append("line").attr("stroke","#000").attr("x1",10).attr("x2",10).attr("y1",0).attr("y2",this.props.height-60).style("opacity",0),n.append("defs").append("svg:clipPath").attr("id","clip-"+this.props.keyString).append("svg:rect").attr("width","calc(100% - 120px)").attr("height",this.props.height-60).attr("x",20).attr("y",0),n.append("defs").append("svg:clipPath").attr("id","Markerclip-"+this.props.keyString).append("svg:rect").attr("width","calc(100% - 110px)").attr("height",this.props.height-50).attr("x",15).attr("y",-5),this.paths=n.append("g").attr("id","path-"+this.props.keyString).attr("clip-path","url(#clip-"+this.props.keyString+")"),this.markers=n.append("g").attr("id","marker-"+this.props.keyString).attr("clip-path","url(#Markerclip-"+this.props.keyString+")");var i=this;this.props.data.forEach((function(e){var n=t.paths.append("path").datum(e.data.map((function(t){return{x:t[0],y:t[1]}}))).attr("fill","none").attr("stroke",e.color).attr("stroke-width",2).attr("d",he.line().x((function(t){return i.xscale(t.x)})).y((function(t){return i.yscale(t.y)})).defined((function(t){var e=!isNaN(parseFloat(i.xscale(t.x))),n=!isNaN(parseFloat(i.yscale(t.y)));return e&&n})));":"==e.lineStyle&&n.attr("stroke-dasharray","10,5")})),this.props.data.filter((function(t){return t.includeLegend})).forEach((function(e,n){return t.markers.append("g").selectAll("circle").data(e.data.map((function(t,e){return{x:t[0],y:t[1],pointIndex:e,dataIndex:n}}))).enter().append("circle").attr("cx",(function(t){return i.xscale(t.x)})).attr("cy",(function(t){return i.yscale(t.y)})).attr("r",3).style("stroke","#000000").style("fill",e.color).style("opacity",.5)})),this.mouseMarker=n.append("g").attr("id","MouseMarker-"+this.props.keyString).attr("clip-path","url(#Markerclip-"+this.props.keyString+")"),this.mouseMarker.selectAll("circle").data(this.state.points).enter().append("circle").attr("cx",(function(t){return i.xscale(t.t)})).attr("cy",(function(t){return i.yscale(t.y)})).attr("r",5).style("stroke","#000000").style("fill",(function(t){return i.props.data.filter((function(t){return t.includeLegend}))[t.index].color})).style("opacity",.6),this.brush=n.append("rect").attr("stroke","#000").attr("x",10).attr("width",0).attr("y",0).attr("height",this.props.height-60).attr("fill","black").style("opacity",0),this.area=n.append("g").append("svg:rect").attr("width","calc(100% - 120px)").attr("height","100%").attr("x",20).attr("y",0).style("opacity",0).on("mousemove",this.mousemove.bind(this)).on("mouseout",this.mouseout.bind(this)).on("mousedown",this.mouseDown.bind(this)).on("mouseup",this.mouseUp.bind(this))}},e.prototype.updatePlot=function(){var t=this;this.xscale.domain([this.state.Tstart,this.state.Tend]),this.yscale.domain(this.getYlimit()),this.yAxis.transition().duration(1e3).call(he.axisLeft(this.yscale).tickFormat((function(e,n){return t.formatValueTick(e)}))),this.xAxis.transition().duration(1e3).call(he.axisBottom(this.xscale).tickFormat((function(e,n){return t.formatTimeTick(e)})));var e=this;this.paths.selectAll("path").transition().duration(1e3).attr("d",he.line().x((function(t){return e.xscale(t.x)})).y((function(t){return e.yscale(t.y)})).defined((function(t){var n=!isNaN(parseFloat(e.xscale(t.x))),r=!isNaN(parseFloat(e.yscale(t.y)));return n&&r}))),this.updateAxisLabel(),this.markers.selectAll("circle").transition().duration(1e3).attr("cx",(function(t){return e.xscale(t.x)})).attr("cy",(function(t){return e.yscale(t.y)})),this.updateMouse()},e.prototype.updateMouse=function(){var t=this;this.mouseMarker.selectAll("circle").style("opacity",0),this.mouseMarker.selectAll("circle").data(this.state.points).enter().append("circle").attr("cx",(function(e){return t.xscale(e.t)})).attr("cy",(function(e){return t.yscale(e.y)})).attr("r",5).style("stroke","#000000").style("fill",(function(e){return t.props.data.filter((function(t){return t.includeLegend}))[e.index].color})).style("opacity",0),this.mouseMarker.selectAll("circle").exit().remove(),this.mouseMarker.selectAll("circle").attr("cx",(function(e){return t.xscale(e.t)})).attr("cy",(function(e){return t.yscale(e.y)})).transition().duration(1e3).style("opacity",1)},e.prototype.updateAxisLabel=function(){var t=this.getYlimit().map((function(t){return Math.abs(t)})),e=Math.max.apply(Math,me(t)),n=Math.floor(Math.log10(e)),r=Math.floor(n/3);0==r?this.yExp.text(""):this.yExp.text("x10^"+(3*r).toFixed(0)),e=this.state.Tend-this.state.Tstart;var a="";(e/=1e3)<15?a=" (ms)":e<120?a=" (s)":e<1800?a=" (min:sec)":e<3600?a=" (min)":e<108e3?a=" (hr:min)":e<172800?a=" (hr)":e<2592e3?a=" (m/d hr)":e<5184e4&&(a=" (m/d)"),null!=this.props.xLabel?this.xLbl.text(this.props.xLabel+a):this.xLbl.text("Time"+a)},e.prototype.getYlimit=function(){var t=this,e=Number.MAX_VALUE,n=-Number.MAX_VALUE;return this.props.data.forEach((function(r){r.data.forEach((function(r){r[0]>t.state.Tstart&&r[0]<t.state.Tend&&(r[1]>n&&(n=r[1]),r[1]<e&&(e=r[1]))}))})),[e,n]},e.prototype.formatTimeTick=function(t){var e=moment(t),n=this.state.Tend-this.state.Tstart;return(n/=1e3)<15?e.format("SSS.SS"):n<30?e.format("ss.SS"):n<120?e.format("ss"):n<1800?e.format("mm:ss"):n<3600?e.format("mm"):n<108e3?e.format("hh:mm"):n<172800?e.format("hh"):n<2592e3?e.format("MM/DD hh"):n<5184e4?e.format("MM/DD"):n<47304e4?e.format("MM YYYY"):e.format("YYYY")},e.prototype.formatValueTick=function(t){var e=this.getYlimit().map((function(t){return Math.abs(t)})),n=Math.max.apply(Math,me(e)),r=t,a=Math.floor(Math.log10(n)),i=Math.floor(a/3);return 0!==i&&(r=t/Math.pow(10,3*i)),Math.abs(r)>=100?r.toFixed(1):Math.abs(r)>=10?r.toFixed(2):r.toFixed(3)},e.prototype.mousemove=function(){var t=he.mouse(this.area.node())[0];if(this.hover.attr("x1",t).attr("x2",t),this.hover.style("opacity",1),this.props.allowZoom){var e=this.mouseDownPos.x-t;t<this.mouseDownPos.x?this.brush.attr("x",t).attr("width",e):this.brush.attr("x",this.mouseDownPos.x).attr("width",-e)}var n=this.xscale.invert(t);this.setState({hover:n})},e.prototype.mouseout=function(){this.brush.style("opacity",0),this.hover.style("opacity",0),this.setState({hover:0}),this.mouseMarker.selectAll("circle").style("opacity",0)},e.prototype.mouseDown=function(){this.mouseDownPos={x:he.mouse(this.area.node())[0],y:he.mouse(this.area.node())[1],t:this.xscale.invert(he.mouse(this.area.node())[0])},this.props.allowZoom&&this.brush.attr("x",this.mouseDownPos.x).attr("width",0).style("opacity",.25)},e.prototype.mouseUp=function(){if(this.props.allowZoom){this.brush.style("opacity",0);var t=he.mouse(this.area.node())[0],e=this.xscale.invert(t);if(Math.abs(e-this.mouseDownPos.t)<10)return;e<this.mouseDownPos.t?this.stateSetter({Tstart:e,Tend:this.mouseDownPos.t}):this.stateSetter({Tstart:this.mouseDownPos.t,Tend:e})}},e.prototype.render=function(){var t=this;return r.createElement("div",null,r.createElement("div",{id:"trendWindow-"+this.props.keyString,style:{height:this.props.height,float:"left",width:"100%"}}),r.createElement("div",{id:"legendWindow-"+this.props.keyString,style:{float:"left",width:"100%",display:"flex"}},this.state.points.length==this.props.data.filter((function(t){return t.includeLegend})).length?this.state.points.map((function(e){return ve(t.props.data.filter((function(t){return t.includeLegend}))[e.index],e)})):null))},e.prototype.stateSetter=function(t){this.setState(t)},e.prototype.reduceIndex=function(t,e,n,r){if(e==n)return e;if(r>=t[e][0])return e;if(r<=t[n][0])return n;var a=Math.ceil((e+n)/2);return r>=t[a][0]?this.reduceIndex(t,e,a,r):this.reduceIndex(t,a-1,n,r)},e}(r.Component),ve=function(t,e){return r.createElement("div",{key:t.label,style:{display:"flex",alignItems:"center",marginRight:"20px"}},"-"==t.lineStyle?r.createElement("div",{style:{width:" 10px",height:0,borderTop:"2px solid",borderRight:"10px solid",borderBottom:"2px solid",borderLeft:"10px solid",borderColor:t.color,overflow:"hidden",marginRight:"5px"}}):r.createElement("div",{style:{width:" 10px",height:"4px",borderTop:"0px solid",borderRight:"3px solid",borderBottom:"0px solid",borderLeft:"3px solid",borderColor:t.color,overflow:"hidden",marginRight:"5px"}}),r.createElement("label",{style:{marginTop:"0.5rem"}}," ",t.label," (",e.y,")"))},ge=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),be=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.state={EventData:[],TrendData:{DeltaQ:[],Irms:[],DeltaIrms:[],Vrms:[],DeltaVrms:[],Q:[],Freq:[],THD:[],DeltaTHD:[],SwitchingFreq:[],PeakV:[],Xcap:[],DeltaXcap:[],RestrikeDuration:[],RestrikeI:[],RestrikeV:[],PISDuration:[],PISZ:[],PISI:[],KFactor:[],RelaydV:[],RelayXLV:[],RelayV:[],RelayXV:[],Ineutral:[],BusZ:[],BusV:[],Unbalance:[]},Tstart:0,Tend:0},r}return ge(e,t),e.prototype.componentDidMount=function(){this.props.CapBankID>=0&&this.getData()},e.prototype.componentDidUpdate=function(t){var e=d.a.clone(this.props);!d.a.isEqual(e,t)&&e.CapBankID>=0&&(this.getData(),this.getTimeLimits())},e.prototype.getFilterString=function(){var t="";return this.props.ResFilt.length>0&&(t="&resFilt="+this.props.ResFilt.join(",")),this.props.StatFilt.length>0&&!this.props.StatFilt.includes(999)&&(t=t+"&statFilt="+this.props.StatFilt.join(",")),this.props.OpFilt.length>0&&!this.props.OpFilt.includes(999)&&(t=t+"&operationFilt="+this.props.OpFilt.join(",")),this.props.RestFilt.length>0&&!this.props.RestFilt.includes(999)&&(t=t+"&restrikeFilt="+this.props.RestFilt.join(",")),this.props.PISFilt.length>0&&!this.props.PISFilt.includes(999)&&(t=t+"&switchingHealthFilt="+this.props.PISFilt.join(",")),this.props.HealthFilt.length>0&&!this.props.HealthFilt.includes(999)&&(t=t+"&healthFilt="+this.props.HealthFilt.join(",")),t},e.prototype.getEventTableData=function(){return void 0!==this.eventTableHandle&&this.eventTableHandle.abort(),this.eventTableHandle=$.ajax({type:"GET",url:homePath+"api/PQDashboard/CapBankReport/GetEventTable?capBankId="+this.props.CapBankID+"&date="+this.props.date+"&time="+this.props.time+"&timeWindowunits="+this.props.timeWindowUnits+"&windowSize="+this.props.windowSize+"&bankNum="+this.props.selectedBank+this.getFilterString(),contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}),this.eventTableHandle},e.prototype.getData=function(){var t=this;this.getEventTableData().then((function(e){null!=e?t.setState({EventData:e}):t.setState({EventData:[]})})),this.getTrendData().then((function(e){null!=e&&t.setState({TrendData:e})}))},e.prototype.render=function(){return-1==this.props.CapBankID?r.createElement("div",null):r.createElement("div",{style:{width:"100%",height:"100%",maxHeight:"100%",position:"relative",float:"right",overflowY:"scroll"}},this.state.TrendData.Q.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Short Circuit Power"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.Q,keyString:"SC",allowZoom:!0,height:200,yLabel:"Short Circuit Power (MVA)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.DeltaQ.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Change in Q"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.DeltaQ,keyString:"Q",allowZoom:!0,height:200,yLabel:"Delta Q (kVAR)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.Irms.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"RMS Current"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.Irms,keyString:"Irms",allowZoom:!0,height:200,yLabel:"I RMS (A)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.DeltaIrms.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"RMS Current Change"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.DeltaIrms,keyString:"dIrms",allowZoom:!0,height:200,yLabel:"Delta I RMS (A)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.Vrms.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"RMS Voltage"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.Vrms,keyString:"Vrms",allowZoom:!0,height:200,yLabel:"V RMS (pu)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.DeltaVrms.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"RMS Voltage Change"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.DeltaVrms,keyString:"dVrms",allowZoom:!0,height:200,yLabel:"Delta V RMS (pu)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.Freq.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Resonance Frequency"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.Freq,keyString:"fres",allowZoom:!0,height:200,yLabel:"Res. Freq. (Hz)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.PeakV.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Peak Voltage"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.PeakV,keyString:"Vp",allowZoom:!0,height:200,yLabel:"Voltage peak (pu)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.THD.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Voltage and Current THD"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.THD,keyString:"thd",allowZoom:!0,height:200,yLabel:"THD (%)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.DeltaTHD.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Change in Voltage and Current THD"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.DeltaTHD,keyString:"dthd",allowZoom:!0,height:200,yLabel:"Delta THD (%)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.SwitchingFreq.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Switching Frequency"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.SwitchingFreq,keyString:"swfreq",allowZoom:!0,height:200,yLabel:"Switching Freq. (Hz)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.Xcap.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Impedance"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.Xcap,keyString:"Xcap",allowZoom:!0,height:200,yLabel:"Impedance (Ohm)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.DeltaXcap.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Impedance Change"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.DeltaXcap,keyString:"dXcap",allowZoom:!0,height:200,yLabel:"Impedance (Ohm)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.RestrikeDuration.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Restrike Duration"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.RestrikeDuration,keyString:"RestDur",allowZoom:!0,height:200,yLabel:"Duration (cycles)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.RestrikeI.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Restrike Current Peak"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.RestrikeI,keyString:"RestI",allowZoom:!0,height:200,yLabel:"Current Peak (kA)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.RestrikeV.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Restrike Voltage Peak"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.RestrikeV,keyString:"RestV",allowZoom:!0,height:200,yLabel:"Voltage Peak (kV)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.PISDuration.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Pre-Insertion Switching Duration"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.PISDuration,keyString:"PisDur",allowZoom:!0,height:200,yLabel:"Duration (cycles)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.PISZ.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Pre-Insertion Switching Impedance"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.PISZ,keyString:"PisZ",allowZoom:!0,height:200,yLabel:"Impedance (Ohm)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.PISI.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Pre-Insertion Switching Current"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.PISI,keyString:"PisI",allowZoom:!0,height:200,yLabel:"Current (kA)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.KFactor.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank K Factor"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.KFactor,keyString:"kfactor",allowZoom:!0,height:200,yLabel:"K Factor",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.RelaydV.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Relay Differential Voltage"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.RelaydV,keyString:"reldV",allowZoom:!0,height:200,yLabel:"Diff. Voltage (V)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.RelayV.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Relay Voltage"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.RelayV,keyString:"relV",allowZoom:!0,height:200,yLabel:"Voltage (V)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.RelayXV.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Voltage-Impedance Ratio Missmatch"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.RelayXV,keyString:"relXV",allowZoom:!0,height:200,yLabel:"ratio missmatch (%)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.RelayXLV.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank LV Cap Reactance"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.RelayXLV,keyString:"relX",allowZoom:!0,height:200,yLabel:"Reactance (Ohm)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.Ineutral.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Neutral Current"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.Ineutral,keyString:"In",allowZoom:!0,height:200,yLabel:"Current (A)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.Unbalance.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Unbalance Factors"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.Unbalance,keyString:"ubal",allowZoom:!0,height:200,yLabel:"Unbalance (%)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.BusV.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Zero Sequence Voltage"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.BusV,keyString:"V0",allowZoom:!0,height:200,yLabel:"Voltage (V)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,this.state.TrendData.BusZ.length>0?r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"Capbank Zero Sequence Impedance"),r.createElement("div",{className:"card-body"},r.createElement(ye,{data:this.state.TrendData.BusZ,keyString:"Z0",allowZoom:!0,height:200,yLabel:"Impedance (Ohm)",Tstart:this.state.Tstart,Tend:this.state.Tend}))):null,r.createElement("div",{className:"card"},r.createElement("div",{className:"card-header"},"CapBank Analytic Event Overview"),r.createElement("div",{className:"card-body"},r.createElement("table",{className:"table"},r.createElement("thead",null,r.createElement(xe,null)),r.createElement("tbody",null,this.state.EventData.map((function(t){return _e(t)})))))))},e.prototype.getTimeLimits=function(){var t=this.props.windowSize,e=moment(this.props.date+" "+this.props.time,"MM/dd/yyyy HH:mm:ss.SSSS"),n="";0==this.props.timeWindowUnits?n="ms":1==this.props.timeWindowUnits?n="s":2==this.props.timeWindowUnits?n="m":3==this.props.timeWindowUnits?n="h":4==this.props.timeWindowUnits?n="d":5==this.props.timeWindowUnits?n="w":6==this.props.timeWindowUnits?n="M":7==this.props.timeWindowUnits&&(n="y");var r=Object(p.cloneDeep)(e);r.subtract(t,n);var a=Object(p.cloneDeep)(e);a.add(t,n),this.setState({Tstart:r.valueOf(),Tend:a.valueOf()})},e.prototype.getTrendData=function(){return void 0!==this.trendHandle&&this.trendHandle.abort(),this.trendHandle=$.ajax({type:"GET",url:homePath+"api/PQDashboard/CapBankReport/GetTrend?capBankId="+this.props.CapBankID+"&date="+this.props.date+"&time="+this.props.time+"&timeWindowunits="+this.props.timeWindowUnits+"&windowSize="+this.props.windowSize+"&bankNum="+this.props.selectedBank+this.getFilterString(),contentType:"application/json; charset=utf-8",dataType:"json",cache:!1,async:!0}),this.trendHandle},e}(r.Component),_e=function(t){return r.createElement("tr",{key:t.ID},r.createElement("td",{key:"Time"+t.ID},r.createElement("a",{href:"./eventsearch?line=true&date="+moment(t.Time).format("MM/DD/YYYY")+"&time="+moment(t.Time).format("HH:mm:ss.SSS")+"&windowSize=10&timeWindowUnits=2&tab=All&eventid="+t.EventId}," ",moment(t.Time).format("MM/DD/YY HH:mm:ss.SSSS"))),r.createElement("td",{key:"Phase"+t.ID},t.Phase),r.createElement("td",{key:"Status"+t.ID},t.Status),r.createElement("td",{key:"Operation"+t.ID},t.Operation),r.createElement("td",{key:"Resonance"+t.ID},t.Resonance?"Yes":"No"),r.createElement("td",{key:"Health"+t.ID},t.CapBankHealth),r.createElement("td",{key:"PIS"+t.ID},t.PreInsertionSwitch),r.createElement("td",{key:"Restrike"+t.ID},t.Restrike))},xe=function(){return r.createElement("tr",{key:"Header"},r.createElement("th",{key:"Time"},"Time"),r.createElement("th",{key:"Phase"},"Phase"),r.createElement("th",{key:"Status"},"Analysis Status"),r.createElement("th",{key:"Operation"},"CapBank Operation"),r.createElement("th",{key:"Resonance"},"Resonance"),r.createElement("th",{key:"Health"},"CapBank Health"),r.createElement("th",{key:"Restrike"},"Restrike"),r.createElement("th",{key:"PIS"},"PreInsertionSwitching Condition"))},we=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ee=function(){return(Ee=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var a in e=arguments[n])Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a]);return t}).apply(this,arguments)},Me=function(t){function e(e,n){var r=t.call(this,e,n)||this;r.history=u()();var a=Bt.parse(r.history.location.search);return r.state={searchBarProps:{stateSetter:r.stateSetter.bind(r),CapBankID:null!=a.capBankId?parseInt(a.capBankId):-1,date:null!=a.date?a.date:moment().format("MM/DD/YYYY"),time:null!=a.time?a.time:moment().format("HH:mm:ss.SSS"),windowSize:null!=a.windowSize?parseInt(a.windowSize.toString()):10,timeWindowUnits:null!=a.timeWindowUnits?parseInt(a.timeWindowUnits.toString()):2,selectedBank:null!=a.selectedBank?parseInt(a.selectedBank.toString()):-1,StationId:null!=a.StationId?parseInt(a.StationId):-1,ResFilt:[0,1],StatFilt:[999],OpFilt:[999],RestFilt:[999],PISFilt:[999],HealthFilt:[999]}},r}return we(e,t),e.prototype.render=function(){return r.createElement("div",{style:{width:"100%",height:"100%"}},r.createElement(ue,Ee({},this.state.searchBarProps)),r.createElement("div",{style:{width:"100%",height:"calc( 100% - 250px)"}},r.createElement(be,Ee({},this.state.searchBarProps))))},e.prototype.stateSetter=function(t){var e=this;function n(t){var e=["boolean","number","string"],n=Object(p.clone)(t);return $.each(Object.keys(n.searchBarProps),(function(t,r){e.indexOf(typeof n.searchBarProps[r])<0&&delete n.searchBarProps[r]})),Bt.stringify(n.searchBarProps)}var r=n(this.state);this.setState(t,(function(){var t=n(e.state);Object(p.isEqual)(r,t)||(clearTimeout(e.historyHandle),e.historyHandle=setTimeout((function(){return e.history.push(e.history.location.pathname+"?"+t)}),500))}))},e}(r.Component),Se=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ke=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.history=u()(),r.state={},r}return Se(e,t),e.prototype.render=function(){return r.createElement(s.BrowserRouter,null,r.createElement("div",{style:{position:"absolute",width:"100%",height:"100%",overflow:"hidden"}},r.createElement("div",{style:{width:300,height:"inherit",backgroundColor:"#eeeeee",position:"relative",float:"left"}},r.createElement("a",{href:"https://www.gridprotectionalliance.org"},r.createElement("img",{style:{width:280,margin:10},src:homePath+"Images/SE Browser - Spelled out - 111 high.png"})),r.createElement("div",{style:{width:"100%",height:"100%",marginTop:30}},r.createElement("div",{className:"nav flex-column nav-pills",id:"v-pills-tab",role:"tablist","aria-orientation":"vertical",style:{height:"calc(100% - 240px)"}},r.createElement(s.NavLink,{activeClassName:"nav-link active",className:"nav-link",to:controllerViewPath+"/eventsearch"},"Event Search"),r.createElement(s.NavLink,{activeClassName:"nav-link active",className:"nav-link",to:controllerViewPath+"/meteractivity"},"Meter Activity"),r.createElement(s.NavLink,{activeClassName:"nav-link active",className:"nav-link",to:controllerViewPath+"/breakerreport"},"Breaker Report"),r.createElement(s.NavLink,{activeClassName:"nav-link active",className:"nav-link",to:controllerViewPath+"/relayreport"},"TripCoil Report"),r.createElement(s.NavLink,{activeClassName:"nav-link active",className:"nav-link",to:controllerViewPath+"/capbankreport"},"CapBank Report")),r.createElement("div",{style:{width:"100%",textAlign:"center"}},r.createElement("span",null,"Version 1.0"),r.createElement("br",null),r.createElement("span",null,r.createElement(h,null))))),r.createElement("div",{style:{width:"calc(100% - 300px)",height:"inherit",position:"relative",float:"right"}},r.createElement(s.Route,{path:controllerViewPath+"/eventsearch",component:Gt}),r.createElement(s.Route,{path:controllerViewPath+"/meteractivity",component:x}),r.createElement(s.Route,{path:controllerViewPath+"/breakerreport",component:$t}),r.createElement(s.Route,{path:controllerViewPath+"/relayreport",component:se}),r.createElement(s.Route,{path:controllerViewPath+"/capbankreport",component:Me}))))},e}(r.Component);i.render(r.createElement(ke,null),document.getElementById("pageBody"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,